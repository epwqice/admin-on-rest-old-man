Index: src/reducer/references/oneToMany.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/reducer/references/oneToMany.js	(revision )
+++ src/reducer/references/oneToMany.js	(revision )
@@ -0,0 +1,31 @@
+import { CRUD_GET_MANY_REFERENCE_SUCCESS } from '../../actions/dataActions';
+
+const initialState = {};
+
+export default (previousState = initialState, { type, payload, meta }) => {
+    switch (type) {
+    case CRUD_GET_MANY_REFERENCE_SUCCESS:
+        return {
+            ...previousState,
+            [meta.relatedTo]: payload.data.map(record => record.id),
+        };
+    default:
+        return previousState;
+    }
+};
+
+export const getIds = (state, relatedTo) => state.admin.references.oneToMany[relatedTo];
+
+export const getReferences = (state, reference, relatedTo) => {
+    const ids = getIds(state, relatedTo);
+    if (typeof ids === 'undefined') return undefined;
+    return ids
+        .map(id => state.admin[reference].data[id])
+        .filter(r => typeof r !== 'undefined')
+        .reduce((prev, record) => {
+            prev[record.id] = record; // eslint-disable-line no-param-reassign
+            return prev;
+        }, {});
+};
+
+export const nameRelatedTo = (reference, id, resource, target) => `${resource}_${reference}@${target}_${id}`;
Index: src/rest/simple.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/rest/simple.js	(revision )
+++ src/rest/simple.js	(revision )
@@ -0,0 +1,125 @@
+import { queryParameters, fetchJson } from '../util/fetch';
+import {
+    GET_LIST,
+    GET_ONE,
+    GET_MANY,
+    GET_MANY_REFERENCE,
+    CREATE,
+    UPDATE,
+    DELETE,
+} from './types';
+
+/**
+ * Maps admin-on-rest queries to a simple REST API
+ *
+ * The REST dialect is similar to the one of FakeRest
+ * @see https://github.com/marmelab/FakeRest
+ * @example
+ * GET_LIST     => GET http://my.api.url/posts?sort=['title','ASC']&range=[0, 24]
+ * GET_ONE      => GET http://my.api.url/posts/123
+ * GET_MANY     => GET http://my.api.url/posts?filter={ids:[123,456,789]}
+ * UPDATE       => PUT http://my.api.url/posts/123
+ * CREATE       => POST http://my.api.url/posts/123
+ * DELETE       => DELETE http://my.api.url/posts/123
+ */
+export default (apiUrl, httpClient = fetchJson) => {
+    /**
+     * @param {String} type One of the constants appearing at the top if this file, e.g. 'UPDATE'
+     * @param {String} resource Name of the resource to fetch, e.g. 'posts'
+     * @param {Object} params The REST request params, depending on the type
+     * @returns {Object} { url, options } The HTTP request parameters
+     */
+    const convertRESTRequestToHTTP = (type, resource, params) => {
+        let url = '';
+        const options = {};
+        switch (type) {
+        case GET_LIST: {
+            const { page, perPage } = params.pagination;
+            const { field, order } = params.sort;
+            const query = {
+                sort: JSON.stringify([field, order]),
+                range: JSON.stringify([(page - 1) * perPage, (page * perPage) - 1]),
+                filter: JSON.stringify(params.filter),
+            };
+            url = `${apiUrl}/${resource}?${queryParameters(query)}`;
+            break;
+        }
+        case GET_ONE:
+            url = `${apiUrl}/${resource}/${params.id}`;
+            break;
+        case GET_MANY: {
+            const query = {
+                filter: JSON.stringify({ id: params.ids }),
+            };
+            url = `${apiUrl}/${resource}?${queryParameters(query)}`;
+            break;
+        }
+        case GET_MANY_REFERENCE: {
+            const { page, perPage } = params.pagination;
+            const { field, order } = params.sort;
+            const query = {
+                sort: JSON.stringify([field, order]),
+                range: JSON.stringify([(page - 1) * perPage, (page * perPage) - 1]),
+                filter: JSON.stringify({ ...params.filter, [params.target]: params.id }),
+            };
+            url = `${apiUrl}/${resource}?${queryParameters(query)}`;
+            break;
+        }
+        case UPDATE:
+            url = `${apiUrl}/${resource}/${params.id}`;
+            options.method = 'PUT';
+            options.body = JSON.stringify(params.data);
+            break;
+        case CREATE:
+            url = `${apiUrl}/${resource}`;
+            options.method = 'POST';
+            options.body = JSON.stringify(params.data);
+            break;
+        case DELETE:
+            url = `${apiUrl}/${resource}/${params.id}`;
+            options.method = 'DELETE';
+            break;
+        default:
+            throw new Error(`Unsupported fetch action type ${type}`);
+        }
+        return { url, options };
+    };
+
+    /**
+     * @param {Object} response HTTP response from fetch()
+     * @param {String} type One of the constants appearing at the top if this file, e.g. 'UPDATE'
+     * @param {String} resource Name of the resource to fetch, e.g. 'posts'
+     * @param {Object} params The REST request params, depending on the type
+     * @returns {Object} REST response
+     */
+    const convertHTTPResponseToREST = (response, type, resource, params) => {
+        const { headers, json } = response;
+        switch (type) {
+        case GET_LIST:
+        case GET_MANY_REFERENCE:
+            if (!headers.has('content-range')) {
+                throw new Error('The Content-Range header is missing in the HTTP Response. The simple REST client expects responses for lists of resources to contain this header with the total number of results to build the pagination. If you are using CORS, did you declare Content-Range in the Access-Control-Expose-Headers header?');
+            }
+            return {
+                data: json,
+                total: parseInt(headers.get('content-range').split('/').pop(), 10),
+            };
+        case CREATE:
+            return { data: { ...params.data, id: json.id } };
+        default:
+            return { data: json };
+        }
+    };
+
+    /**
+     * @param {string} type Request type, e.g GET_LIST
+     * @param {string} resource Resource name, e.g. "posts"
+     * @param {Object} payload Request parameters. Depends on the request type
+     * @returns {Promise} the Promise for a REST response
+     */
+    return (type, resource, params) => {
+        const { url, options } = convertRESTRequestToHTTP(type, resource, params);
+        return httpClient(url, options)
+            .then(response => convertHTTPResponseToREST(response, type, resource, params));
+    };
+};
Index: src/util/HttpError.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/util/HttpError.js	(revision )
+++ src/util/HttpError.js	(revision )
@@ -0,0 +1,16 @@
+class HttpError extends Error {
+    constructor(message, status) {
+        super(message);
+        this.message = message;
+        this.status = status;
+        this.name = this.constructor.name;
+        if (typeof Error.captureStackTrace === 'function') {
+            Error.captureStackTrace(this, this.constructor);
+        } else {
+            this.stack = (new Error(message)).stack;
+        }
+        this.stack = new Error().stack;
+    }
+}
+
+export default HttpError;
Index: .travis.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .travis.yml	(revision )
+++ .travis.yml	(revision )
@@ -0,0 +1,10 @@
+language: node_js
+node_js:
+  - '5'
+cache:
+  directories:
+    - node_modules
+branches:
+  only:
+    - master
+    - next
Index: src/util/linkToRecord.spec.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/util/linkToRecord.spec.js	(revision )
+++ src/util/linkToRecord.spec.js	(revision )
@@ -0,0 +1,10 @@
+import assert from 'assert';
+import linkToRecord from './linkToRecord';
+
+describe('Linking to a record', () => {
+  it('should generate valid links', () => {
+    assert.equal(linkToRecord('books', 22), 'books/22');
+    assert.equal(linkToRecord('books', '/books/13'), 'books/%2Fbooks%2F13');
+    assert.equal(linkToRecord('blogs', 'https://dunglas.fr'), 'blogs/https%3A%2F%2Fdunglas.fr');
+  });
+});
Index: package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- package.json	(revision )
+++ package.json	(revision )
@@ -0,0 +1,74 @@
+{
+  "name": "admin-on-rest",
+  "version": "0.9.4",
+  "description": "A frontend Framework for building admin applications on top of REST services, using ES6, React and Material UI",
+  "files": [
+    "*.md",
+    "docs/*.md",
+    "lib",
+    "src"
+  ],
+  "main": "lib/index",
+  "scripts": {
+    "test": "make test"
+  },
+  "authors": [
+    "Fran√ßois Zaninotto"
+  ],
+  "repository": "marmelab/admin-on-rest",
+  "homepage": "https://github.com/marmelab/admin-on-rest#readme",
+  "bugs": "https://github.com/marmelab/admin-on-rest/issues",
+  "license": "MIT",
+  "devDependencies": {
+    "babel-cli": "~6.18.0",
+    "babel-core": "~6.18.2",
+    "babel-eslint": "~7.1.1",
+    "babel-loader": "~6.2.5",
+    "babel-plugin-add-module-exports": "~0.2.1",
+    "babel-plugin-transform-builtin-extend": "^1.1.2",
+    "babel-plugin-transform-react-jsx": "~6.8.0",
+    "babel-plugin-transform-runtime": "~6.15.0",
+    "babel-preset-es2015": "~6.18.0",
+    "babel-preset-react": "~6.16.0",
+    "babel-preset-stage-0": "~6.16.0",
+    "babel-register": "~6.18.0",
+    "css-loader": "~0.26.0",
+    "enzyme": "~2.6.0",
+    "eslint": "~3.11.0",
+    "eslint-config-airbnb": "~13.0.0",
+    "eslint-plugin-import": "~2.2.0",
+    "eslint-plugin-jsx-a11y": "~2.2.3",
+    "eslint-plugin-react": "~6.7.1",
+    "extract-text-webpack-plugin": "~1.0.1",
+    "full-icu": "~1.0.3",
+    "ignore-styles": "~5.0.1",
+    "mocha": "~3.2.0",
+    "react-addons-test-utils": "~15.4.0",
+    "sinon": "~1.17.6",
+    "style-loader": "~0.13.1",
+    "webpack": "~1.13.2",
+    "webpack-dev-server": "~1.16.2"
+  },
+  "dependencies": {
+    "babel-runtime": "~6.18.0",
+    "inflection": "~1.10.0",
+    "lodash.debounce": "~4.0.8",
+    "lodash.defaultsdeep": "~4.6.0",
+    "lodash.get": "~4.4.2",
+    "lodash.set": "~4.3.2",
+    "material-ui": "~0.16.5",
+    "node-polyglot": "2.2.2",
+    "react": "~15.4.0",
+    "react-dom": "~15.4.0",
+    "react-dropzone": "~3.6.0",
+    "react-redux": "~4.4.5",
+    "react-router": "~2.8.1",
+    "react-router-redux": "~4.0.6",
+    "react-tap-event-plugin": "~2.0.0",
+    "recompose": "~0.21.2",
+    "redux": "~3.6.0",
+    "redux-form": "~6.2.0",
+    "redux-saga": "~0.14.2",
+    "reselect": "~2.5.4"
+  }
+}
Index: src/i18n/TranslationUtils.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/i18n/TranslationUtils.js	(revision )
+++ src/i18n/TranslationUtils.js	(revision )
@@ -0,0 +1,8 @@
+import { DEFAULT_LOCALE } from './index';
+
+export const resolveBrowserLocale = (defaultLocale = DEFAULT_LOCALE) => {
+    // from http://blog.ksol.fr/user-locale-detection-browser-javascript/
+    // Rely on the window.navigator object to determine user locale
+    const { language, browserLanguage, userLanguage } = window.navigator;
+    return (language || browserLanguage || userLanguage || defaultLocale).split('-')[0];
+};
Index: src/reducer/ui.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/reducer/ui.js	(revision )
+++ src/reducer/ui.js	(revision )
@@ -0,0 +1,16 @@
+import { TOGGLE_SIDEBAR, SET_SIDEBAR_VISIBILITY } from '../actions';
+
+const defaultState = {
+    sidebarOpen: false,
+};
+
+export default (previousState = defaultState, { type, payload }) => {
+    switch (type) {
+    case TOGGLE_SIDEBAR:
+        return { ...previousState, sidebarOpen: !previousState.sidebarOpen };
+    case SET_SIDEBAR_VISIBILITY:
+        return { ...previousState, sidebarOpen: payload };
+    default:
+        return previousState;
+    }
+};
Index: src/mui/detail/ShowActions.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/detail/ShowActions.js	(revision )
+++ src/mui/detail/ShowActions.js	(revision )
@@ -0,0 +1,19 @@
+import React, { PropTypes } from 'react';
+import { CardActions } from 'material-ui/Card';
+import { ListButton, EditButton, DeleteButton } from '../button';
+
+const cardActionStyle = {
+    zIndex: 2,
+    display: 'inline-block',
+    float: 'right',
+};
+
+const ShowActions = ({ basePath, data, hasDelete, hasEdit, refresh }) => (
+    <CardActions style={cardActionStyle}>
+        {hasEdit && <EditButton basePath={basePath} record={data} />}
+        <ListButton basePath={basePath} />
+        {hasDelete && <DeleteButton basePath={basePath} record={data} />}
+    </CardActions>
+);
+
+export default ShowActions;
Index: src/mui/field/TextField.spec.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/field/TextField.spec.js	(revision )
+++ src/mui/field/TextField.spec.js	(revision )
@@ -0,0 +1,18 @@
+import React from 'react';
+import assert from 'assert';
+import { shallow } from 'enzyme';
+import TextField from './TextField';
+
+describe('<TextField />', () => {
+    it('should display record specific value as plain text', () => {
+        const record = { title: "I'm sorry, Dave. I'm afraid I can't do that." };
+        const wrapper = shallow(<TextField record={record} source="title" />);
+        assert.equal(wrapper.html(), '<span>I&#x27;m sorry, Dave. I&#x27;m afraid I can&#x27;t do that.</span>');
+    });
+
+    it('should handle deep fields', () => {
+        const record = { foo: { title: "I'm sorry, Dave. I'm afraid I can't do that." } };
+        const wrapper = shallow(<TextField record={record} source="foo.title" />);
+        assert.equal(wrapper.html(), '<span>I&#x27;m sorry, Dave. I&#x27;m afraid I can&#x27;t do that.</span>');
+    });
+});
Index: src/mui/field/UrlField.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/field/UrlField.js	(revision )
+++ src/mui/field/UrlField.js	(revision )
@@ -0,0 +1,25 @@
+import React, { PropTypes } from 'react';
+import get from 'lodash.get';
+import pure from 'recompose/pure';
+
+const UrlField = ({ source, record = {}, elStyle }) => (
+    <a href={get(record, source)} style={elStyle}>
+        {get(record, source)}
+    </a>
+);
+
+UrlField.propTypes = {
+    addLabel: PropTypes.bool,
+    elStyle: PropTypes.object,
+    label: PropTypes.string,
+    record: PropTypes.object,
+    source: PropTypes.string.isRequired,
+};
+
+const PureUrlField = pure(UrlField);
+
+PureUrlField.defaultProps = {
+    addLabel: true,
+};
+
+export default PureUrlField;
Index: build.ps1
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build.ps1	(revision )
+++ build.ps1	(revision )
@@ -0,0 +1,147 @@
+<#
+.SYNOPSIS
+  Manages the build of admin-on-rest on windows
+.DESCRIPTION
+  This powershell script attempts to implement the linux makefile for admin-on-rest for those users who may wish to 
+  develop the system on a windows based operating system.
+
+  Examples:
+  1) To install required modules
+  ./make.ps1 -install
+
+  2) To run the in-built example code
+  ./make.ps1 -run
+  
+  3) To generate a production build
+  ./make.ps1 -build
+
+  3) To generate and run the documentation
+  ./make.ps1 -doc
+ 
+  3) To run the included tests
+  ./make.ps1 -test
+
+.INPUTS
+  -install - [optional] this will call npm install 
+  -run - [optional] this will build and run the example
+  -build
+  -watch
+  -doc
+  -test
+  -testwatch
+  -runserver
+
+.OUTPUTS
+
+#>
+
+#-----------------------------------------------------------[Parameters]------------------------------------------------------------
+
+param(
+	[parameter(Mandatory=$false, ParameterSetName='install')]
+	[SWITCH]$install,
+
+	[parameter(Mandatory=$false, ParameterSetName='run')]
+	[SWITCH]$run,
+
+	[parameter(Mandatory=$false, ParameterSetName='build')]
+	[SWITCH]$build,
+
+	[parameter(Mandatory=$false, ParameterSetName='watch')]
+	[SWITCH]$watch,
+	
+	[parameter(Mandatory=$false, ParameterSetName='doc')]
+	[SWITCH]$doc,
+	
+	[parameter(Mandatory=$false, ParameterSetName='test')]
+	[SWITCH]$test,
+
+	[parameter(Mandatory=$false, ParameterSetName='testwatch')]
+	[SWITCH]$testwatch,
+
+    [parameter(Mandatory=$false, ParameterSetName='runserver')]
+    [SWITCH]$runserver
+ )
+
+#---------------------------------------------------------[Initialisations/Declarations]--------------------------------------------------------
+
+$script_version="1.0"
+$initial_directory = $pwd;
+$initial_node_env = $env:NODE_ENV
+
+#-----------------------------------------------------------[Functions]------------------------------------------------------------
+
+Function LogWrite([string]$logstring,[string]$color) {
+	$LogTime = Get-Date -Format "MM-dd-yyyy HH:mm:ss"
+	$logmessage="["+$LogTime+"] "+$logstring
+	if(!$logstring) {
+		$logmessage=$logstring
+	}
+	if($color) {
+		write-host -fore $color $logmessage
+	} else {
+		write-host $logmessage
+	}
+}
+
+#-----------------------------------------------------------[Execution]------------------------------------------------------------
+
+switch($PsCmdlet.ParameterSetName){
+	'install' {
+		$env:NODE_ENV = "development"
+		LogWrite -color Cyan "Performing install of submodules (npm install)"
+		npm install
+		if( $LASTEXITCODE -eq 0 ) {
+			LogWrite -color Green "Npm install completed"
+		} else {
+			LogWrite -color Red "Npm install did not return a successful exit code. Check Failure reason"		
+		}
+	}
+	'run' {
+		$env:NODE_ENV = "development"
+		LogWrite -color Cyan "Running admin-on-rest example"
+		cd example 
+		LogWrite -color Cyan "Install example modules"
+		npm install
+		if( $LASTEXITCODE -eq 0 ) {
+			LogWrite -color Green "Npm install completed"
+		} else {
+			LogWrite -color Red "Npm install did not return a successful exit code. Check Failure reason"		
+		}		
+		..\node_modules\.bin\webpack-dev-server --hot --inline --config .\webpack.config.js
+	}
+	'build' {
+        $env:NODE_ENV="production"
+        ./node_modules/.bin/babel ./src -d lib --ignore '*.spec.js'
+		# 	@cd src && rsync -R `find . -name *.css` ../lib # copy all CSS files keeping structure from src to lib
+	
+	}	
+	'watch' {
+		$env:NODE_ENV = "production"
+		.\node_modules\.bin\webpack -w
+	}
+	'doc' {
+		cd docs
+		jekyll server . --watch
+	}
+	'test' {
+		$env:NODE_ENV = "test"
+		$env:NODE_ICU_DATA="node_modules\full-icu"
+		.\node_modules\.bin\mocha --require ignore-styles --compilers js:babel-register '.\src\**\*.spec.js'
+	}
+	'testwatch' {
+		$env:NODE_ENV = "test"
+		$env:NODE_ICU_DATA="node_modules\full-icu"
+		.\node_modules\.bin\mocha --require ignore-styles --compilers js:babel-register --watch '.\src\**\*.spec.js'
+	}
+    'runserver' {
+        .\node_modules\.bin\babel-node .\main.js --preset es2015, stage-0
+    }
+	default {
+
+	}
+}
+
+# Reset Environment
+cd $initial_directory
+$env:NODE_ENV = $initial_node_env
\ No newline at end of file
Index: src/mui/button/DeleteButton.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/button/DeleteButton.js	(revision )
+++ src/mui/button/DeleteButton.js	(revision )
@@ -0,0 +1,23 @@
+import React, { PropTypes } from 'react';
+import { Link } from 'react-router';
+import FlatButton from 'material-ui/FlatButton';
+import ActionDelete from 'material-ui/svg-icons/action/delete';
+import linkToRecord from '../../util/linkToRecord';
+import translate from '../../i18n/translate';
+
+const DeleteButton = ({ basePath = '', label = 'aor.action.delete', record = {}, translate }) => <FlatButton
+    secondary
+    label={label && translate(label)}
+    icon={<ActionDelete />}
+    containerElement={<Link to={`${linkToRecord(basePath, record.id)}/delete`} />}
+    style={{ overflow: 'inherit' }}
+/>;
+
+DeleteButton.propTypes = {
+    basePath: PropTypes.string,
+    label: PropTypes.string,
+    record: PropTypes.object,
+    translate: PropTypes.func.isRequired,
+};
+
+export default translate(DeleteButton);
Index: src/reducer/references/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/reducer/references/index.js	(revision )
+++ src/reducer/references/index.js	(revision )
@@ -0,0 +1,8 @@
+import { combineReducers } from 'redux';
+import oneToMany from './oneToMany';
+import possibleValues from './possibleValues';
+
+export default combineReducers({
+    oneToMany,
+    possibleValues,
+});
Index: src/mui/form/SimpleForm.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/form/SimpleForm.js	(revision )
+++ src/mui/form/SimpleForm.js	(revision )
@@ -0,0 +1,48 @@
+import React, { PropTypes } from 'react';
+import { reduxForm } from 'redux-form';
+import { connect } from 'react-redux';
+import compose from 'recompose/compose';
+import { validateForm } from '../../util/validate';
+import getDefaultValues from '../form/getDefaultValues';
+import FormField from './FormField';
+import Toolbar from './Toolbar';
+
+export const SimpleForm = ({ children, handleSubmit, invalid, record, resource, basePath }) => (
+    <form onSubmit={handleSubmit}>
+        <div style={{ padding: '0 1em 1em 1em' }}>
+            {React.Children.map(children, input => input && (
+                <div key={input.props.source} style={input.props.style}>
+                    <FormField input={input} resource={resource} record={record} basePath={basePath} />
+                </div>
+            ))}
+        </div>
+        <Toolbar invalid={invalid} />
+    </form>
+);
+
+SimpleForm.propTypes = {
+    children: PropTypes.node,
+    defaultValue: PropTypes.oneOfType([
+        PropTypes.object,
+        PropTypes.func,
+    ]),
+    handleSubmit: PropTypes.func,
+    invalid: PropTypes.bool,
+    record: PropTypes.object,
+    resource: PropTypes.string,
+    basePath: PropTypes.string,
+    validation: PropTypes.func,
+};
+
+const enhance = compose(
+    connect((state, props) => ({
+        initialValues: getDefaultValues(state, props),
+    })),
+    reduxForm({
+        form: 'record-form',
+        validate: validateForm,
+        enableReinitialize: true,
+    }),
+);
+
+export default enhance(SimpleForm);
Index: src/mui/button/EditButton.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/button/EditButton.js	(revision )
+++ src/mui/button/EditButton.js	(revision )
@@ -0,0 +1,34 @@
+import React, { PropTypes } from 'react';
+import { Link } from 'react-router';
+import shouldUpdate from 'recompose/shouldUpdate';
+import compose from 'recompose/compose';
+import FlatButton from 'material-ui/FlatButton';
+import ContentCreate from 'material-ui/svg-icons/content/create';
+import linkToRecord from '../../util/linkToRecord';
+import translate from '../../i18n/translate';
+
+const EditButton = ({ basePath = '', label = 'aor.action.edit', record = {}, translate }) => <FlatButton
+    primary
+    label={label && translate(label)}
+    icon={<ContentCreate />}
+    containerElement={<Link to={linkToRecord(basePath, record.id)} />}
+    style={{ overflow: 'inherit' }}
+/>;
+
+EditButton.propTypes = {
+    basePath: PropTypes.string,
+    label: PropTypes.string,
+    record: PropTypes.object,
+    translate: PropTypes.func.isRequired,
+};
+
+const enhance = compose(
+    shouldUpdate((props, nextProps) =>
+        props.record
+        && props.record.id !== nextProps.record.id
+        || props.basePath !== nextProps.basePath
+    ),
+    translate,
+);
+
+export default enhance(EditButton);
Index: src/reducer/loading.spec.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/reducer/loading.spec.js	(revision )
+++ src/reducer/loading.spec.js	(revision )
@@ -0,0 +1,17 @@
+import assert from 'assert';
+import { FETCH_START, FETCH_END, FETCH_ERROR, FETCH_CANCEL } from '../actions/fetchActions';
+import reducer from './loading';
+
+describe('loading reducer', () => {
+    it('should return 0 by default', () => {
+        assert.equal(0, reducer(undefined, {}));
+    });
+    it('should increase with fetch actions', () => {
+        assert.equal(1, reducer(0, { type: FETCH_START }));
+    });
+    it('should decrease with fetch actions success or failure', () => {
+        assert.equal(0, reducer(1, { type: FETCH_END }));
+        assert.equal(0, reducer(1, { type: FETCH_ERROR }));
+        assert.equal(0, reducer(1, { type: FETCH_CANCEL }));
+    });
+});
Index: src/actions/localeActions.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/actions/localeActions.js	(revision )
+++ src/actions/localeActions.js	(revision )
@@ -0,0 +1,6 @@
+export const CHANGE_LOCALE = 'CHANGE_LOCALE';
+
+export const changeLocale = locale => ({
+    type: CHANGE_LOCALE,
+    payload: locale,
+});
Index: src/actions/dataActions.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/actions/dataActions.js	(revision )
+++ src/actions/dataActions.js	(revision )
@@ -0,0 +1,99 @@
+import {
+    GET_LIST,
+    GET_ONE,
+    CREATE,
+    UPDATE,
+    DELETE,
+    GET_MANY,
+    GET_MANY_REFERENCE,
+} from '../rest/types';
+
+export const CRUD_GET_LIST = 'CRUD_GET_LIST';
+export const CRUD_GET_LIST_LOADING = 'CRUD_GET_LIST_LOADING';
+export const CRUD_GET_LIST_FAILURE = 'CRUD_GET_LIST_FAILURE';
+export const CRUD_GET_LIST_SUCCESS = 'CRUD_GET_LIST_SUCCESS';
+
+export const crudGetList = (resource, pagination, sort, filter, cancelPrevious = true) => ({
+    type: CRUD_GET_LIST,
+    payload: { pagination, sort, filter },
+    meta: { resource, fetch: GET_LIST, cancelPrevious },
+});
+
+export const CRUD_GET_ONE = 'CRUD_GET_ONE';
+export const CRUD_GET_ONE_LOADING = 'CRUD_GET_ONE_LOADING';
+export const CRUD_GET_ONE_FAILURE = 'CRUD_GET_ONE_FAILURE';
+export const CRUD_GET_ONE_SUCCESS = 'CRUD_GET_ONE_SUCCESS';
+
+export const crudGetOne = (resource, id, basePath, cancelPrevious = true) => ({
+    type: CRUD_GET_ONE,
+    payload: { id, basePath },
+    meta: { resource, fetch: GET_ONE, cancelPrevious },
+});
+
+export const CRUD_CREATE = 'CRUD_CREATE';
+export const CRUD_CREATE_LOADING = 'CRUD_CREATE_LOADING';
+export const CRUD_CREATE_FAILURE = 'CRUD_CREATE_FAILURE';
+export const CRUD_CREATE_SUCCESS = 'CRUD_CREATE_SUCCESS';
+
+export const crudCreate = (resource, data, basePath, redirect = true) => ({
+    type: CRUD_CREATE,
+    payload: { data, basePath, redirect },
+    meta: { resource, fetch: CREATE, cancelPrevious: false },
+});
+
+export const CRUD_UPDATE = 'CRUD_UPDATE';
+export const CRUD_UPDATE_LOADING = 'CRUD_UPDATE_LOADING';
+export const CRUD_UPDATE_FAILURE = 'CRUD_UPDATE_FAILURE';
+export const CRUD_UPDATE_SUCCESS = 'CRUD_UPDATE_SUCCESS';
+
+export const crudUpdate = (resource, id, data, previousData, basePath, redirect = true) => ({
+    type: CRUD_UPDATE,
+    payload: { id, data, previousData, basePath, redirect },
+    meta: { resource, fetch: UPDATE, cancelPrevious: false },
+});
+
+export const CRUD_DELETE = 'CRUD_DELETE';
+export const CRUD_DELETE_LOADING = 'CRUD_DELETE_LOADING';
+export const CRUD_DELETE_FAILURE = 'CRUD_DELETE_FAILURE';
+export const CRUD_DELETE_SUCCESS = 'CRUD_DELETE_SUCCESS';
+
+export const crudDelete = (resource, id, basePath, redirect = true) => ({
+    type: CRUD_DELETE,
+    payload: { id, basePath, redirect },
+    meta: { resource, fetch: DELETE, cancelPrevious: false },
+});
+
+export const CRUD_GET_MANY = 'CRUD_GET_MANY';
+export const CRUD_GET_MANY_LOADING = 'CRUD_GET_MANY_LOADING';
+export const CRUD_GET_MANY_FAILURE = 'CRUD_GET_MANY_FAILURE';
+export const CRUD_GET_MANY_SUCCESS = 'CRUD_GET_MANY_SUCCESS';
+
+// Reference related actions
+
+export const crudGetMany = (resource, ids) => ({
+    type: CRUD_GET_MANY,
+    payload: { ids },
+    meta: { resource, fetch: GET_MANY, cancelPrevious: false },
+});
+
+export const CRUD_GET_MATCHING = 'CRUD_GET_MATCHING';
+export const CRUD_GET_MATCHING_LOADING = 'CRUD_GET_MATCHING_LOADING';
+export const CRUD_GET_MATCHING_FAILURE = 'CRUD_GET_MATCHING_FAILURE';
+export const CRUD_GET_MATCHING_SUCCESS = 'CRUD_GET_MATCHING_SUCCESS';
+
+export const crudGetMatching = (reference, relatedTo, pagination, sort, filter) => ({
+    type: CRUD_GET_MATCHING,
+    payload: { pagination, sort, filter },
+    meta: { resource: reference, relatedTo, fetch: GET_LIST, cancelPrevious: false },
+});
+
+export const CRUD_GET_MANY_REFERENCE = 'CRUD_GET_MANY_REFERENCE';
+export const CRUD_GET_MANY_REFERENCE_LOADING = 'CRUD_GET_MANY_REFERENCE_LOADING';
+export const CRUD_GET_MANY_REFERENCE_FAILURE = 'CRUD_GET_MANY_REFERENCE_FAILURE';
+export const CRUD_GET_MANY_REFERENCE_SUCCESS = 'CRUD_GET_MANY_REFERENCE_SUCCESS';
+
+export const crudGetManyReference = (reference, target, id, relatedTo, pagination, sort, filter) => ({
+    type: CRUD_GET_MANY_REFERENCE,
+    payload: { target, id, pagination, sort, filter },
+    meta: { resource: reference, relatedTo, fetch: GET_MANY_REFERENCE, cancelPrevious: false },
+});
Index: src/actions/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/actions/index.js	(revision )
+++ src/actions/index.js	(revision )
@@ -0,0 +1,8 @@
+export * from './dataActions';
+export * from './fetchActions';
+export * from './filterActions';
+export * from './listActions';
+export * from './localeActions';
+export * from './notificationActions';
+export * from './referenceActions';
+export * from './uiActions';
Index: src/mui/layout/Responsive.spec.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/layout/Responsive.spec.js	(revision )
+++ src/mui/layout/Responsive.spec.js	(revision )
@@ -0,0 +1,57 @@
+import assert from 'assert';
+import { shallow } from 'enzyme';
+import React from 'react';
+
+import { Responsive } from './Responsive';
+
+describe('<Responsive>', () => {
+    const Small = () => <div />;
+    const Medium = () => <div />;
+    const Large = () => <div />;
+
+    it('should render the small component on small screens', () => {
+        const wrapper = shallow(<Responsive small={<Small />} medium={<Medium />} large={<Large />} width={1} />);
+        const component = wrapper.find('Small');
+        assert.equal(component.length, 1);
+    });
+    it('should render the medium component on medium screens', () => {
+        const wrapper = shallow(<Responsive small={<Small />} medium={<Medium />} large={<Large />} width={2} />);
+        const component = wrapper.find('Medium');
+        assert.equal(component.length, 1);
+    });
+    it('should render the large component on large screens', () => {
+        const wrapper = shallow(<Responsive small={<Small />} medium={<Medium />} large={<Large />} width={3} />);
+        const component = wrapper.find('Large');
+        assert.equal(component.length, 1);
+    });
+    it('should render the small component on all screens when no other component is passed', () => {
+        assert.equal(shallow(<Responsive small={<Small />} width={1} />).find('Small').length, 1);
+        assert.equal(shallow(<Responsive small={<Small />} width={2} />).find('Small').length, 1);
+        assert.equal(shallow(<Responsive small={<Small />} width={3} />).find('Small').length, 1);
+    });
+    it('should render the medium component on all screens when no other component is passed', () => {
+        assert.equal(shallow(<Responsive medium={<Medium />} width={1} />).find('Medium').length, 1);
+        assert.equal(shallow(<Responsive medium={<Medium />} width={2} />).find('Medium').length, 1);
+        assert.equal(shallow(<Responsive medium={<Medium />} width={3} />).find('Medium').length, 1);
+    });
+    it('should render the large component on all screens when no other component is passed', () => {
+        assert.equal(shallow(<Responsive large={<Large />} width={1} />).find('Large').length, 1);
+        assert.equal(shallow(<Responsive large={<Large />} width={2} />).find('Large').length, 1);
+        assert.equal(shallow(<Responsive large={<Large />} width={3} />).find('Large').length, 1);
+    });
+    it('should fallback to the large component on medium screens', () => {
+        const wrapper = shallow(<Responsive small={<Small />} large={<Large />} width={2} />);
+        const component = wrapper.find('Large');
+        assert.equal(component.length, 1);
+    });
+    it('should fallback to the medium component on small screens', () => {
+        const wrapper = shallow(<Responsive medium={<Medium />} large={<Large />} width={1} />);
+        const component = wrapper.find('Medium');
+        assert.equal(component.length, 1);
+    });
+    it('should fallback to the medium component on large screens', () => {
+        const wrapper = shallow(<Responsive small={<Small />} medium={<Medium />} width={3} />);
+        const component = wrapper.find('Medium');
+        assert.equal(component.length, 1);
+    });
+});
Index: src/actions/referenceActions.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/actions/referenceActions.js	(revision )
+++ src/actions/referenceActions.js	(revision )
@@ -0,0 +1,6 @@
+export const CRUD_GET_ONE_REFERENCE = 'CRUD_GET_ONE_REFERENCE';
+
+export const crudGetOneReference = (resource, id) => ({
+    type: CRUD_GET_ONE_REFERENCE,
+    payload: { resource, id },
+});
Index: CONTRIBUTING.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- CONTRIBUTING.md	(revision )
+++ CONTRIBUTING.md	(revision )
@@ -0,0 +1,56 @@
+# Contributing
+
+So you want to contribute to admin-on-rest? Awesome! Thank you in advance for your contribution. Here are a few guidelines that will help you along the way.
+
+## Asking Questions
+
+For how-to questions and other non-issues, please use [StackOverflow](http://stackoverflow.com/questions/tagged/admin-on-rest) instead of Github issues. There is a StackOverflow tag called "admin-on-rest" that you can use to tag your questions.
+
+## Opening an Issue
+
+If you think you have found a bug, or have a new feature idea, please start by making sure it hasn't already been [reported or fixed](https://github.com/marmelab/admin-on-rest/issues?q=is%3Aissue+is%3Aclosed). You can search through existing issues and PRs to see if someone has reported one similar to yours.
+
+Next, create a new issue that briefly explains the problem, and provides a bit of background as to the circumstances that triggered it, and steps to reproduce it.
+
+For code issues please include:
+* Admin-on-rest version
+* React version
+* Browser version
+* A code example or link to a repo, gist or running site.
+
+For visual or layout problems, images or animated gifs can help explain your issue.
+It's even better with a live reproduction test case.
+
+### Issue Guidelines
+
+Please use a succint description. "doesn't work" doesn't help others find similar issues.
+
+Please don't group multiple topics into one issue, but instead each should be its own issue.
+
+And please don't just '+1' an issue. It spams the maintainers and doesn't help move the issue forward.
+
+## Submitting a Pull Request
+
+Admin-on-rest is a community project, so pull requests are always welcome, but before working on a large change, it is best to open an issue first to discuss it with the maintainers. In that case, prefix it with "[RFC]" (Request for Comments)
+
+When in doubt, keep your pull requests small. To give a PR the best chance of getting accepted, don't bundle more than one feature or bug fix per pull request. It's always best to create two smaller PRs than one big one.
+
+the core team prefix their PRs width "[WIP]" (Work in Progress) or "[RFR]" (ready for Review), don't hesitate to do the same to explain how far you are from completion.
+
+When adding new features or modifying existing, please attempt to include tests to confirm the new behaviour.
+
+### Patches or hotfix: PR on `master`
+
+Bug fixes that don't break existing apps can be PRed against `master`. Hotfix versions are released usually within days. 
+
+### New Features or BC breaks: PR on `next`
+
+At any given time, `next` represents the latest development version of the library. It is merged to master and released on a monthly basis.
+
+### Coding style
+
+Please follow the coding style of the current code base. Admin-on-rest uses eslint, so if possible, enable linting in your editor to get realtime feedback.
+
+## License
+
+By contributing your code to the marmelab/admin-on-rest GitHub repository, you agree to license your contribution under the MIT license.
Index: src/mui/form/FormField.spec.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/form/FormField.spec.js	(revision )
+++ src/mui/form/FormField.spec.js	(revision )
@@ -0,0 +1,56 @@
+import assert from 'assert';
+import { shallow } from 'enzyme';
+import React from 'react';
+
+import FormField from './FormField';
+
+describe('<FormField>', () => {
+    const Foo = () => <div />;
+    Foo.defaultProps = { source: 'bar' };
+    it('should render the input component', () => {
+        const wrapper = shallow(<FormField input={<Foo />} />);
+        const component = wrapper.find('Foo');
+        assert.equal(component.length, 1);
+    });
+    it('should render the input component even if it\'s an html element', () => {
+        const wrapper = shallow(<FormField input={<div />} />);
+        const component = wrapper.find('div');
+        assert.equal(component.length, 1);
+    });
+    it('should not render <Field /> component by default', () => {
+        const wrapper = shallow(<FormField input={<Foo />} />);
+        const component = wrapper.find('Field');
+        assert.equal(component.length, 0);
+    });
+    it('should render a <Field /> component when addField is true', () => {
+        const wrapper = shallow(<FormField input={<Foo addField />} />);
+        const component = wrapper.find('Field');
+        assert.equal(component.length, 1);
+    });
+    it('should not render a <Labeled /> component when addField is true by default', () => {
+        const wrapper = shallow(<FormField input={<Foo addField />} />);
+        const component = wrapper.find('Field').prop('component').name;
+        assert.equal(component, 'Foo');
+    });
+    it('should render a <Labeled /> component when addField is true and addLabel is true', () => {
+        const wrapper = shallow(<FormField input={<Foo addField addLabel />} />);
+        const component = wrapper.find('Field').prop('component').name;
+        assert.equal(component, 'Labeled');
+    });
+
+    it('should not render a <Labeled /> component by default', () => {
+        const wrapper = shallow(<FormField input={<Foo />} />);
+        const component = wrapper.find('Labeled');
+        assert.equal(component.length, 0);
+    });
+    it('should render a <Labeled /> component when addLabel is true', () => {
+        const wrapper = shallow(<FormField input={<Foo addLabel />} />);
+        const component = wrapper.find('Labeled');
+        assert.equal(component.length, 1);
+    });
+    it('should not render a <Field /> component when addLabel is true by default', () => {
+        const wrapper = shallow(<FormField input={<Foo addLabel />} />);
+        const component = wrapper.find('Field');
+        assert.equal(component.length, 0);
+    });
+});
Index: src/mui/list/SingleFieldList.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/list/SingleFieldList.js	(revision )
+++ src/mui/list/SingleFieldList.js	(revision )
@@ -0,0 +1,30 @@
+import React, { PropTypes } from 'react';
+
+/**
+ * Iterator component to be used to display a list of entities, using a single field
+ *
+ * @example Display all the books by the current author
+ * <ReferenceManyField reference="books" target="author_id">
+ *     <SingleFieldList>
+ *         <ChipField source="title" />
+ *     </SingleFieldList>
+ * </ReferenceManyField>
+ */
+const SingleFieldList = ({ ids, data, resource, basePath, children }) => (
+    <div style={{ display: 'flex', flexWrap: 'wrap' }}>
+        {ids.map(id =>
+            React.cloneElement(children, {
+                key: id,
+                record: data[id],
+                resource,
+                basePath,
+            })
+        )}
+    </div>
+);
+
+SingleFieldList.propTypes = {
+    children: PropTypes.element.isRequired,
+};
+
+export default SingleFieldList;
Index: src/mui/detail/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/detail/index.js	(revision )
+++ src/mui/detail/index.js	(revision )
@@ -0,0 +1,4 @@
+export Create from './Create';
+export Edit from './Edit';
+export Show from './Show';
+export SimpleShowLayout from './SimpleShowLayout';
Index: src/mui/list/DatagridBody.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/list/DatagridBody.js	(revision )
+++ src/mui/list/DatagridBody.js	(revision )
@@ -0,0 +1,45 @@
+import React, { PropTypes } from 'react';
+import shouldUpdate from 'recompose/shouldUpdate';
+import { TableBody, TableRow } from 'material-ui/Table';
+import DatagridCell from './DatagridCell';
+
+const DatagridBody = ({ resource, children, ids, data, basePath, styles, rowStyle, options, rowOptions, ...rest }) => (
+    <TableBody displayRowCheckbox={false} {...rest} {...options}>
+        {ids.map((id, rowIndex) => (
+            <TableRow style={rowStyle ? rowStyle(data[id], rowIndex) : styles.tr} key={id} selectable={false} {...rowOptions}>
+                {React.Children.map(children, (field, index) => (
+                    <DatagridCell
+                        key={`${id}-${field.props.source || index}`}
+                        record={data[id]}
+                        defaultStyle={index === 0 ? styles.cell['td:first-child'] : styles.cell.td}
+                        {...{ field, basePath, resource }}
+                    />
+                ))}
+            </TableRow>
+        ))}
+    </TableBody>
+);
+
+DatagridBody.propTypes = {
+    ids: PropTypes.arrayOf(PropTypes.any).isRequired,
+    isLoading: PropTypes.bool,
+    resource: PropTypes.string,
+    data: PropTypes.object.isRequired,
+    basePath: PropTypes.string,
+    options: PropTypes.object,
+    rowOptions: PropTypes.object,
+    styles: PropTypes.object,
+    rowStyle: PropTypes.func,
+};
+
+DatagridBody.defaultProps = {
+    data: {},
+    ids: [],
+};
+
+const PureDatagridBody = shouldUpdate((props, nextProps) => nextProps.isLoading === false)(DatagridBody);
+
+// trick material-ui Table into thinking this is one of the child type it supports
+PureDatagridBody.muiName = 'TableBody';
+
+export default PureDatagridBody;
Index: src/reducer/resource/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/reducer/resource/index.js	(revision )
+++ src/reducer/resource/index.js	(revision )
@@ -0,0 +1,8 @@
+import { combineReducers } from 'redux';
+import data from './data';
+import list from './list';
+
+export default (resource) => combineReducers({
+    data: data(resource),
+    list: list(resource),
+});
Index: src/i18n/TranslationUtils.spec.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/i18n/TranslationUtils.spec.js	(revision )
+++ src/i18n/TranslationUtils.spec.js	(revision )
@@ -0,0 +1,21 @@
+import assert from 'assert';
+
+import { resolveBrowserLocale, DEFAULT_LOCALE } from './index';
+
+describe('TranslationUtils', () => {
+    describe('resolveBrowserLocale', () => {
+        beforeEach(() => {
+            global.window = {};
+        });
+
+        it('should return default locale if there\'s no available locale in browser', () => {
+            window.navigator = {};
+            assert(resolveBrowserLocale(), DEFAULT_LOCALE);
+        });
+
+        it('should splice browser language to take first two locale letters', () => {
+            window.navigator = { language: 'en-US' };
+            assert(resolveBrowserLocale(), 'en');
+        });
+    });
+});
Index: src/mui/detail/Show.spec.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/detail/Show.spec.js	(revision )
+++ src/mui/detail/Show.spec.js	(revision )
@@ -0,0 +1,40 @@
+import React from 'react';
+import assert from 'assert';
+import { shallow } from 'enzyme';
+
+import { Show } from './Show';
+import SimpleShowLayout from './SimpleShowLayout';
+import TextField from '../field/TextField';
+
+describe('<Show />', () => {
+    const defaultProps = {
+        data: {},
+        crudGetOne: () => {},
+        hasDelete: false,
+        id: 'foo',
+        isLoading: false,
+        location: { pathname: '' },
+        params: {},
+        resource: '',
+        translate: x => x,
+    };
+
+    it('should display correctly when called with a child', () => {
+        const Foo = () => <div/>;
+        const wrapper = shallow(<Show {...defaultProps}><Foo/></Show>);
+
+        const inner = wrapper.find('Foo');
+        assert.equal(inner.length, 1);
+    });
+
+    it('should display children inputs of SimpleShowLayout', () => {
+        const wrapper = shallow(<Show {...defaultProps}>
+            <SimpleShowLayout>
+                <TextField source="foo" />
+                <TextField source="bar" />
+            </SimpleShowLayout>
+        </Show>);
+        const inputs = wrapper.find('pure(TextField)');
+        assert.deepEqual(inputs.map(i => i.prop('source')), ['foo', 'bar']);
+    });
+});
Index: src/mui/field/ReferenceField.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/field/ReferenceField.js	(revision )
+++ src/mui/field/ReferenceField.js	(revision )
@@ -0,0 +1,77 @@
+import React, { Component, PropTypes } from 'react';
+import { connect } from 'react-redux';
+import { Link } from 'react-router';
+import LinearProgress from 'material-ui/LinearProgress';
+import get from 'lodash.get';
+import { crudGetOneReference as crudGetOneReferenceAction } from '../../actions/referenceActions';
+import linkToRecord from '../../util/linkToRecord'
+
+/**
+ * @example
+ * <ReferenceField label="Post" source="post_id" reference="posts">
+ *     <TextField source="title" />
+ * </ReferenceField>
+ */
+export class ReferenceField extends Component {
+    componentDidMount() {
+        this.props.crudGetOneReference(this.props.reference, get(this.props.record, this.props.source));
+    }
+
+    componentWillReceiveProps(nextProps) {
+        if (this.props.record.id !== nextProps.record.id) {
+            this.props.crudGetOneReference(nextProps.reference, get(nextProps.record, nextProps.source));
+        }
+    }
+
+    render() {
+        const { record, source, reference, referenceRecord, basePath, allowEmpty, children, elStyle } = this.props;
+        if (React.Children.count(children) !== 1) {
+            throw new Error('<ReferenceField> only accepts a single child');
+        }
+        if (!referenceRecord && !allowEmpty) {
+            return <LinearProgress />;
+        }
+        const rootPath = basePath.split('/').slice(0, -1).join('/');
+        return (
+            <Link style={elStyle} to={linkToRecord(`${rootPath}/${reference}`, get(record, source))}>
+                {React.cloneElement(children, {
+                    record: referenceRecord,
+                    resource: reference,
+                    allowEmpty,
+                    basePath,
+                })}
+            </Link>
+        );
+    }
+}
+
+ReferenceField.propTypes = {
+    addLabel: PropTypes.bool,
+    allowEmpty: PropTypes.bool.isRequired,
+    basePath: PropTypes.string.isRequired,
+    children: PropTypes.element.isRequired,
+    crudGetOneReference: PropTypes.func.isRequired,
+    elStyle: PropTypes.object,
+    label: PropTypes.string,
+    record: PropTypes.object,
+    reference: PropTypes.string.isRequired,
+    referenceRecord: PropTypes.object,
+    source: PropTypes.string.isRequired,
+};
+
+ReferenceField.defaultProps = {
+    addLabel: true,
+    referenceRecord: null,
+    record: {},
+    allowEmpty: false,
+};
+
+function mapStateToProps(state, props) {
+    return {
+        referenceRecord: state.admin[props.reference].data[get(props.record, props.source)],
+    };
+}
+
+export default connect(mapStateToProps, {
+    crudGetOneReference: crudGetOneReferenceAction,
+})(ReferenceField);
Index: src/mui/input/LongTextInput.spec.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/input/LongTextInput.spec.js	(revision )
+++ src/mui/input/LongTextInput.spec.js	(revision )
@@ -0,0 +1,26 @@
+import React from 'react';
+import assert from 'assert';
+import { shallow, render } from 'enzyme';
+import LongTextInput from './LongTextInput';
+
+describe('<LongTextInput />', () => {
+    describe('error message', () => {
+        it('should not be displayed if field is pristine', () => {
+            const wrapper = shallow(<LongTextInput source="foo" meta={{ touched: false }} />);
+            const TextFieldElement = wrapper.find('TextField');
+            assert.equal(TextFieldElement.prop('errorText'), false);
+        });
+
+        it('should not be displayed if field has been touched but is valid', () => {
+            const wrapper = shallow(<LongTextInput source="foo" meta={{ touched: true, error: false }} />);
+            const TextFieldElement = wrapper.find('TextField');
+            assert.equal(TextFieldElement.prop('errorText'), false);
+        });
+
+        it('should be displayed if field has been touched and is invalid', () => {
+            const wrapper = shallow(<LongTextInput source="foo" meta={{ touched: true, error: 'Required field.' }} />);
+            const TextFieldElement = wrapper.find('TextField');
+            assert.equal(TextFieldElement.prop('errorText'), 'Required field.');
+        });
+    });
+});
Index: .eslintrc
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .eslintrc	(revision )
+++ .eslintrc	(revision )
@@ -0,0 +1,19 @@
+{
+    "env": {
+        "browser": true,
+        "mocha": true,
+        "node": true,
+        "phantomjs": true,
+        "protractor": true,
+    },
+    "extends": "airbnb",
+    "parser": "babel-eslint",
+    "rules": {
+        "indent": ["warn", 4],
+        "max-len": ["off"],
+        "react/forbid-prop-types": ["warn", { "forbid": ["any", "array"] }],
+        "react/jsx-indent": ["warn", 4],
+        "react/jsx-indent-props": ["warn", 4],
+        "react/jsx-filename-extension": ["off"]
+    },
+}
Index: src/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/index.js	(revision )
+++ src/index.js	(revision )
@@ -0,0 +1,13 @@
+export * from './actions';
+export * from './auth';
+export * from './i18n';
+export adminReducer from './reducer';
+export localeReducer from './reducer/locale';
+export queryReducer from './reducer/resource/list/queryReducer';
+export * from './rest';
+export * from './sideEffect/saga';
+export * as fetchUtils from './util/fetch';
+export FieldTitle from './util/FieldTitle';
+export Admin from './Admin';
+export CrudRoute from './CrudRoute';
+export Resource from './Resource';
Index: src/mui/form/getDefaultValues.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/form/getDefaultValues.js	(revision )
+++ src/mui/form/getDefaultValues.js	(revision )
@@ -0,0 +1,30 @@
+import { Children } from 'react';
+import { createSelector } from 'reselect';
+import set from 'lodash.set';
+
+const getDefaultValues = (children, data = {}, defaultValue = {}) => {
+    const globalDefaultValue = typeof defaultValue === 'function' ? defaultValue() : defaultValue;
+    const defaultValueFromChildren = children
+        .map(child => ({ source: child.props.source, defaultValue: child.props.defaultValue }))
+        .reduce((prev, next) => {
+            if (next.defaultValue != null) {
+                set(
+                    prev,
+                    next.source,
+                    typeof next.defaultValue === 'function' ? next.defaultValue() : next.defaultValue,
+                );
+            }
+            return prev;
+        }, {});
+    return { ...globalDefaultValue, ...defaultValueFromChildren, ...data };
+};
+
+const getChildren = (state, props) => props.children;
+const getRecord = (state, props) => props.record;
+const getDefaultValue = (state, props) => props.defaultValue;
+
+
+export default createSelector(
+    getChildren, getRecord, getDefaultValue,
+    (children, record, defaultValue) => getDefaultValues(Children.toArray(children), record, defaultValue)
+);
Index: src/mui/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/index.js	(revision )
+++ src/mui/index.js	(revision )
@@ -0,0 +1,9 @@
+export * from './button';
+export * from './detail';
+export * from './form';
+export * from './field';
+export * from './input';
+export * from './layout';
+export * from './list';
+export Delete from './delete/Delete';
+export defaultTheme from './defaultTheme';
Index: src/mui/form/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/form/index.js	(revision )
+++ src/mui/form/index.js	(revision )
@@ -0,0 +1,4 @@
+export FormTab from './FormTab';
+export FormField from './FormField';
+export SimpleForm from './SimpleForm';
+export TabbedForm from './TabbedForm';
Index: src/mui/detail/Edit.spec.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/detail/Edit.spec.js	(revision )
+++ src/mui/detail/Edit.spec.js	(revision )
@@ -0,0 +1,41 @@
+import React from 'react';
+import assert from 'assert';
+import { shallow } from 'enzyme';
+
+import { Edit } from './Edit';
+import TextInput from '../input/TextInput';
+import SimpleForm from '../form/SimpleForm';
+
+describe('<Edit />', () => {
+    const defaultProps = {
+        data: {},
+        crudGetOne: () => {},
+        crudUpdate: () => {},
+        hasDelete: false,
+        id: 'foo',
+        isLoading: false,
+        location: { pathname: '' },
+        params: {},
+        resource: '',
+        translate: x => x,
+    };
+
+    it('should display correctly when called with a child', () => {
+        const Foo = () => <div/>;
+        const wrapper = shallow(<Edit {...defaultProps}><Foo/></Edit>);
+
+        const inner = wrapper.find('Foo');
+        assert.equal(inner.length, 1);
+    });
+
+    it('should display children inputs of SimpleForm', () => {
+        const wrapper = shallow(<Edit {...defaultProps}>
+            <SimpleForm>
+                <TextInput source="foo" />
+                <TextInput source="bar" />
+            </SimpleForm>
+        </Edit>);
+        const inputs = wrapper.find('TextInput');
+        assert.deepEqual(inputs.map(i => i.prop('source')), ['foo', 'bar']);
+    });
+});
Index: src/mui/field/ImageField.spec.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/field/ImageField.spec.js	(revision )
+++ src/mui/field/ImageField.spec.js	(revision )
@@ -0,0 +1,64 @@
+import React from 'react';
+import assert from 'assert';
+import { shallow } from 'enzyme';
+import ImageField from './ImageField';
+
+describe('<ImageField />', () => {
+    it('should return an empty div when record is not set', () => {
+        assert.equal(shallow(<ImageField source="url" />).html(), '<div></div>');
+    });
+
+    it('should render an image with correct attributes based on `source` and `title`', () => {
+        const wrapper = shallow((
+            <ImageField
+                record={{
+                    url: 'http://foo.com/bar.jpg',
+                    title: 'Hello world!',
+                }}
+                source="url"
+                title="title"
+            />
+        ));
+
+        const img = wrapper.find('img');
+        assert.equal(img.prop('src'), 'http://foo.com/bar.jpg');
+        assert.equal(img.prop('alt'), 'Hello world!');
+        assert.equal(img.prop('title'), 'Hello world!');
+    });
+
+    it('should support deep linking', () => {
+        const wrapper = shallow((
+            <ImageField
+                record={{
+                    picture: {
+                        url: 'http://foo.com/bar.jpg',
+                        title: 'Hello world!',
+                    },
+                }}
+                source="picture.url"
+                title="picture.title"
+            />
+        ));
+
+        const img = wrapper.find('img');
+        assert.equal(img.prop('src'), 'http://foo.com/bar.jpg');
+        assert.equal(img.prop('alt'), 'Hello world!');
+        assert.equal(img.prop('title'), 'Hello world!');
+    });
+
+    it('should allow setting static string as title', () => {
+        const wrapper = shallow((
+            <ImageField
+                record={{
+                    url: 'http://foo.com/bar.jpg',
+                }}
+                source="url"
+                title="Hello world!"
+            />
+        ));
+
+        const img = wrapper.find('img');
+        assert.equal(img.prop('alt'), 'Hello world!');
+        assert.equal(img.prop('title'), 'Hello world!');
+    });
+});
Index: src/actions/fetchActions.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/actions/fetchActions.js	(revision )
+++ src/actions/fetchActions.js	(revision )
@@ -0,0 +1,4 @@
+export const FETCH_START = 'FETCH_START';
+export const FETCH_END = 'FETCH_END';
+export const FETCH_ERROR = 'FETCH_ERROR';
+export const FETCH_CANCEL = 'FETCH_CANCEL';
Index: src/mui/list/DatagridCell.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/list/DatagridCell.js	(revision )
+++ src/mui/list/DatagridCell.js	(revision )
@@ -0,0 +1,26 @@
+import React, { PropTypes } from 'react';
+import defaultsDeep from 'lodash.defaultsdeep';
+import { TableRowColumn } from 'material-ui/Table';
+
+const DatagridCell = ({ field, record, basePath, resource, style, defaultStyle, ...rest }) => {
+    const computedStyle = defaultsDeep({}, style, field.props.style, field.type.defaultProps ? field.type.defaultProps.style : {}, defaultStyle);
+    return (
+        <TableRowColumn style={computedStyle} {...rest}>
+            {React.cloneElement(field, { record, basePath, resource })}
+        </TableRowColumn>
+    );
+};
+
+DatagridCell.propTypes = {
+    field: PropTypes.element,
+    record: PropTypes.object, // eslint-disable-line react/forbid-prop-types
+    basePath: PropTypes.string,
+    resource: PropTypes.string,
+    style: PropTypes.object,
+    defaultStyle: PropTypes.shape({
+        td: PropTypes.object,
+        'td:first-child': PropTypes.object,
+    }),
+};
+
+export default DatagridCell;
Index: src/sideEffect/saga/crudFetch.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sideEffect/saga/crudFetch.js	(revision )
+++ src/sideEffect/saga/crudFetch.js	(revision )
@@ -0,0 +1,53 @@
+import { put, call, cancelled, takeEvery, takeLatest } from 'redux-saga/effects';
+import {
+    FETCH_START,
+    FETCH_END,
+    FETCH_ERROR,
+    FETCH_CANCEL,
+} from '../../actions/fetchActions';
+
+const crudFetch = (restClient) => {
+    function* handleFetch(action) {
+        const { type, payload, meta: { fetch: fetchMeta, ...meta } } = action;
+        const restType = fetchMeta;
+
+        yield [
+            put({ type: `${type}_LOADING`, payload, meta }),
+            put({ type: FETCH_START }),
+        ];
+        let response;
+        try {
+            response = yield call(restClient, restType, meta.resource, payload);
+            yield put({
+                type: `${type}_SUCCESS`,
+                payload: response,
+                requestPayload: payload,
+                meta: { ...meta, fetchResponse: restType, fetchStatus: FETCH_END },
+            });
+            yield put({ type: FETCH_END });
+        } catch (error) {
+            yield put({
+                type: `${type}_FAILURE`,
+                error: error.message ? error.message : error,
+                requestPayload: payload,
+                meta: { ...meta, fetchResponse: restType, fetchStatus: FETCH_ERROR },
+            });
+            yield put({ type: FETCH_ERROR, error });
+        } finally {
+            if (yield cancelled()) {
+                yield put({ type: FETCH_CANCEL });
+                return; /* eslint no-unsafe-finally:0 */
+            }
+        }
+    }
+
+    return function* watchCrudFetch() {
+        yield [
+            takeLatest(action => action.meta && action.meta.fetch && action.meta.cancelPrevious, handleFetch),
+            takeEvery(action => action.meta && action.meta.fetch && !action.meta.cancelPrevious, handleFetch),
+        ];
+    };
+};
+
+
+export default crudFetch;
Index: src/actions/uiActions.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/actions/uiActions.js	(revision )
+++ src/actions/uiActions.js	(revision )
@@ -0,0 +1,12 @@
+export const TOGGLE_SIDEBAR = 'TOGGLE_SIDEBAR';
+
+export const toggleSidebar = () => ({
+    type: TOGGLE_SIDEBAR,
+});
+
+export const SET_SIDEBAR_VISIBILITY = 'SET_SIDEBAR_VISIBILITY';
+
+export const setSidebarVisibility = isOpen => ({
+    type: SET_SIDEBAR_VISIBILITY,
+    payload: isOpen,
+});
Index: src/mui/field/EmailField.spec.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/field/EmailField.spec.js	(revision )
+++ src/mui/field/EmailField.spec.js	(revision )
@@ -0,0 +1,24 @@
+import React from 'react';
+import assert from 'assert';
+import { shallow } from 'enzyme';
+import EmailField from './EmailField';
+
+describe('<EmailField />', () => {
+    it('should render as an email link', () => {
+        const record = { foo: 'foo@bar.com' };
+        const wrapper = shallow(<EmailField record={record} source="foo" />);
+        assert.equal(wrapper.html(), '<a href="mailto:foo@bar.com">foo@bar.com</a>');
+    });
+
+    it('should handle deep fields', () => {
+        const record = { foo: { bar: 'foo@bar.com' } };
+        const wrapper = shallow(<EmailField record={record} source="foo.bar" />);
+        assert.equal(wrapper.html(), '<a href="mailto:foo@bar.com">foo@bar.com</a>');
+    });
+
+    it('should display an email (mailto) link', () => {
+        const record = { email: 'hal@kubrickcorp.com' };
+        const wrapper = shallow(<EmailField record={record} source="email" />);
+        assert.equal(wrapper.html(), '<a href="mailto:hal@kubrickcorp.com">hal@kubrickcorp.com</a>');
+    });
+});
Index: src/mui/layout/Responsive.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/layout/Responsive.js	(revision )
+++ src/mui/layout/Responsive.js	(revision )
@@ -0,0 +1,29 @@
+import React, { PropTypes } from 'react';
+import withWidth from 'material-ui/utils/withWidth';
+
+export const Responsive = ({ small, medium, large, width, ...rest }) => {
+    let component;
+    switch (width) {
+    case 1:
+        component = small ? small : (medium ? medium : large);
+        break;
+    case 2:
+        component = medium ? medium : (large ? large : small);
+        break;
+    case 3:
+        component = large ? large : (medium ? medium : small);
+        break;
+    default:
+        throw new Error(`Unknown width ${width}`);
+    }
+    return React.cloneElement(component, rest);
+};
+
+Responsive.propTypes = {
+    small: PropTypes.element,
+    medium: PropTypes.element,
+    large: PropTypes.element,
+    width: PropTypes.number,
+};
+
+export default withWidth()(Responsive);
Index: src/reducer/resource/list/ids.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/reducer/resource/list/ids.js	(revision )
+++ src/reducer/resource/list/ids.js	(revision )
@@ -0,0 +1,22 @@
+import { CRUD_GET_LIST_SUCCESS, CRUD_DELETE_SUCCESS } from '../../../actions/dataActions';
+
+export default resource => (previousState = [], { type, payload, requestPayload, meta }) => {
+    if (!meta || meta.resource !== resource) {
+        return previousState;
+    }
+    switch (type) {
+    case CRUD_GET_LIST_SUCCESS:
+        return payload.data.map(record => record.id);
+    case CRUD_DELETE_SUCCESS: {
+        const index = previousState.findIndex(el => el == requestPayload.id); // eslint-disable-line eqeqeq
+        if (index === -1) {
+            return previousState;
+        }
+        return [...previousState.slice(0, index), ...previousState.slice(index + 1)];
+    }
+    default:
+        return previousState;
+    }
+};
+
+export const getIds = (state) => state;
Index: src/mui/input/ImageInput.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/input/ImageInput.js	(revision )
+++ src/mui/input/ImageInput.js	(revision )
@@ -0,0 +1,151 @@
+import React, { Component, PropTypes } from 'react';
+import Dropzone from 'react-dropzone';
+import translate from '../../i18n/translate';
+
+const defaultStyle = {
+    dropZone: {
+        background: '#efefef',
+        cursor: 'pointer',
+        padding: '1rem',
+        textAlign: 'center',
+        color: '#999',
+    },
+    previewContainer: {
+        position: 'relative',
+        display: 'inline-block',
+    },
+};
+
+export class ImageInput extends Component {
+    constructor(props) {
+        super(props);
+
+        let files = props.input.value || [];
+        if (!Array.isArray(files)) {
+            files = [files];
+        }
+
+        this.state = { files };
+    }
+
+    componentWillReceiveProps(nextProps) {
+        let files = nextProps.input.value || [];
+        if (!Array.isArray(files)) {
+            files = [files];
+        }
+
+        this.setState({ files: files.map(this.transformFile) });
+    }
+
+    onDrop = (files) => {
+        const updatedFiles = [
+            ...this.state.files,
+            ...files.map(this.transformFile),
+        ];
+
+        this.setState({ files: updatedFiles });
+        this.props.input.onChange(files);
+    }
+
+    // turn a browser dropped file structure into expected structure
+    transformFile = (file) => {
+        if (!file.preview) {
+            return file;
+        }
+
+        const { source, title } = React.Children.toArray(this.props.children)[0].props;
+
+        const transformedFile = { ...file };
+        transformedFile[source] = file.preview;
+
+        if (title) {
+            transformedFile[title] = file.name;
+        }
+
+        return transformedFile;
+    };
+
+    label() {
+        const { translate, placeholder } = this.props;
+
+        if (placeholder) {
+            return placeholder;
+        }
+
+        if (this.props.multiple) {
+            return (
+                <p>{translate('aor.input.image.upload_several')}</p>
+            );
+        }
+
+        return (
+            <p>{translate('aor.input.image.upload_single')}</p>
+        );
+    }
+
+    render() {
+        const {
+            accept,
+            children,
+            disableClick,
+            elStyle,
+            maxSize,
+            minSize,
+            multiple,
+            style,
+        } = this.props;
+
+        const finalStyle = {
+            ...defaultStyle,
+            ...style,
+        };
+
+        return (
+            <div style={elStyle}>
+                <Dropzone
+                    onDrop={this.onDrop}
+                    accept={accept}
+                    disableClick={disableClick}
+                    maxSize={maxSize}
+                    minSize={minSize}
+                    multiple={multiple}
+                    style={finalStyle.dropZone}
+                >
+                    {this.label()}
+                </Dropzone>
+                { children && (
+                    <div className="previews">
+                        {this.state.files.map((file, index) => React.cloneElement(
+                            children, {
+                                record: file,
+                                key: index,
+                            },
+                        ))}
+                    </div>
+                ) }
+            </div>
+        );
+    }
+}
+
+ImageInput.propTypes = {
+    accept: PropTypes.string,
+    children: PropTypes.element,
+    disableClick: PropTypes.bool,
+    elStyle: PropTypes.object,
+    input: PropTypes.object,
+    maxSize: PropTypes.number,
+    minSize: PropTypes.number,
+    multiple: PropTypes.bool,
+    style: PropTypes.object,
+    placeholder: PropTypes.node,
+};
+
+ImageInput.defaultProps = {
+    addLabel: true,
+    addField: true,
+    multiple: false,
+    onUpload: () => {},
+};
+
+export default translate(ImageInput);
Index: src/mui/input/NumberInput.spec.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/input/NumberInput.spec.js	(revision )
+++ src/mui/input/NumberInput.spec.js	(revision )
@@ -0,0 +1,114 @@
+import React from 'react';
+import assert from 'assert';
+import { shallow } from 'enzyme';
+import sinon from 'sinon';
+import NumberInput from './NumberInput';
+
+describe('<NumberInput />', () => {
+    const defaultProps = {
+        source: 'foo',
+        meta: {},
+        input: {
+            onBlur: () => {},
+            onChange: () => {},
+            onFocus: () => {},
+        },
+        onChange: () => {},
+        onBlur: () => {},
+        onFocus: () => {},
+    };
+
+    it('should use a mui TextField', () => {
+        const wrapper = shallow(<NumberInput {...defaultProps} input={{ value: 'hello' }} />);
+        const TextFieldElement = wrapper.find('TextField');
+        assert.equal(TextFieldElement.length, 1);
+        assert.equal(TextFieldElement.prop('value'), 'hello');
+        assert.equal(TextFieldElement.prop('type'), 'number');
+    });
+
+    describe('onChange event', () => {
+        it('should be customizable via the `onChange` prop', () => {
+            const onChange = sinon.spy();
+
+            const props = { ...defaultProps };
+            const wrapper = shallow(<NumberInput {...props} onChange={onChange} />);
+
+            wrapper.find('TextField').simulate('change', 3);
+            assert.deepEqual(onChange.args, [[3]]);
+        });
+
+        it('should keep calling redux-form original event', () => {
+            const onChange = sinon.spy();
+
+            const wrapper = shallow(<NumberInput {...defaultProps} input={{ value: 2, onChange }} />);
+            wrapper.find('TextField').simulate('change', 3);
+            assert.deepEqual(onChange.args, [[3]]);
+        });
+    });
+
+    describe('onFocus event', () => {
+        it('should be customizable via the `onFocus` prop', () => {
+            const onFocus = sinon.spy();
+
+            const props = { ...defaultProps };
+            const wrapper = shallow(<NumberInput {...props} onFocus={onFocus} />);
+
+            wrapper.find('TextField').simulate('focus', 3);
+            assert.deepEqual(onFocus.args, [[3]]);
+        });
+
+        it('should keep calling redux-form original event', () => {
+            const onFocus = sinon.spy();
+
+            const wrapper = shallow(<NumberInput {...defaultProps} input={{ value: 2, onFocus }} />);
+            wrapper.find('TextField').simulate('focus', 3);
+            assert.deepEqual(onFocus.args, [[3]]);
+        });
+    });
+
+    describe('onBlur event', () => {
+        it('should be customizable via the `onBlur` prop', () => {
+            const onBlur = sinon.spy();
+
+            const props = { ...defaultProps };
+            const wrapper = shallow(<NumberInput {...props} onBlur={onBlur} />);
+
+            wrapper.find('TextField').simulate('blur', 3);
+            assert.deepEqual(onBlur.args, [[3]]);
+        });
+
+        it('should keep calling redux-form original event', () => {
+            const onBlur = sinon.spy();
+
+            const props = {
+                ...defaultProps,
+                input: {
+                    ...defaultProps.input,
+                    onBlur,
+                },
+            };
+
+            const wrapper = shallow(<NumberInput {...props} />);
+            wrapper.find('TextField').simulate('blur', 3);
+            assert.deepEqual(onBlur.args, [[3]]);
+        });
+
+        it('should cast value as a numeric one', () => {
+            const onChange = sinon.spy();
+            const wrapper = shallow(
+                <NumberInput
+                    {...defaultProps}
+                    input={{
+                        value: '2',
+                        onBlur: () => {},
+                        onChange,
+                    }}
+                />,
+            );
+
+            const TextFieldElement = wrapper.find('TextField').first();
+            TextFieldElement.simulate('blur');
+            assert.deepEqual(onChange.args, [[2]]);
+        });
+    });
+});
Index: src/i18n/translate.spec.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/i18n/translate.spec.js	(revision )
+++ src/i18n/translate.spec.js	(revision )
@@ -0,0 +1,14 @@
+import assert from 'assert';
+import React from 'react';
+
+import translate from './translate';
+
+describe('translate HOC', () => {
+    it('should conserve base component default props', () => {
+        const Component = () => <div />;
+        Component.defaultProps = { foo: 'bar' };
+
+        const TranslatedComponent = translate(Component);
+        assert.deepEqual(TranslatedComponent.defaultProps, { foo: 'bar' });
+    });
+});
Index: src/mui/input/AutocompleteInput.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/input/AutocompleteInput.js	(revision )
+++ src/mui/input/AutocompleteInput.js	(revision )
@@ -0,0 +1,124 @@
+import React, { Component, PropTypes } from 'react';
+import AutoComplete from 'material-ui/AutoComplete';
+import FieldTitle from '../../util/FieldTitle';
+
+/**
+ * An Input component for an autocomplete field, using an array of objects for the options
+ *
+ * Pass possible options as an array of objects in the 'choices' attribute.
+ *
+ * By default, the options are built from:
+ *  - the 'id' property as the option value,
+ *  - the 'name' property an the option text
+ * @example
+ * const choices = [
+ *    { id: 'M', name: 'Male' },
+ *    { id: 'F', name: 'Female' },
+ * ];
+ * <AutocompleteInput source="gender" choices={choices} />
+ *
+ * You can also customize the properties to use for the option name and value,
+ * thanks to the 'optionText' and 'optionValue' attributes.
+ * @example
+ * const choices = [
+ *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },
+ *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },
+ * ];
+ * <AutocompleteInput source="author_id" choices={choices} optionText="full_name" optionValue="_id" />
+ *
+ * `optionText` also accepts a function, so you can shape the option text at will:
+ * @example
+ * const choices = [
+ *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },
+ *    { id: 456, first_name: 'Jane', last_name: 'Austen' },
+ * ];
+ * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;
+ * <AutocompleteInput source="author_id" choices={choices} optionText={optionRenderer} />
+ *
+ * You can customize the `filter` function used to filter the results.
+ * By default, it's `AutoComplete.fuzzyFilter`, but you can use any of
+ * the functions provided by `AutoComplete`, or a function of your own
+ * @see http://www.material-ui.com/#/components/auto-complete
+ * @example
+ * import { Edit, SimpleForm, AutocompleteInput } from 'admin-on-rest/mui';
+ * import AutoComplete from 'material-ui/AutoComplete';
+ *
+ * export const PostEdit = (props) => (
+ *     <Edit {...props}>
+ *         <SimpleForm>
+ *             <AutocompleteInput source="category" filter={AutoComplete.caseInsensitiveFilter} choices={choices} />
+ *         </SimpleForm>
+ *     </Edit>
+ * );
+ *
+ * The object passed as `options` props is passed to the material-ui <AutoComplete> component
+ *
+ * @example
+ * <AutocompleteInput source="author_id" options={{ fullWidth: true }} />
+ */
+class AutocompleteInput extends Component {
+    handleNewRequest = (chosenRequest, index) => {
+        if (index !== -1) {
+            const { choices, input, optionValue } = this.props;
+            input.onChange(choices[index][optionValue]);
+        }
+    }
+
+    render() {
+        const { choices, elStyle, filter, input, label, options, optionText, optionValue, setFilter, source, meta: { touched, error }, resource } = this.props;
+
+        const selectedSource = choices.find(choice => choice[optionValue] === input.value);
+        const option = typeof optionText === 'function' ?
+            optionText :
+            choice => choice[optionText];
+        const dataSource = choices.map(choice => ({
+            value: choice[optionValue],
+            text: option(choice),
+        }));
+        return (
+            <AutoComplete
+                searchText={selectedSource && option(selectedSource)}
+                dataSource={dataSource}
+                floatingLabelText={<FieldTitle label={label} source={source} resource={resource} />}
+                filter={filter}
+                onNewRequest={this.handleNewRequest}
+                onUpdateInput={setFilter}
+                openOnFocus
+                style={elStyle}
+                errorText={touched && error}
+                {...options}
+            />
+        );
+    }
+}
+
+AutocompleteInput.propTypes = {
+    addField: PropTypes.bool.isRequired,
+    choices: PropTypes.arrayOf(PropTypes.object),
+    elStyle: PropTypes.object,
+    filter: PropTypes.func.isRequired,
+    input: PropTypes.object,
+    label: PropTypes.string,
+    meta: PropTypes.object,
+    options: PropTypes.object,
+    optionElement: PropTypes.element,
+    optionText: PropTypes.oneOfType([
+        PropTypes.string,
+        PropTypes.func,
+    ]).isRequired,
+    optionValue: PropTypes.string.isRequired,
+    resource: PropTypes.string,
+    setFilter: PropTypes.func,
+    source: PropTypes.string,
+};
+
+AutocompleteInput.defaultProps = {
+    addField: true,
+    choices: [],
+    filter: AutoComplete.fuzzyFilter,
+    options: {},
+    optionText: 'name',
+    optionValue: 'id',
+};
+
+export default AutocompleteInput;
Index: src/mui/list/DatagridHeaderCell.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/list/DatagridHeaderCell.js	(revision )
+++ src/mui/list/DatagridHeaderCell.js	(revision )
@@ -0,0 +1,68 @@
+import React, { PropTypes } from 'react';
+import defaultsDeep from 'lodash.defaultsdeep';
+import shouldUpdate from 'recompose/shouldUpdate';
+import { TableHeaderColumn } from 'material-ui/Table';
+import FlatButton from 'material-ui/FlatButton';
+import ContentSort from 'material-ui/svg-icons/content/sort';
+import FieldTitle from '../../util/FieldTitle';
+
+const styles = {
+    sortButton: {
+        minWidth: 40,
+    },
+    nonSortableLabel: {
+        position: 'relative',
+        paddingLeft: 16,
+        paddingRight: 16,
+        verticalAlign: 'middle',
+        letterSpacing: 0,
+        textTransform: 'uppercase',
+        fontWeight: 500,
+        fontSize: 14,
+    },
+};
+
+export const DatagridHeaderCell = ({ field, defaultStyle, currentSort, updateSort, resource }) => {
+    const style = defaultsDeep({}, field.props.headerStyle, field.type.defaultProps ? field.type.defaultProps.headerStyle : {}, defaultStyle);
+    return (
+        <TableHeaderColumn style={style}>
+            {field.props.sortable !== false && field.props.source ?
+                <FlatButton
+                    labelPosition="before"
+                    onClick={updateSort}
+                    data-sort={field.props.source}
+                    label={<FieldTitle label={field.props.label} source={field.props.source} resource={resource} />}
+                    icon={field.props.source === currentSort.field ?
+                        <ContentSort style={currentSort.order === 'ASC' ? { transform: 'rotate(180deg)' } : {}} /> : false
+                    }
+                    style={styles.sortButton}
+                />
+                :
+                (field.props.label && <span style={styles.nonSortableLabel}>{<FieldTitle label={field.props.label} source={field.props.source} resource={resource} /> }</span>)
+            }
+        </TableHeaderColumn>
+    );
+};
+
+DatagridHeaderCell.propTypes = {
+    field: PropTypes.element,
+    defaultStyle: PropTypes.shape({
+        th: PropTypes.object,
+        'th:first-child': PropTypes.object,
+        sortButton: PropTypes.object,
+        nonSortableLabel: PropTypes.object,
+    }),
+    currentSort: PropTypes.shape({
+        sort: PropTypes.string,
+        order: PropTypes.string,
+    }),
+    isSorting: PropTypes.bool,
+    sortable: PropTypes.bool,
+    resource: PropTypes.string,
+    updateSort: PropTypes.func.isRequired,
+};
+
+export default shouldUpdate((props, nextProps) =>
+    props.isSorting !== nextProps.isSorting
+    || (nextProps.isSorting && props.currentSort.order !== nextProps.currentSort.order)
+)(DatagridHeaderCell);
Index: src/mui/detail/Show.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/detail/Show.js	(revision )
+++ src/mui/detail/Show.js	(revision )
@@ -0,0 +1,117 @@
+import React, { Component, PropTypes } from 'react';
+import { connect } from 'react-redux';
+import { Card, CardTitle, CardActions } from 'material-ui/Card';
+import compose from 'recompose/compose';
+import inflection from 'inflection';
+import ViewTitle from '../layout/ViewTitle';
+import Title from '../layout/Title';
+import { DeleteButton, EditButton, ListButton } from '../button';
+import { crudGetOne as crudGetOneAction } from '../../actions/dataActions';
+import DefaultActions from './ShowActions';
+import translate from '../../i18n/translate';
+
+/**
+ * Turns a children data structure (either single child or array of children) into an array.
+ * We can't use React.Children.toArray as it loses references.
+ */
+const arrayizeChildren = children => (Array.isArray(children) ? children : [children]);
+
+export class Show extends Component {
+    componentDidMount() {
+        this.props.crudGetOne(this.props.resource, this.props.id, this.getBasePath());
+    }
+
+    componentWillReceiveProps(nextProps) {
+        if (this.props.id !== nextProps.id) {
+            this.props.crudGetOne(nextProps.resource, nextProps.id, this.getBasePath());
+        }
+    }
+
+    // FIXME Seems that the cloneElement in CrudRoute slices the children array, which makes this necessary to avoid rerenders
+    shouldComponentUpdate(nextProps) {
+        if (nextProps.isLoading !== this.props.isLoading) {
+            return true;
+        }
+
+        const currentChildren = arrayizeChildren(this.props.children);
+        const newChildren = arrayizeChildren(nextProps.children);
+
+        return newChildren.every((child, index) => child === currentChildren[index]);
+    }
+
+    getBasePath() {
+        const { location } = this.props;
+        return location.pathname.split('/').slice(0, -2).join('/');
+    }
+
+    render() {
+        const { actions = <DefaultActions />, title, children, id, data, isLoading, resource, hasDelete, hasEdit, translate } = this.props;
+        const basePath = this.getBasePath();
+
+        const resourceName = translate(`resources.${resource}.name`, {
+            smart_count: 1,
+            _: inflection.humanize(inflection.singularize(resource)),
+        });
+        const defaultTitle = translate('aor.page.show', {
+            name: `${resourceName}`,
+            id,
+            data,
+        });
+        const titleElement = data ? <Title title={title} record={data} defaultTitle={defaultTitle} /> : '';
+
+        return (
+            <div>
+                <Card style={{ opacity: isLoading ? 0.8 : 1 }}>
+                    {actions && React.cloneElement(actions, {
+                        basePath,
+                        data,
+                        hasDelete,
+                        hasEdit,
+                        refresh: this.refresh,
+                        resource,
+                    })}
+                    <ViewTitle title={titleElement} />
+                    {data && React.cloneElement(children, {
+                        resource,
+                        basePath,
+                        record: data,
+                    })}
+                </Card>
+            </div>
+        );
+    }
+}
+
+Show.propTypes = {
+    actions: PropTypes.element,
+    children: PropTypes.element,
+    crudGetOne: PropTypes.func.isRequired,
+    data: PropTypes.object,
+    hasDelete: PropTypes.bool,
+    hasEdit: PropTypes.bool,
+    id: PropTypes.string.isRequired,
+    isLoading: PropTypes.bool.isRequired,
+    location: PropTypes.object.isRequired,
+    params: PropTypes.object.isRequired,
+    resource: PropTypes.string.isRequired,
+    title: PropTypes.any,
+    translate: PropTypes.func,
+};
+
+function mapStateToProps(state, props) {
+    return {
+        id: props.params.id,
+        data: state.admin[props.resource].data[props.params.id],
+        isLoading: state.admin.loading > 0,
+    };
+}
+
+const enhance = compose(
+    connect(
+        mapStateToProps,
+        { crudGetOne: crudGetOneAction },
+    ),
+    translate,
+);
+
+export default enhance(Show);
Index: src/rest/types.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/rest/types.js	(revision )
+++ src/rest/types.js	(revision )
@@ -0,0 +1,7 @@
+export const GET_LIST = 'GET_LIST';
+export const GET_ONE = 'GET_ONE';
+export const GET_MANY = 'GET_MANY';
+export const GET_MANY_REFERENCE = 'GET_MANY_REFERENCE';
+export const CREATE = 'CREATE';
+export const UPDATE = 'UPDATE';
+export const DELETE = 'DELETE';
Index: src/util/fetch.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/util/fetch.js	(revision )
+++ src/util/fetch.js	(revision )
@@ -0,0 +1,37 @@
+import HttpError from './HttpError';
+
+export const fetchJson = (url, options = {}) => {
+    const requestHeaders = options.headers || new Headers({
+        Accept: 'application/json',
+    });
+    if (!(options && options.body && options.body instanceof FormData)) {
+        requestHeaders.set('Content-Type', 'application/json');
+    }
+    if (options.user && options.user.authenticated && options.user.token) {
+        requestHeaders.set('Authorization', options.user.token);
+    }
+
+    return fetch(url, { ...options, headers: requestHeaders })
+        .then(response => response.text().then(text => ({
+            status: response.status,
+            statusText: response.statusText,
+            headers: response.headers,
+            body: text,
+        })))
+        .then(({ status, statusText, headers, body }) => {
+            let json;
+            try {
+                json = JSON.parse(body);
+            } catch (e) {
+                // not json, no big deal
+            }
+            if (status < 200 || status >= 300) {
+                return Promise.reject(new HttpError((json && json.message) || statusText, status));
+            }
+            return { status, headers, body, json };
+        });
+};
+
+export const queryParameters = data => Object.keys(data)
+    .map(key => [key, data[key]].map(encodeURIComponent).join('='))
+    .join('&');
Index: src/mui/input/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/input/index.js	(revision )
+++ src/mui/input/index.js	(revision )
@@ -0,0 +1,14 @@
+export AutocompleteInput from './AutocompleteInput';
+export BooleanInput from './BooleanInput';
+export CheckboxGroupInput from './CheckboxGroupInput';
+export DateInput from './DateInput';
+export DisabledInput from './DisabledInput';
+export ImageInput from './ImageInput';
+export Labeled from './Labeled';
+export LongTextInput from './LongTextInput';
+export NullableBooleanInput from './NullableBooleanInput';
+export NumberInput from './NumberInput';
+export RadioButtonGroupInput from './RadioButtonGroupInput';
+export ReferenceInput from './ReferenceInput';
+export SelectInput from './SelectInput';
+export TextInput from './TextInput';
Index: src/mui/input/NumberInput.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/input/NumberInput.js	(revision )
+++ src/mui/input/NumberInput.js	(revision )
@@ -0,0 +1,84 @@
+import React, { Component, PropTypes } from 'react';
+import TextField from 'material-ui/TextField';
+import FieldTitle from '../../util/FieldTitle';
+
+/**
+ * An Input component for a number
+ *
+ * @example
+ * <NumberInput source="nb_views" />
+ *
+ * You can customize the `step` props (which defaults to "any")
+ * @example
+ * <NumberInput source="nb_views" step={1} />
+ *
+ * The object passed as `options` props is passed to the material-ui <TextField> component
+ */
+class NumberInput extends Component {
+    handleBlur = (eventOrValue) => {
+        this.props.onBlur(eventOrValue);
+        this.props.input.onBlur(eventOrValue);
+
+        /**
+         * Necessary because of a React bug on <input type="number">
+         * @see https://github.com/facebook/react/issues/1425
+         */
+        this.handleChange(parseFloat(this.props.input.value));
+    }
+
+    handleFocus = (event) => {
+        this.props.onFocus(event);
+        this.props.input.onFocus(event);
+    }
+
+    handleChange = (eventOrValue) => {
+        this.props.onChange(eventOrValue);
+        this.props.input.onChange(eventOrValue);
+    }
+
+    render() {
+        const { elStyle, input, label, meta: { touched, error }, options, source, step, resource } = this.props;
+        return (
+            <TextField
+                {...input}
+                onBlur={this.handleBlur}
+                onFocus={this.handleFocus}
+                onChange={this.handleChange}
+                type="number"
+                step={step}
+                floatingLabelText={<FieldTitle label={label} source={source} resource={resource} />}
+                errorText={touched && error}
+                style={elStyle}
+                {...options}
+            />
+        );
+    }
+}
+
+NumberInput.propTypes = {
+    addField: PropTypes.bool.isRequired,
+    elStyle: PropTypes.object,
+    input: PropTypes.object,
+    label: PropTypes.string,
+    meta: PropTypes.object,
+    name: PropTypes.string,
+    onBlur: PropTypes.func,
+    onChange: PropTypes.func,
+    onFocus: PropTypes.func,
+    options: PropTypes.object,
+    resource: PropTypes.string,
+    source: PropTypes.string,
+    step: PropTypes.string.isRequired,
+    validation: PropTypes.object,
+};
+
+NumberInput.defaultProps = {
+    addField: true,
+    onBlur: () => {},
+    onChange: () => {},
+    onFocus: () => {},
+    options: {},
+    step: 'any',
+};
+
+export default NumberInput;
Index: src/mui/auth/Logout.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/auth/Logout.js	(revision )
+++ src/mui/auth/Logout.js	(revision )
@@ -0,0 +1,37 @@
+import React, { Component, PropTypes } from 'react';
+import { push as pushAction } from 'react-router-redux';
+import { connect } from 'react-redux';
+import compose from 'recompose/compose';
+
+import MenuItem from 'material-ui/MenuItem';
+import ExitIcon from 'material-ui/svg-icons/action/power-settings-new';
+
+import translate from '../../i18n/translate';
+import { AUTH_LOGOUT } from '../../auth';
+
+class Logout extends Component {
+    handleLogout = () => {
+        const { authClient, push } = this.props;
+        authClient(AUTH_LOGOUT)
+            .then(() => push('/login'));
+    }
+    render() {
+        const { authClient, translate } = this.props;
+        return authClient
+         ? <MenuItem leftIcon={<ExitIcon />} primaryText={translate('aor.auth.logout')} onClick={this.handleLogout} />
+         : null;
+    }
+}
+
+Logout.propTypes = {
+    authClient: PropTypes.func,
+    push: PropTypes.func,
+    translate: PropTypes.func,
+};
+
+const enhance = compose(
+    translate,
+    connect(null, { push: pushAction }),
+);
+
+export default enhance(Logout);
Index: src/mui/input/CheckboxGroupInput.spec.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/input/CheckboxGroupInput.spec.js	(revision )
+++ src/mui/input/CheckboxGroupInput.spec.js	(revision )
@@ -0,0 +1,105 @@
+import React from 'react';
+import assert from 'assert';
+import { shallow } from 'enzyme';
+import CheckboxGroupInput from './CheckboxGroupInput';
+
+describe('<CheckboxGroupInput />', () => {
+    const defaultProps = {
+        source: 'foo',
+        meta: {},
+        choices: [
+            { id: 1, name: 'John doe' },
+        ],
+        input: {
+            onChange: () => {},
+            value: [],
+        },
+    };
+
+    it('should use a mui Checkbox', () => {
+        const wrapper = shallow(<CheckboxGroupInput {...defaultProps} />);
+        const CheckboxElement = wrapper.find('Checkbox');
+        assert.equal(CheckboxElement.length, 1);
+    });
+
+    it('should use the input parameter value as the initial input value', () => {
+        const wrapper = shallow(<CheckboxGroupInput {...defaultProps} input={{ value: [1] }} />);
+        const CheckboxElement = wrapper.find('Checkbox').first();
+        assert.equal(CheckboxElement.prop('checked'), true);
+    });
+
+    it('should render choices as mui Checkbox components', () => {
+        const wrapper = shallow(<CheckboxGroupInput
+            {...defaultProps}
+            choices={[
+                { id: 'ang', name: 'Angular' },
+                { id: 'rct', name: 'React' },
+            ]}
+        />);
+        const CheckboxElements = wrapper.find('Checkbox');
+        assert.equal(CheckboxElements.length, 2);
+        const CheckboxElement1 = CheckboxElements.first();
+        assert.equal(CheckboxElement1.prop('value'), 'ang');
+        assert.equal(CheckboxElement1.prop('label'), 'Angular');
+        const CheckboxElement2 = CheckboxElements.at(1);
+        assert.equal(CheckboxElement2.prop('value'), 'rct');
+        assert.equal(CheckboxElement2.prop('label'), 'React');
+    });
+
+    it('should use optionValue as value identifier', () => {
+        const wrapper = shallow(<CheckboxGroupInput
+            {...defaultProps}
+            optionValue="foobar"
+            choices={[
+                { foobar: 'foo', name: 'Bar' },
+            ]}
+        />);
+        const CheckboxElements = wrapper.find('Checkbox');
+        const CheckboxElement1 = CheckboxElements.first();
+        assert.equal(CheckboxElement1.prop('value'), 'foo');
+        assert.equal(CheckboxElement1.prop('label'), 'Bar');
+    });
+
+    it('should use optionText with a string value as text identifier', () => {
+        const wrapper = shallow(<CheckboxGroupInput
+            {...defaultProps}
+            optionText="foobar"
+            choices={[
+                { id: 'foo', foobar: 'Bar' },
+            ]}
+        />);
+        const CheckboxElements = wrapper.find('Checkbox');
+        const CheckboxElement1 = CheckboxElements.first();
+        assert.equal(CheckboxElement1.prop('value'), 'foo');
+        assert.equal(CheckboxElement1.prop('label'), 'Bar');
+    });
+
+    it('should use optionText with a function value as text identifier', () => {
+        const wrapper = shallow(<CheckboxGroupInput
+            {...defaultProps}
+            optionText={choice => choice.foobar}
+            choices={[
+                { id: 'foo', foobar: 'Bar' },
+            ]}
+        />);
+        const CheckboxElements = wrapper.find('Checkbox');
+        const CheckboxElement1 = CheckboxElements.first();
+        assert.equal(CheckboxElement1.prop('value'), 'foo');
+        assert.equal(CheckboxElement1.prop('label'), 'Bar');
+    });
+
+    it('should use optionText with an element value as text identifier', () => {
+        const Foobar = ({ record }) => <span>{record.foobar}</span>;
+        const wrapper = shallow(<CheckboxGroupInput
+            {...defaultProps}
+            optionText={<Foobar />}
+            choices={[
+                { id: 'foo', foobar: 'Bar' },
+            ]}
+        />);
+        const CheckboxElements = wrapper.find('Checkbox');
+        const CheckboxElement1 = CheckboxElements.first();
+        assert.equal(CheckboxElement1.prop('value'), 'foo');
+        assert.deepEqual(CheckboxElement1.prop('label'), <Foobar record={{ id: 'foo', foobar: 'Bar' }} />);
+    });
+});
Index: src/mui/layout/Sidebar.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/layout/Sidebar.js	(revision )
+++ src/mui/layout/Sidebar.js	(revision )
@@ -0,0 +1,62 @@
+import React, { PureComponent, PropTypes } from 'react';
+import { connect } from 'react-redux';
+import Drawer from 'material-ui/Drawer';
+import Paper from 'material-ui/Paper';
+import Responsive from './Responsive';
+import { setSidebarVisibility as setSidebarVisibilityAction } from '../../actions';
+
+const styles = {
+    sidebarOpen: {
+        flex: '0 0 16em',
+        marginLeft: 0,
+        order: -1,
+        transition: 'margin 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms',
+    },
+    sidebarClosed: {
+        flex: '0 0 16em',
+        marginLeft: '-16em',
+        order: -1,
+        transition: 'margin 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms',
+    },
+};
+
+// We shouldn't need PureComponent here as it's connected
+// but for some reason it keeps rendering even though mapStateToProps returns the same object
+class Sidebar extends PureComponent {
+    handleClose = () => {
+        this.props.setSidebarVisibility(false);
+    }
+
+    render() {
+        const { open, setSidebarVisibility, children } = this.props;
+        return (
+            <Responsive
+                small={
+                    <Drawer docked={false} open={open} onRequestChange={setSidebarVisibility}>
+                        {React.cloneElement(children, { onMenuTap: this.handleClose })}
+                    </Drawer>
+                }
+                medium={
+                    <Paper style={open ? styles.sidebarOpen : styles.sidebarClosed}>
+                        {children}
+                    </Paper>
+                }
+            />
+        )
+    }
+}
+
+Sidebar.propTypes = {
+    setSidebarVisibility: PropTypes.func.isRequired,
+    open: PropTypes.bool,
+};
+
+const mapStateToProps = (state, props) => ({
+    open: state.admin.ui.sidebarOpen,
+    locale: state.locale, // force redraw on locale change
+    theme: props.theme, // force redraw on theme changes
+});
+
+export default connect(mapStateToProps, {
+    setSidebarVisibility: setSidebarVisibilityAction,
+})(Sidebar);
Index: src/mui/list/FilterForm.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/list/FilterForm.js	(revision )
+++ src/mui/list/FilterForm.js	(revision )
@@ -0,0 +1,77 @@
+import React, { Component, PropTypes } from 'react';
+import { Field, reduxForm } from 'redux-form';
+import { CardText } from 'material-ui/Card';
+import IconButton from 'material-ui/IconButton';
+import ActionHide from 'material-ui/svg-icons/action/highlight-off';
+import compose from 'recompose/compose';
+
+import translate from '../../i18n/translate';
+
+const styles = {
+    card: { marginTop: '-14px', paddingTop: 0, display: 'flex', justifyContent: 'flex-end', alignItems: 'flex-end', flexWrap: 'wrap' },
+    body: { display: 'inline-block', display: 'flex', alignItems: 'flex-end' },
+    spacer: { width: 48 },
+    icon: { color: '#00bcd4', maddingBottom: 0 },
+    clearFix: { clear: 'right' },
+};
+
+const emptyRecord = {};
+
+export class FilterForm extends Component {
+    getShownFilters() {
+        const { filters, displayedFilters, initialValues } = this.props;
+        return filters
+            .filter(filterElement =>
+                filterElement.props.alwaysOn ||
+                displayedFilters[filterElement.props.source] ||
+                typeof initialValues[filterElement.props.source] !== 'undefined'
+            );
+    }
+
+    handleHide = (event) => this.props.hideFilter(event.currentTarget.dataset.key);
+
+    render() {
+        const { resource, translate } = this.props;
+        return (<div>
+            <CardText style={styles.card}>
+                {this.getShownFilters().reverse().map(filterElement =>
+                    <div key={filterElement.props.source} style={filterElement.props.style || styles.body}>
+                        {filterElement.props.alwaysOn ?
+                            <div style={styles.spacer}>&nbsp;</div> :
+                            <IconButton iconStyle={styles.icon} onTouchTap={this.handleHide} data-key={filterElement.props.source} tooltip={translate('aor.action.remove_filter')}>
+                                <ActionHide />
+                            </IconButton>
+                        }
+                        <div>
+                            <Field
+                                allowEmpty
+                                {...filterElement.props}
+                                name={filterElement.props.source}
+                                component={filterElement.type}
+                                resource={resource}
+                                record={emptyRecord}
+                            />
+                        </div>
+                    </div>
+                )}
+            </CardText>
+            <div style={styles.clearFix} />
+        </div>);
+    }
+}
+
+FilterForm.propTypes = {
+    resource: PropTypes.string.isRequired,
+    filters: PropTypes.arrayOf(PropTypes.node).isRequired,
+    displayedFilters: PropTypes.object.isRequired,
+    hideFilter: PropTypes.func.isRequired,
+    initialValues: PropTypes.object,
+    translate: PropTypes.func.isRequired,
+};
+
+const enhance = compose(
+    translate,
+    reduxForm({ form: 'filterForm' }),
+);
+
+export default enhance(FilterForm);
Index: src/mui/layout/Title.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/layout/Title.js	(revision )
+++ src/mui/layout/Title.js	(revision )
@@ -0,0 +1,31 @@
+import React, { PropTypes } from 'react';
+import onlyUpdateForKeys from 'recompose/onlyUpdateForKeys';
+import compose from 'recompose/compose';
+import translate from '../../i18n/translate';
+
+const Title = ({ defaultTitle, record, title, translate }) => {
+    if (!title) {
+        return <span>{defaultTitle}</span>;
+    }
+    if (typeof title === 'string') {
+        return <span>{translate(title, { _: title })}</span>;
+    }
+    return React.cloneElement(title, { record });
+};
+
+Title.propTypes = {
+    defaultTitle: PropTypes.string.isRequired,
+    record: PropTypes.object,
+    translate: PropTypes.func.isRequired,
+    title: PropTypes.oneOfType([
+        PropTypes.string,
+        PropTypes.element,
+    ]),
+};
+
+const enhance = compose(
+    translate,
+    onlyUpdateForKeys('defaultTitle', 'record', 'title'),
+);
+
+export default enhance(Title);
Index: src/mui/input/NullableBooleanInput.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/input/NullableBooleanInput.js	(revision )
+++ src/mui/input/NullableBooleanInput.js	(revision )
@@ -0,0 +1,36 @@
+import React, { PropTypes } from 'react';
+import SelectInput from './SelectInput';
+import translate from '../../i18n/translate';
+
+export const NullableBooleanInput = ({ input, meta, label, source, elStyle, resource, translate }) => (
+    <SelectInput
+        input={input}
+        label={label}
+        source={source}
+        resource={resource}
+        choices={[
+            { id: null, name: '' },
+            { id: false, name: translate('aor.boolean.false') },
+            { id: true, name: translate('aor.boolean.true') },
+        ]}
+        meta={meta}
+        style={elStyle}
+    />
+);
+
+NullableBooleanInput.propTypes = {
+    addField: PropTypes.bool.isRequired,
+    elStyle: PropTypes.object,
+    input: PropTypes.object,
+    label: PropTypes.string,
+    meta: PropTypes.object,
+    resource: PropTypes.string,
+    source: PropTypes.string,
+    translate: PropTypes.func.isRequired,
+};
+
+NullableBooleanInput.defaultProps = {
+    addField: true,
+};
+
+export default translate(NullableBooleanInput);
Index: src/mui/input/BooleanInput.spec.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/input/BooleanInput.spec.js	(revision )
+++ src/mui/input/BooleanInput.spec.js	(revision )
@@ -0,0 +1,30 @@
+import assert from 'assert';
+import { shallow } from 'enzyme';
+import React from 'react';
+
+import BooleanInput from './BooleanInput';
+
+describe('<BooleanInput />', () => {
+
+    it('should render as a mui Toggle', () => {
+        const wrapper = shallow(<BooleanInput source="foo" input={{}}/>);
+        const choices = wrapper.find('Toggle');
+        assert.equal(choices.length, 1);
+    });
+
+    it('should be checked if the value is true', () => {
+        const wrapper = shallow(<BooleanInput source="foo" input={{ value: true }} />);
+        assert.equal(wrapper.find('Toggle').prop('defaultToggled'), true);
+    });
+
+    it('should not be checked if the value is false', () => {
+        const wrapper = shallow(<BooleanInput source="foo" input={{ value: false }} />);
+        assert.equal(wrapper.find('Toggle').prop('defaultToggled'), false);
+    });
+
+    it('should not be checked if the value is undefined', () => {
+        const wrapper = shallow(<BooleanInput source="foo" input={{}} />);
+        assert.equal(wrapper.find('Toggle').prop('defaultToggled'), false);
+    });
+
+});
Index: src/mui/detail/Create.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/detail/Create.js	(revision )
+++ src/mui/detail/Create.js	(revision )
@@ -0,0 +1,83 @@
+import React, { Component, PropTypes } from 'react';
+import { connect } from 'react-redux';
+import { Card, CardTitle } from 'material-ui/Card';
+import compose from 'recompose/compose';
+import inflection from 'inflection';
+import ViewTitle from '../layout/ViewTitle';
+import Title from '../layout/Title';
+import { crudCreate as crudCreateAction } from '../../actions/dataActions';
+import DefaultActions from './CreateActions';
+import translate from '../../i18n/translate';
+
+class Create extends Component {
+    getBasePath() {
+        const { location } = this.props;
+        return location.pathname.split('/').slice(0, -1).join('/');
+    }
+
+    handleSubmit = (record) => this.props.crudCreate(this.props.resource, record, this.getBasePath());
+
+    render() {
+        const { actions = <DefaultActions />, children, isLoading, resource, title, translate } = this.props;
+        const basePath = this.getBasePath();
+
+        const resourceName = translate(`resources.${resource}.name`, {
+            smart_count: 1,
+            _: inflection.humanize(inflection.singularize(resource)),
+        });
+        const defaultTitle = translate('aor.page.create', {
+            name: `${resourceName}`,
+        });
+        const titleElement = <Title title={title} defaultTitle={defaultTitle} />;
+
+        return (
+            <div>
+                <Card style={{ opacity: isLoading ? 0.8 : 1 }}>
+                    {actions && React.cloneElement(actions, {
+                        basePath,
+                        resource,
+                    })}
+                    <ViewTitle title={titleElement} />
+                    {React.cloneElement(children, {
+                        onSubmit: this.handleSubmit,
+                        resource,
+                        basePath,
+                        record: {},
+                    })}
+                </Card>
+            </div>
+        );
+    }
+}
+
+Create.propTypes = {
+    actions: PropTypes.element,
+    children: PropTypes.element,
+    crudCreate: PropTypes.func.isRequired,
+    isLoading: PropTypes.bool.isRequired,
+    location: PropTypes.object.isRequired,
+    params: PropTypes.object.isRequired,
+    resource: PropTypes.string.isRequired,
+    title: PropTypes.any,
+    translate: PropTypes.func.isRequired,
+};
+
+Create.defaultProps = {
+    data: {},
+};
+
+function mapStateToProps(state) {
+    return {
+        isLoading: state.admin.loading > 0,
+    };
+}
+
+const enhance = compose(
+    connect(
+        mapStateToProps,
+        { crudCreate: crudCreateAction },
+    ),
+    translate,
+);
+
+export default enhance(Create);
Index: src/mui/field/UrlField.spec.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/field/UrlField.spec.js	(revision )
+++ src/mui/field/UrlField.spec.js	(revision )
@@ -0,0 +1,18 @@
+import React from 'react';
+import assert from 'assert';
+import { shallow } from 'enzyme';
+import UrlField from './UrlField';
+
+describe('<UrlField />', () => {
+    it('should display a link', () => {
+        const record = { website: 'https://en.wikipedia.org/wiki/HAL_9000' };
+        const wrapper = shallow(<UrlField record={record} source="website" />);
+        assert.equal(wrapper.html(), '<a href="https://en.wikipedia.org/wiki/HAL_9000">https://en.wikipedia.org/wiki/HAL_9000</a>');
+    });
+
+    it('should handle deep fields', () => {
+        const record = { foo: { website: 'https://en.wikipedia.org/wiki/HAL_9000' } };
+        const wrapper = shallow(<UrlField record={record} source="foo.website" />);
+        assert.equal(wrapper.html(), '<a href="https://en.wikipedia.org/wiki/HAL_9000">https://en.wikipedia.org/wiki/HAL_9000</a>');
+    });
+});
Index: src/mui/input/RadioButtonGroupInput.spec.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/input/RadioButtonGroupInput.spec.js	(revision )
+++ src/mui/input/RadioButtonGroupInput.spec.js	(revision )
@@ -0,0 +1,99 @@
+import React from 'react';
+import assert from 'assert';
+import { shallow } from 'enzyme';
+import RadioButtonGroupInput from './RadioButtonGroupInput';
+
+describe('<RadioButtonGroupInput />', () => {
+    const defaultProps = {
+        source: 'foo',
+        meta: {},
+        input: {},
+    };
+
+    it('should use a mui RadioButtonGroup', () => {
+        const wrapper = shallow(<RadioButtonGroupInput {...defaultProps} label="hello" />);
+        const RadioButtonGroupElement = wrapper.find('RadioButtonGroup');
+        assert.equal(RadioButtonGroupElement.length, 1);
+    });
+
+    it('should use the input parameter value as the initial input value', () => {
+        const wrapper = shallow(<RadioButtonGroupInput {...defaultProps} input={{ value: 2 }} />);
+        const RadioButtonGroupElement = wrapper.find('RadioButtonGroup').first();
+        assert.equal(RadioButtonGroupElement.prop('defaultSelected'), '2');
+    });
+
+    it('should render choices as mui RadioButton components', () => {
+        const wrapper = shallow(<RadioButtonGroupInput
+            {...defaultProps}
+            choices={[
+                { id: 'M', name: 'Male' },
+                { id: 'F', name: 'Female' },
+            ]}
+        />);
+        const RadioButtonElements = wrapper.find('RadioButton');
+        assert.equal(RadioButtonElements.length, 2);
+        const RadioButtonElement1 = RadioButtonElements.first();
+        assert.equal(RadioButtonElement1.prop('value'), 'M');
+        assert.equal(RadioButtonElement1.prop('label'), 'Male');
+        const RadioButtonElement2 = RadioButtonElements.at(1);
+        assert.equal(RadioButtonElement2.prop('value'), 'F');
+        assert.equal(RadioButtonElement2.prop('label'), 'Female');
+    });
+
+    it('should use optionValue as value identifier', () => {
+        const wrapper = shallow(<RadioButtonGroupInput
+            {...defaultProps}
+            optionValue="foobar"
+            choices={[
+                { foobar: 'M', name: 'Male' },
+            ]}
+        />);
+        const RadioButtonElements = wrapper.find('RadioButton');
+        const RadioButtonElement1 = RadioButtonElements.first();
+        assert.equal(RadioButtonElement1.prop('value'), 'M');
+        assert.equal(RadioButtonElement1.prop('label'), 'Male');
+    });
+
+    it('should use optionText with a string value as text identifier', () => {
+        const wrapper = shallow(<RadioButtonGroupInput
+            {...defaultProps}
+            optionText="foobar"
+            choices={[
+                { id: 'M', foobar: 'Male' },
+            ]}
+        />);
+        const RadioButtonElements = wrapper.find('RadioButton');
+        const RadioButtonElement1 = RadioButtonElements.first();
+        assert.equal(RadioButtonElement1.prop('value'), 'M');
+        assert.equal(RadioButtonElement1.prop('label'), 'Male');
+    });
+
+    it('should use optionText with a function value as text identifier', () => {
+        const wrapper = shallow(<RadioButtonGroupInput
+            {...defaultProps}
+            optionText={choice => choice.foobar}
+            choices={[
+                { id: 'M', foobar: 'Male' },
+            ]}
+        />);
+        const RadioButtonElements = wrapper.find('RadioButton');
+        const RadioButtonElement1 = RadioButtonElements.first();
+        assert.equal(RadioButtonElement1.prop('value'), 'M');
+        assert.equal(RadioButtonElement1.prop('label'), 'Male');
+    });
+
+    it('should use optionText with an element value as text identifier', () => {
+        const Foobar = ({ record }) => <span>{record.foobar}</span>;
+        const wrapper = shallow(<RadioButtonGroupInput
+            {...defaultProps}
+            optionText={<Foobar />}
+            choices={[
+                { id: 'M', foobar: 'Male' },
+            ]}
+        />);
+        const RadioButtonElements = wrapper.find('RadioButton');
+        const RadioButtonElement1 = RadioButtonElements.first();
+        assert.equal(RadioButtonElement1.prop('value'), 'M');
+        assert.deepEqual(RadioButtonElement1.prop('label'), <Foobar record={{ id: 'M', foobar: 'Male' }} />);
+    });
+});
Index: src/mui/input/SelectInput.spec.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/input/SelectInput.spec.js	(revision )
+++ src/mui/input/SelectInput.spec.js	(revision )
@@ -0,0 +1,136 @@
+import React from 'react';
+import assert from 'assert';
+import { shallow } from 'enzyme';
+import SelectInput from './SelectInput';
+
+describe('<SelectInput />', () => {
+    const defaultProps = {
+        source: 'foo',
+        meta: {},
+        input: {},
+    };
+
+    it('should use a mui SelectField', () => {
+        const wrapper = shallow(<SelectInput {...defaultProps} input={{ value: 'hello' }} />);
+        const SelectFieldElement = wrapper.find('SelectField');
+        assert.equal(SelectFieldElement.length, 1);
+        assert.equal(SelectFieldElement.prop('value'), 'hello');
+    });
+
+    it('should use the input parameter value as the initial input value', () => {
+        const wrapper = shallow(<SelectInput {...defaultProps} input={{ value: 2 }} />);
+        const SelectFieldElement = wrapper.find('SelectField').first();
+        assert.equal(SelectFieldElement.prop('value'), '2');
+    });
+
+    it('should render choices as mui MenuItem components', () => {
+        const wrapper = shallow(<SelectInput
+            {...defaultProps}
+            choices={[
+                { id: 'M', name: 'Male' },
+                { id: 'F', name: 'Female' },
+            ]}
+        />);
+        const MenuItemElements = wrapper.find('MenuItem');
+        assert.equal(MenuItemElements.length, 2);
+        const MenuItemElement1 = MenuItemElements.first();
+        assert.equal(MenuItemElement1.prop('value'), 'M');
+        assert.equal(MenuItemElement1.prop('primaryText'), 'Male');
+        const MenuItemElement2 = MenuItemElements.at(1);
+        assert.equal(MenuItemElement2.prop('value'), 'F');
+        assert.equal(MenuItemElement2.prop('primaryText'), 'Female');
+    });
+
+    it('should add an empty menu when allowEmpty is true', () => {
+        const wrapper = shallow(<SelectInput
+            allowEmpty
+            {...defaultProps}
+            choices={[
+                { id: 'M', name: 'Male' },
+                { id: 'F', name: 'Female' },
+            ]}
+        />);
+        const MenuItemElements = wrapper.find('MenuItem');
+        assert.equal(MenuItemElements.length, 3);
+        const MenuItemElement1 = MenuItemElements.first();
+        assert.equal(MenuItemElement1.prop('value'), null);
+        assert.equal(MenuItemElement1.prop('primaryText'), '');
+    });
+
+    it('should use optionValue as value identifier', () => {
+        const wrapper = shallow(<SelectInput
+            {...defaultProps}
+            optionValue="foobar"
+            choices={[
+                { foobar: 'M', name: 'Male' },
+            ]}
+        />);
+        const MenuItemElements = wrapper.find('MenuItem');
+        const MenuItemElement1 = MenuItemElements.first();
+        assert.equal(MenuItemElement1.prop('value'), 'M');
+        assert.equal(MenuItemElement1.prop('primaryText'), 'Male');
+    });
+
+    it('should use optionText with a string value as text identifier', () => {
+        const wrapper = shallow(<SelectInput
+            {...defaultProps}
+            optionText="foobar"
+            choices={[
+                { id: 'M', foobar: 'Male' },
+            ]}
+        />);
+        const MenuItemElements = wrapper.find('MenuItem');
+        const MenuItemElement1 = MenuItemElements.first();
+        assert.equal(MenuItemElement1.prop('value'), 'M');
+        assert.equal(MenuItemElement1.prop('primaryText'), 'Male');
+    });
+
+    it('should use optionText with a function value as text identifier', () => {
+        const wrapper = shallow(<SelectInput
+            {...defaultProps}
+            optionText={choice => choice.foobar}
+            choices={[
+                { id: 'M', foobar: 'Male' },
+            ]}
+        />);
+        const MenuItemElements = wrapper.find('MenuItem');
+        const MenuItemElement1 = MenuItemElements.first();
+        assert.equal(MenuItemElement1.prop('value'), 'M');
+        assert.equal(MenuItemElement1.prop('primaryText'), 'Male');
+    });
+
+    it('should use optionText with an element value as text identifier', () => {
+        const Foobar = ({ record }) => <span>{record.foobar}</span>;
+        const wrapper = shallow(<SelectInput
+            {...defaultProps}
+            optionText={<Foobar />}
+            choices={[
+                { id: 'M', foobar: 'Male' },
+            ]}
+        />);
+        const MenuItemElements = wrapper.find('MenuItem');
+        const MenuItemElement1 = MenuItemElements.first();
+        assert.equal(MenuItemElement1.prop('value'), 'M');
+        assert.deepEqual(MenuItemElement1.prop('primaryText'), <Foobar record={{ id: 'M', foobar: 'Male' }} />);
+    });
+
+    describe('error message', () => {
+        it('should not be displayed if field is pristine', () => {
+            const wrapper = shallow(<SelectInput {...defaultProps} meta={{ touched: false }} />);
+            const SelectFieldElement = wrapper.find('SelectField');
+            assert.equal(SelectFieldElement.prop('errorText'), false);
+        });
+
+        it('should not be displayed if field has been touched but is valid', () => {
+            const wrapper = shallow(<SelectInput {...defaultProps} meta={{ touched: true, error: false }} />);
+            const SelectFieldElement = wrapper.find('SelectField');
+            assert.equal(SelectFieldElement.prop('errorText'), false);
+        });
+
+        it('should be displayed if field has been touched and is invalid', () => {
+            const wrapper = shallow(<SelectInput {...defaultProps} meta={{ touched: true, error: 'Required field.' }} />);
+            const SelectFieldElement = wrapper.find('SelectField');
+            assert.equal(SelectFieldElement.prop('errorText'), 'Required field.');
+        });
+    });
+});
Index: src/mui/layout/AppBar.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/layout/AppBar.js	(revision )
+++ src/mui/layout/AppBar.js	(revision )
@@ -0,0 +1,30 @@
+import React, { PropTypes } from 'react';
+import { connect } from 'react-redux';
+import MuiAppBar from 'material-ui/AppBar';
+import muiThemeable from 'material-ui/styles/muiThemeable';
+import compose from 'recompose/compose';
+import { toggleSidebar as toggleSidebarAction } from '../../actions';
+
+const AppBar = ({ title, toggleSidebar }) => (
+    <MuiAppBar
+        title={title}
+        onLeftIconButtonTouchTap={toggleSidebar}
+    />
+);
+
+AppBar.propTypes = {
+    title: PropTypes.oneOfType([
+        PropTypes.string,
+        PropTypes.element
+    ]).isRequired,
+    toggleSidebar: PropTypes.func.isRequired,
+};
+
+const enhance = compose(
+    muiThemeable(), // force redraw on theme change
+    connect(null, {
+        toggleSidebar: toggleSidebarAction,
+    }),
+);
+
+export default enhance(AppBar);
Index: src/auth/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/auth/index.js	(revision )
+++ src/auth/index.js	(revision )
@@ -0,0 +1,3 @@
+export const AUTH_CHECK = 'AUTH_CHECK';
+export const AUTH_LOGIN = 'AUTH_LOGIN';
+export const AUTH_LOGOUT = 'AUTH_LOGOUT';
Index: src/mui/button/RefreshButton.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/button/RefreshButton.js	(revision )
+++ src/mui/button/RefreshButton.js	(revision )
@@ -0,0 +1,19 @@
+import React, { PropTypes } from 'react';
+import FlatButton from 'material-ui/FlatButton';
+import NavigationRefresh from 'material-ui/svg-icons/navigation/refresh';
+import translate from '../../i18n/translate';
+
+const RefreshButton = ({ label = 'aor.action.refresh', translate, refresh }) => <FlatButton
+    primary
+    label={label && translate(label)}
+    onClick={refresh}
+    icon={<NavigationRefresh />}
+/>;
+
+RefreshButton.propTypes = {
+    label: PropTypes.string,
+    refresh: PropTypes.func.isRequired,
+    translate: PropTypes.func.isRequired,
+};
+
+export default translate(RefreshButton);
Index: src/reducer/notification.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/reducer/notification.js	(revision )
+++ src/reducer/notification.js	(revision )
@@ -0,0 +1,17 @@
+import { SHOW_NOTIFICATION, HIDE_NOTIFICATION } from '../actions/notificationActions';
+
+const defaultState = {
+    text: '',
+    type: 'info', // one of 'info', 'confirm', 'warning'
+};
+
+export default (previousState = defaultState, { type, payload }) => {
+    switch (type) {
+    case SHOW_NOTIFICATION:
+        return { text: payload.text, type: payload.type };
+    case HIDE_NOTIFICATION:
+        return { ...previousState, text: '' };
+    default:
+        return previousState;
+    }
+};
Index: src/reducer/locale.spec.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/reducer/locale.spec.js	(revision )
+++ src/reducer/locale.spec.js	(revision )
@@ -0,0 +1,14 @@
+import assert from 'assert';
+
+import reducer from './locale';
+import { DEFAULT_LOCALE } from '../i18n/index';
+import { CHANGE_LOCALE } from '../actions/localeActions';
+
+describe('locale reducer', () => {
+    it('should return DEFAULT_LOCALE by default', () => {
+        assert.equal(DEFAULT_LOCALE, reducer()(undefined, {}));
+    });
+    it('should change with CHANGE_LOCALE actions', () => {
+        assert.equal('fr', reducer()('en', { type: CHANGE_LOCALE, payload: 'fr' }));
+    });
+});
Index: src/util/validate.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/util/validate.js	(revision )
+++ src/util/validate.js	(revision )
@@ -0,0 +1,103 @@
+import React from 'react';
+import get from 'lodash.get';
+import set from 'lodash.set';
+
+/* eslint-disable no-underscore-dangle */
+/* @link http://stackoverflow.com/questions/46155/validate-email-address-in-javascript */
+const EMAIL_REGEX = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
+
+const isEmpty = (value) => (typeof value === 'undefined' || value === null || value === '');
+
+/* eslint-disable no-confusing-arrow */
+export const coreConstraints = {
+    required: (value) => isEmpty(value) ? 'Required field' : null,
+    min: (value, _, min) => !isEmpty(value) && (isNaN(parseInt(value, 10)) || parseInt(value, 10) < min) ? `Minimum value: ${min}` : null,
+    max: (value, _, max) => !isEmpty(value) && (isNaN(parseInt(value, 10)) || parseInt(value, 10) > max) ? `Maximum value: ${max}` : null,
+    minLength: (value, _, min) => isEmpty(value) || `${value}`.length < min ? `Minimum length: ${min}` : null,
+    maxLength: (value, _, max) => !isEmpty(value) && `${value}`.length > max ? `Maximum length: ${max}` : null,
+    email: (value) => !isEmpty(value) && !EMAIL_REGEX.test(value) ? 'Must be a valid email' : null,
+    regex: (value, _, { pattern, message }) => !isEmpty(value) && !pattern.test(value) ? message : null,
+    choices: (value, _, { list, message }) => !isEmpty(value) && list.indexOf(value) === -1 ? message : null,
+    custom: (value, values, func) => func(value, values),
+};
+
+/**
+ * Combine multiple constraints into a single function
+ *
+ * @param {Object} constraints Constraints object; e.g. { required: true, min: 3 }
+ *
+ * @return {function} A function (value, values) => [errors]
+ */
+const getConstraintsFunction = constraints => (value, values) => Object.keys(constraints)
+    .filter(constraintName => coreConstraints[constraintName])
+    .map(constraintName => {
+        const constraint = coreConstraints[constraintName];
+        constraint._name = constraintName; // .name does not exist on IE
+        return constraint;
+    })
+    .reduce((errors, constraint) => [
+        ...errors,
+        constraint(value, values, constraints[constraint.name]),
+    ], [])
+    .filter(error => error !== null);
+
+export const getConstraintsFunctionFromFunctionOrObject = (constraints) => {
+    if (typeof constraints === 'function') return constraints;
+    if (!Array.isArray(constraints) && typeof constraints === 'object') return getConstraintsFunction(constraints);
+    throw new Error('Unsupported validation type');
+};
+
+/**
+ * @example
+ * from the following fields:
+ *     <TextField source="title" validation={{ minLength: 5 }} />
+ *     <TextField source="age" validation={{ required: true, min: 18 }} />
+ * produces the following output
+ * {
+ *    title: (value) => value.length < 5 ? ['title is too short'] : [],
+ *    age:   (value) => {
+ *       const errors = [];
+ *       if (value) errors.push('age is required');
+ *       if (value < 18) errors.push('age is under 18');
+ *       return errors;
+ *    }
+ * }
+ */
+export const getFieldConstraints = children => React.Children.toArray(children)
+    .map(({ props: { source: fieldName, validation } }) => ({ fieldName, validation }))
+    .filter(({ validation }) => !!validation)
+    .reduce((constraints, { fieldName, validation }) => {
+        constraints[fieldName] = getConstraintsFunctionFromFunctionOrObject(validation); // eslint-disable-line no-param-reassign
+        return constraints;
+    }, {});
+
+export const getErrorsForForm = (validation, values) => {
+    const errors = typeof validation === 'function' ? validation(values) : {};
+    // warn user we expect an object here, in case of validation just returned an error message
+    if (errors === null || typeof errors !== 'object') {
+        throw new Error('Validation function given to form components should return an object.');
+    }
+    return errors;
+};
+
+export const getErrorsForFieldConstraints = (fieldConstraints, values) => {
+    const errors = {};
+    Object.keys(fieldConstraints).forEach((fieldName) => {
+        const error = fieldConstraints[fieldName](get(values, fieldName), values);
+        if (error.length > 0) {
+            if (!get(errors, fieldName)) {
+                set(errors, fieldName, []);
+            }
+            set(errors, fieldName, [...get(errors, fieldName), ...error]);
+        }
+    });
+    return errors;
+};
+
+/**
+ * Validator function for redux-form
+ */
+export const validateForm = (values, { children, validation }) => ({
+    ...getErrorsForForm(validation, values),
+    ...getErrorsForFieldConstraints(getFieldConstraints(children), values),
+});
Index: src/sideEffect/saga/referenceFetch.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sideEffect/saga/referenceFetch.js	(revision )
+++ src/sideEffect/saga/referenceFetch.js	(revision )
@@ -0,0 +1,40 @@
+import { delay } from 'redux-saga';
+import { call, cancel, fork, put, takeEvery } from 'redux-saga/effects';
+import { CRUD_GET_ONE_REFERENCE } from '../../actions/referenceActions';
+import { crudGetMany } from '../../actions/dataActions';
+
+/**
+ * Example
+ *
+ * let id = {
+ *   posts: { 4: true, 7: true, 345: true },
+ *   authors: { 23: true, 47: true, 78: true },
+ * }
+ */
+const ids = {};
+const tasks = {};
+
+// see http://yelouafi.github.io/redux-saga/docs/recipes/index.html#debouncing
+function* fetchReference(resource) {
+    // combined with cancel(), this debounces the calls
+    yield call(delay, 50);
+    yield put(crudGetMany(resource, Object.keys(ids[resource])));
+    delete ids[resource];
+    delete tasks[resource];
+}
+
+function* accumulate({ payload }) {
+    const { id, resource } = payload;
+    if (!ids[resource]) {
+        ids[resource] = {};
+    }
+    ids[resource][id] = true; // fast UNIQUE
+    if (tasks[resource]) {
+        yield cancel(tasks[resource]);
+    }
+    tasks[resource] = yield fork(fetchReference, resource);
+}
+
+export default function* () {
+    yield takeEvery(CRUD_GET_ONE_REFERENCE, accumulate);
+}
Index: LICENSE.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- LICENSE.md	(revision )
+++ LICENSE.md	(revision )
@@ -0,0 +1,21 @@
+The MIT License (MIT)
+
+Copyright (c) 2016-present, Francois Zaninotto, Marmelab
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+SOFTWARE.
Index: src/mui/field/ImageField.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/field/ImageField.js	(revision )
+++ src/mui/field/ImageField.js	(revision )
@@ -0,0 +1,45 @@
+import React, { PropTypes } from 'react';
+import get from 'lodash.get';
+
+const styles = {
+    container: {
+        float: 'left',
+    },
+    image: {
+        maxHeight: '10rem',
+        margin: '0.5rem',
+    },
+};
+
+export const ImageField = ({ elStyle = {}, record, source, title }) => {
+    const style = {
+        ...styles.container,
+        ...elStyle,
+    };
+
+    const titleValue = get(record, title) || title;
+    const srcValue = get(record, source);
+    if (!srcValue) {
+        return <div />;
+    }
+
+    return (
+        <div style={style}>
+            <img
+                title={titleValue}
+                alt={titleValue}
+                src={srcValue}
+                style={styles.image}
+            />
+        </div>
+    );
+};
+
+ImageField.propTypes = {
+    elStyle: PropTypes.object,
+    record: PropTypes.object,
+    source: PropTypes.string.isRequired,
+    title: PropTypes.string,
+};
+
+export default ImageField;
Index: src/mui/field/RichTextField.spec.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/field/RichTextField.spec.js	(revision )
+++ src/mui/field/RichTextField.spec.js	(revision )
@@ -0,0 +1,64 @@
+import React from 'react';
+import assert from 'assert';
+import { render } from 'enzyme';
+import RichTextField, { removeTags } from './RichTextField';
+
+describe('stripTags', () => {
+    it('should strip HTML tags from input', () => {
+        assert.equal(removeTags('<h1>Hello world!</h1>'), 'Hello world!');
+        assert.equal(removeTags('<p>Cake is a lie</p>'), 'Cake is a lie');
+    });
+
+    it('should strip HTML tags even with attributes', () => {
+        assert.equal(removeTags('<a href="http://www.zombo.com">Zombo</a>'), 'Zombo');
+        assert.equal(removeTags('<a target="_blank" href="http://www.zombo.com">Zombo</a>'), 'Zombo');
+    });
+
+    it('should strip HTML tags splitted on several lines', () => {
+        assert.equal(removeTags(`<a
+            href="http://www.zombo.com"
+        >Zombo</a>`), 'Zombo');
+    });
+
+    it('should strip HTML embedded tags', () => {
+        assert.equal(
+            removeTags('<marquee><a href="http://www.zombo.com">Zombo</a></marquee>'),
+            'Zombo'
+        );
+    });
+
+    it('should strip HTML tags even if they are malformed', () => {
+        assert.equal(
+            removeTags('<p>All our base is belong to us.<p>'),
+            'All our base is belong to us.'
+        );
+    });
+});
+
+describe('<RichTextField />', () => {
+    it('should render as HTML', () => {
+        const record = { body: '<h1>Hello world!</h1>' };
+        const wrapper = render(<RichTextField record={record} source="body" />);
+        assert.equal(wrapper.html(), '<div><h1>Hello world!</h1></div>');
+    });
+
+    it('should handle deep fields', () => {
+        const record = { foo: { body: '<h1>Hello world!</h1>' } };
+        const wrapper = render(<RichTextField record={record} source="foo.body" />);
+        assert.equal(wrapper.html(), '<div><h1>Hello world!</h1></div>');
+    });
+
+    it('should strip HTML tags if stripTags is set to true', () => {
+        const record = { body: '<h1>Hello world!</h1>' };
+        const wrapper = render(<RichTextField stripTags={true} record={record} source="body" />);
+
+        assert.equal(wrapper.html(), '<div>Hello world!</div>');
+    });
+
+    it('should not strip HTML tags if stripTags is set to false', () => {
+        const record = { body: '<h1>Hello world!</h1>' };
+        const wrapper = render(<RichTextField stripTags={false} record={record} source="body" />);
+
+        assert.equal(wrapper.html(), '<div><h1>Hello world!</h1></div>');
+    });
+});
Index: src/mui/form/FormTab.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/form/FormTab.js	(revision )
+++ src/mui/form/FormTab.js	(revision )
@@ -0,0 +1,12 @@
+import React from 'react';
+import FormField from './FormField';
+
+const FormTab = ({ label, icon, children, ...rest }) => <span>
+    {React.Children.map(children, input => input && (
+        <div key={input.props.source} style={input.props.style}>
+            <FormField input={input} {...rest} />
+        </div>
+    ))}
+</span>;
+
+export default FormTab;
Index: src/reducer/notification.spec.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/reducer/notification.spec.js	(revision )
+++ src/reducer/notification.spec.js	(revision )
@@ -0,0 +1,21 @@
+import assert from 'assert';
+import { SHOW_NOTIFICATION, HIDE_NOTIFICATION } from '../actions/notificationActions';
+import reducer from './notification';
+
+describe('notification reducer', () => {
+    it('should return empty notification by default', () => {
+        assert.deepEqual({ text: '', type: 'info' }, reducer(undefined, {}));
+    });
+    it('should set text and type upon SHOW_NOTIFICATION', () => {
+        assert.deepEqual({ text: 'foo', type: 'warning' }, reducer(undefined, {
+            type: SHOW_NOTIFICATION,
+            payload: { text: 'foo', type: 'warning' },
+        }));
+    });
+    it('should set text to empty string upon HIDE_NOTIFICATION', () => {
+        assert.deepEqual({ text: '', type: 'warning' }, reducer(
+            { text: 'foo', type: 'warning' },
+            { type: HIDE_NOTIFICATION }
+        ));
+    });
+});
Index: src/mui/detail/SimpleShowLayout.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/detail/SimpleShowLayout.js	(revision )
+++ src/mui/detail/SimpleShowLayout.js	(revision )
@@ -0,0 +1,27 @@
+import React, { Children, PropTypes } from 'react';
+import Labeled from '../input/Labeled';
+
+export const SimpleShowLayout = ({ basePath, children, record, resource }) => (
+    <div style={{ padding: '0 1em 1em 1em' }}>
+        {Children.map(children, field => (
+            <div key={field.props.source} style={field.props.style}>
+                {field.props.addLabel ?
+                    <Labeled record={record} resource={resource} basePath={basePath} label={field.props.label} source={field.props.source} disabled={false}>{field}</Labeled> :
+                    (typeof field.type === 'string' ?
+                        field :
+                        React.cloneElement(field, { record, resource, basePath })
+                    )
+                }
+            </div>
+        ))}
+    </div>
+);
+
+SimpleShowLayout.propTypes = {
+    basePath: PropTypes.string,
+    children: PropTypes.node,
+    record: PropTypes.object,
+    resource: PropTypes.string,
+};
+
+export default SimpleShowLayout;
Index: src/mui/list/Actions.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/list/Actions.js	(revision )
+++ src/mui/list/Actions.js	(revision )
@@ -0,0 +1,20 @@
+import React, { PropTypes } from 'react';
+import { CardActions } from 'material-ui/Card';
+import { CreateButton, RefreshButton } from '../button';
+import onlyUpdateForKeys from 'recompose/onlyUpdateForKeys';
+
+const cardActionStyle = {
+    zIndex: 2,
+    display: 'inline-block',
+    float: 'right',
+};
+
+const Actions = ({ resource, filters, displayedFilters, filterValues, hasCreate, basePath, showFilter, refresh }) => (
+    <CardActions style={cardActionStyle}>
+        {filters && React.cloneElement(filters, { resource, showFilter, displayedFilters, filterValues, context: 'button' }) }
+        {hasCreate && <CreateButton basePath={basePath} />}
+        <RefreshButton refresh={refresh} />
+    </CardActions>
+);
+
+export default onlyUpdateForKeys(['resource', 'filters', 'displayedFilters', 'filterValues'])(Actions);
Index: src/mui/list/FilterForm.spec.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/list/FilterForm.spec.js	(revision )
+++ src/mui/list/FilterForm.spec.js	(revision )
@@ -0,0 +1,57 @@
+import assert from 'assert';
+import { render } from 'enzyme';
+import React from 'react';
+import { createStore } from 'redux';
+import { Provider } from 'react-redux';
+import getMuiTheme from 'material-ui/styles/getMuiTheme';
+import MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';
+import TranslationProvider from '../../i18n/TranslationProvider';
+import FilterForm from './FilterForm';
+import TextInput from '../input/TextInput';
+
+try {
+    require('react-tap-event-plugin')();
+} catch(e) {
+    // already loaded, probably in watch mode
+    // do nothing
+}
+
+describe('<FilterForm />', () => {
+    const defaultProps = {
+        resource: 'post',
+        filters: [],
+        setFilter: () => {},
+        hideFilter: () => {},
+        displayedFilters: {},
+        filterValues: {},
+        translate: x => x,
+    };
+
+    let store;
+    beforeEach(() => {
+        store = createStore(() => ({ locale: 'en' }));
+    });
+
+    it('should display correctly passed filters', () => {
+        const filters = [<TextInput source="title" label="Title" />];
+        const displayedFilters = { title: true };
+
+        const muiTheme = getMuiTheme({ userAgent: false });
+        const wrapper = render(
+            <Provider store={store}>
+                <TranslationProvider>
+                    <MuiThemeProvider muiTheme={muiTheme}>
+                        <FilterForm
+                            {...defaultProps}
+                            filters={filters}
+                            displayedFilters={displayedFilters}
+                        />
+                    </MuiThemeProvider>
+                </TranslationProvider>
+            </Provider>
+        );
+
+        const titleFilter = wrapper.find('input[type="text"]');
+        assert.equal(titleFilter.length, 1);
+    });
+});
Index: src/util/FieldTitle.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/util/FieldTitle.js	(revision )
+++ src/util/FieldTitle.js	(revision )
@@ -0,0 +1,35 @@
+import React, { PropTypes } from 'react';
+import inflection from 'inflection';
+import pure from 'recompose/pure';
+import compose from 'recompose/compose';
+
+import translate from '../i18n/translate';
+
+const FieldTitle = ({ resource, source, label, translate }) => (
+    <span>
+        {typeof label !== 'undefined' ?
+            translate(label, { _: label })
+            :
+            (typeof source !== 'undefined' ?
+                translate(`resources.${resource}.fields.${source}`, { _: inflection.humanize(source) })
+                :
+                ''
+            )
+        }
+    </span>
+);
+
+FieldTitle.propTypes = {
+    resource: PropTypes.string,
+    source: PropTypes.string,
+    label: PropTypes.string,
+    translate: PropTypes.func.isRequired,
+};
+
+FieldTitle.defaultProps = {
+    translate: x => x,
+};
+
+const enhance = compose(pure, translate);
+
+export default enhance(FieldTitle);
Index: src/mui/layout/AppBarMobile.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/layout/AppBarMobile.js	(revision )
+++ src/mui/layout/AppBarMobile.js	(revision )
@@ -0,0 +1,54 @@
+import React, { PropTypes } from 'react';
+import { connect } from 'react-redux';
+import MuiAppBar from 'material-ui/AppBar';
+import muiThemeable from 'material-ui/styles/muiThemeable';
+import compose from 'recompose/compose';
+import { toggleSidebar as toggleSidebarAction } from '../../actions';
+
+const style = {
+    bar: {
+        height: '3em',
+        position: 'absolute',
+        top: 0,
+    },
+    title: {
+        fontSize: '1.25em',
+        lineHeight: '2.5em',
+    },
+    icon: {
+        marginTop: 0,
+        marginRight: 0,
+        marginLeft: '-24px',
+    },
+    link: {
+        color: '#fff',
+        textDecoration: 'none',
+    },
+};
+
+const AppBarMobile = ({ title, toggleSidebar }) => (
+    <MuiAppBar
+        style={style.bar}
+        titleStyle={style.title}
+        iconStyleLeft={style.icon}
+        title={title}
+        onLeftIconButtonTouchTap={toggleSidebar}
+    />
+);
+
+AppBarMobile.propTypes = {
+    title: PropTypes.oneOfType([
+        PropTypes.string,
+        PropTypes.element
+    ]).isRequired,
+    toggleSidebar: PropTypes.func.isRequired,
+};
+
+const enhance = compose(
+    muiThemeable(), // force redraw on theme change
+    connect(null, {
+        toggleSidebar: toggleSidebarAction,
+    }),
+);
+
+export default enhance(AppBarMobile);
Index: src/mui/list/List.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/list/List.js	(revision )
+++ src/mui/list/List.js	(revision )
@@ -0,0 +1,309 @@
+import React, { Component, PropTypes } from 'react';
+import { connect } from 'react-redux';
+import { push as pushAction } from 'react-router-redux';
+import { Card } from 'material-ui/Card';
+import compose from 'recompose/compose';
+import inflection from 'inflection';
+import { change as changeFormValueAction, getFormValues } from 'redux-form';
+import debounce from 'lodash.debounce';
+import queryReducer, { SET_SORT, SET_PAGE, SET_FILTER, SORT_DESC } from '../../reducer/resource/list/queryReducer';
+import ViewTitle from '../layout/ViewTitle';
+import Title from '../layout/Title';
+import DefaultPagination from './Pagination';
+import DefaultActions from './Actions';
+import { crudGetList as crudGetListAction } from '../../actions/dataActions';
+import { changeListParams as changeListParamsAction } from '../../actions/listActions';
+import translate from '../../i18n/translate';
+
+const filterFormName = 'filterForm';
+
+/**
+ * List page component
+ *
+ * The <List> component renders the list layout (title, buttons, filters, pagination),
+ * and fetches the list of records from the REST API.
+ * It then delegates the rendering of the list of records to its child component.
+ * Usually, it's a <Datagrid>, responsible for displaying a table with one row for each post.
+ *
+ * In Redux terms, <List> is a connected component, and <Datagrid> is a dumb component.
+ *
+ * Props:
+ *   - title
+ *   - perPage
+ *   - sort
+ *   - filter (the permanent filter to apply to the query)
+ *   - actions
+ *   - filters (a React Element used to display the filter form)
+ *   - pagination
+ *
+ * @example
+ *     const PostFilter = (props) => (
+ *         <Filter {...props}>
+ *             <TextInput label="Search" source="q" alwaysOn />
+ *             <TextInput label="Title" source="title" />
+ *         </Filter>
+ *     );
+ *     export const PostList = (props) => (
+ *         <List {...props}
+ *             title="List of posts"
+ *             sort={{ field: 'published_at' }}
+ *             filter={{ is_published: true }}
+ *             filters={<PostFilter />}
+ *         >
+ *             <Datagrid>
+ *                 <TextField source="id" />
+ *                 <TextField source="title" />
+ *                 <EditButton />
+ *             </Datagrid>
+ *         </List>
+ *     );
+ */
+export class List extends Component {
+    constructor(props) {
+        super(props);
+        this.debouncedSetFilters = debounce(this.setFilters.bind(this), 500);
+        this.state = { key: 0 };
+    }
+
+    componentDidMount() {
+        this.updateData();
+        if (Object.keys(this.props.query).length > 0) {
+             this.props.changeListParams(this.props.resource, this.props.query);
+        }
+    }
+
+    componentWillReceiveProps(nextProps) {
+        if (nextProps.resource !== this.props.resource
+         || nextProps.query.sort !== this.props.query.sort
+         || nextProps.query.order !== this.props.query.order
+         || nextProps.query.page !== this.props.query.page
+         || nextProps.query.filter !== this.props.query.filter) {
+            this.updateData(Object.keys(nextProps.query).length > 0 ? nextProps.query : nextProps.params);
+        }
+        if (nextProps.data !== this.props.data && this.fullRefresh) {
+            this.fullRefresh = false;
+            this.setState({ key: this.state.key + 1 });
+        }
+        if (Object.keys(nextProps.filterValues).length === 0 && Object.keys(this.props.filterValues).length === 0) {
+            return;
+        }
+        if (nextProps.filterValues !== this.props.filterValues) {
+            const nextFilters = nextProps.filterValues;
+            Object.keys(nextFilters).forEach(filterName => {
+                if (nextFilters[filterName] === '') {
+                    // remove empty filter from query
+                    delete nextFilters[filterName];
+                }
+            });
+            this.debouncedSetFilters(nextFilters);
+        }
+    }
+
+    shouldComponentUpdate(nextProps, nextState) {
+        if (
+            nextProps.isLoading === this.props.isLoading
+         && nextProps.width === this.props.width
+         && nextState === this.state) {
+            return false;
+        }
+        return true;
+    }
+
+    componentWillUnmount() {
+        this.debouncedSetFilters.cancel();
+    }
+
+    getBasePath() {
+        return this.props.location.pathname;
+    }
+
+    refresh = (event) => {
+        event.stopPropagation();
+        this.fullRefresh = true;
+        this.updateData();
+    }
+
+    /**
+     * Merge list params from 3 different sources:
+     *   - the query string
+     *   - the params stored in the state (from previous navigation)
+     *   - the props passed to the List component
+     */
+    getQuery() {
+        const query = Object.keys(this.props.query).length > 0 ? this.props.query : { ...this.props.params };
+        if (!query.sort) {
+            query.sort = this.props.sort.field;
+            query.order = this.props.sort.order;
+        }
+        if (!query.perPage) {
+            query.perPage = this.props.perPage;
+        }
+        return query;
+    }
+
+    updateData(query) {
+        const params = query || this.getQuery();
+        const { sort, order, page, perPage, filter } = params;
+        const permanentFilter = this.props.filter;
+        this.props.crudGetList(this.props.resource, { page, perPage }, { field: sort, order }, { ...filter, ...permanentFilter });
+    }
+
+    setSort = sort => this.changeParams({ type: SET_SORT, payload: sort });
+
+    setPage = page => this.changeParams({ type: SET_PAGE, payload: page });
+
+    setFilters = filters => this.changeParams({ type: SET_FILTER, payload: filters });
+
+    showFilter = (filterName, defaultValue) => {
+        this.setState({ [filterName]: true });
+        if (typeof defaultValue !== 'undefined') {
+            this.props.changeFormValue(filterFormName, filterName, defaultValue);
+            this.setFilters({ ...this.props.filterValues, [filterName]: defaultValue });
+        }
+    }
+
+    hideFilter = (filterName) => {
+        this.setState({ [filterName]: false });
+        this.props.changeFormValue(filterFormName, filterName, '');
+        this.setFilters({ ...this.props.filterValues, [filterName]: undefined });
+    }
+
+    changeParams(action) {
+        const newParams = queryReducer(this.getQuery(), action);
+        this.props.push({ ...this.props.location, query: { ...newParams, filter: JSON.stringify(newParams.filter) } });
+        this.props.changeListParams(this.props.resource, newParams);
+    }
+
+    render() {
+        const { filters, pagination = <DefaultPagination />, actions = <DefaultActions />, resource, hasCreate, title, data, ids, total, children, isLoading, translate } = this.props;
+        const { key } = this.state;
+        const query = this.getQuery();
+        const filterValues = query.filter;
+        const basePath = this.getBasePath();
+
+        const resourceName = translate(`resources.${resource}.name`, {
+            smart_count: 2,
+            _: inflection.humanize(inflection.pluralize(resource)),
+        });
+        const defaultTitle = translate('aor.page.list', { name: `${resourceName}` });
+        const titleElement = <Title title={title} defaultTitle={defaultTitle} />;
+
+        return (
+            <div>
+                <Card style={{ opacity: isLoading ? 0.8 : 1 }} key={key}>
+                    {actions && React.cloneElement(actions, {
+                        resource,
+                        filters,
+                        filterValues,
+                        basePath,
+                        hasCreate,
+                        displayedFilters: this.state,
+                        showFilter: this.showFilter,
+                        refresh: this.refresh,
+                    })}
+                    <ViewTitle title={titleElement} />
+                    {filters && React.cloneElement(filters, {
+                        resource,
+                        hideFilter: this.hideFilter,
+                        filterValues,
+                        displayedFilters: this.state,
+                        context: 'form',
+                    })}
+                    {React.cloneElement(children, {
+                        resource,
+                        ids,
+                        data,
+                        currentSort: { field: query.sort, order: query.order },
+                        basePath,
+                        isLoading,
+                        setSort: this.setSort,
+                    })}
+                    {pagination && React.cloneElement(pagination, {
+                        total,
+                        page: parseInt(query.page, 10),
+                        perPage: parseInt(query.perPage, 10),
+                        setPage: this.setPage,
+                    })}
+                </Card>
+            </div>
+        );
+    }
+}
+
+List.propTypes = {
+    // the props you can change
+    title: PropTypes.any,
+    filter: PropTypes.object,
+    filters: PropTypes.element,
+    pagination: PropTypes.element,
+    actions: PropTypes.element,
+    perPage: PropTypes.number.isRequired,
+    sort: PropTypes.shape({
+        field: PropTypes.string,
+        order: PropTypes.string,
+    }),
+    children: PropTypes.element.isRequired,
+    // the props managed by admin-on-rest
+    changeFormValue: PropTypes.func.isRequired,
+    changeListParams: PropTypes.func.isRequired,
+    crudGetList: PropTypes.func.isRequired,
+    data: PropTypes.object, // eslint-disable-line react/forbid-prop-types
+    filterValues: PropTypes.object, // eslint-disable-line react/forbid-prop-types
+    hasCreate: PropTypes.bool.isRequired,
+    hasEdit: PropTypes.bool.isRequired,
+    ids: PropTypes.array,
+    isLoading: PropTypes.bool.isRequired,
+    location: PropTypes.object.isRequired,
+    path: PropTypes.string,
+    params: PropTypes.object.isRequired,
+    push: PropTypes.func.isRequired,
+    query: PropTypes.object.isRequired,
+    resource: PropTypes.string.isRequired,
+    total: PropTypes.number.isRequired,
+    translate: PropTypes.func.isRequired,
+};
+
+List.defaultProps = {
+    filter: {},
+    filterValues: {},
+    perPage: 10,
+    sort: {
+        field: 'id',
+        order: SORT_DESC,
+    },
+};
+
+function mapStateToProps(state, props) {
+    const resourceState = state.admin[props.resource];
+    const query = props.location.query;
+    if (query.filter && typeof query.filter === 'string') {
+        // if the List has no filter component, the filter is always "{}"
+        // avoid deserialization and keep identity by using a constant
+        query.filter = props.filters ? JSON.parse(query.filter) : resourceState.list.params.filter;
+    }
+
+    return {
+        query,
+        params: resourceState.list.params,
+        ids: resourceState.list.ids,
+        total: resourceState.list.total,
+        data: resourceState.data,
+        isLoading: state.admin.loading > 0,
+        filterValues: props.filters ? getFormValues(filterFormName)(state) : resourceState.list.params.filter,
+    };
+}
+
+const enhance = compose(
+    connect(
+        mapStateToProps,
+        {
+            crudGetList: crudGetListAction,
+            changeFormValue: changeFormValueAction,
+            changeListParams: changeListParamsAction,
+            push: pushAction,
+        },
+    ),
+    translate,
+);
+
+export default enhance(List);
Index: src/sideEffect/saga/auth.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sideEffect/saga/auth.js	(revision )
+++ src/sideEffect/saga/auth.js	(revision )
@@ -0,0 +1,13 @@
+import { put, takeEvery } from 'redux-saga/effects';
+import { push } from 'react-router-redux';
+import { FETCH_ERROR } from '../../actions/fetchActions';
+import { hideNotification } from '../../actions/notificationActions';
+
+export default function* () {
+    yield takeEvery(FETCH_ERROR, function* redirectIfNotauthenticated({ error }) {
+        if (error.status === 401 || error.status === 403) {
+            yield put(hideNotification());
+            yield put(push('/login'));
+        }
+    });
+}
Index: src/util/validate.spec.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/util/validate.spec.js	(revision )
+++ src/util/validate.spec.js	(revision )
@@ -0,0 +1,263 @@
+import React from 'react';
+import assert from 'assert';
+import { coreConstraints, getErrorsForForm, getErrorsForFieldConstraints, getConstraintsFunctionFromFunctionOrObject, validateForm } from './validate';
+import TextInput from '../mui/input/TextInput';
+
+describe('Validator', () => {
+    describe('Core Constraints', () => {
+        it('.required should return error message if field is empty', () => {
+            assert.equal(coreConstraints.required(), 'Required field');
+            assert.equal(coreConstraints.required(''), 'Required field');
+            assert.equal(coreConstraints.required(null), 'Required field');
+
+            assert.equal(coreConstraints.required('foo'), null);
+            assert.equal(coreConstraints.required(12), null);
+        });
+
+        // coreConstraints.min(value, _, minimumValue)
+        it('.min should return an error message including min value if value is lower than given minimum', () => {
+            assert.equal(coreConstraints.min(undefined, {}, 1), null);
+            assert.equal(coreConstraints.min(null, {}, 1), null);
+            assert.equal(coreConstraints.min('', {}, 1), null);
+            assert.equal(coreConstraints.min(1, {}, 1), null);
+            assert.equal(coreConstraints.min(2, {}, 1), null);
+            assert.equal(coreConstraints.min(1.2, {}, 1), null);
+            assert.equal(coreConstraints.min('12', {}, 1), null);
+            assert.equal(coreConstraints.min('12aqd', {}, 1), null);
+
+            assert.equal(coreConstraints.min('foobar', {}, 1), 'Minimum value: 1');
+            assert.equal(coreConstraints.min(0, {}, 1), 'Minimum value: 1');
+        });
+
+        // coreConstraints.max(value, _, minimumValue)
+        it('.min should return an error message including max value if value is greater than given maximum', () => {
+            assert.equal(coreConstraints.max(undefined, {}, 10), null);
+            assert.equal(coreConstraints.max(null, {}, 10), null);
+            assert.equal(coreConstraints.max('', {}, 10), null);
+            assert.equal(coreConstraints.max(0, {}, 10), null);
+            assert.equal(coreConstraints.max(1, {}, 10), null);
+            assert.equal(coreConstraints.max(1.2, {}, 10), null);
+            assert.equal(coreConstraints.max('2', {}, 10), null);
+            assert.equal(coreConstraints.max('2aqd', {}, 10), null);
+
+            assert.equal(coreConstraints.max('foobar', {}, 10), 'Maximum value: 10');
+            assert.equal(coreConstraints.max(12, {}, 10), 'Maximum value: 10');
+        });
+
+        it('.minLength should return an error message including length if string is too short', () => {
+            assert.equal(coreConstraints.minLength(undefined, {}, 5), 'Minimum length: 5');
+            assert.equal(coreConstraints.minLength(null, {}, 5), 'Minimum length: 5');
+            assert.equal(coreConstraints.minLength(10, {}, 5), 'Minimum length: 5');
+            assert.equal(coreConstraints.minLength('', {}, 5), 'Minimum length: 5');
+            assert.equal(coreConstraints.minLength('tiny', {}, 5), 'Minimum length: 5');
+            assert.equal(coreConstraints.minLength('small', {}, 5), null);
+            assert.equal(coreConstraints.minLength('quite long', {}, 5), null);
+        });
+
+        it('.maxLength should return an error message including length if string is too long', () => {
+            assert.equal(coreConstraints.maxLength(undefined, {}, 5), null);
+            assert.equal(coreConstraints.maxLength(null, {}, 5), null);
+            assert.equal(coreConstraints.maxLength(10, {}, 5), null);
+            assert.equal(coreConstraints.maxLength('', {}, 5), null);
+            assert.equal(coreConstraints.maxLength('tiny', {}, 5), null);
+            assert.equal(coreConstraints.maxLength('small', {}, 5), null);
+            assert.equal(coreConstraints.maxLength('quite long', {}, 5), 'Maximum length: 5');
+        });
+
+        it('.email should test entered email address is a valid one', () => {
+            assert.equal(coreConstraints.email(undefined), null);
+            assert.equal(coreConstraints.email(null), null);
+            assert.equal(coreConstraints.email(10), 'Must be a valid email');
+            assert.equal(coreConstraints.email(''), null);
+            assert.equal(coreConstraints.email('foobar'), 'Must be a valid email');
+            assert.equal(coreConstraints.email('john.doe@mycompany.com'), null);
+        });
+
+        it('.regex should return given error message if given value does not match the passed regex', () => {
+            const regex = { pattern: /a{2,}$/, message: 'Must finish by (at least) two a' };
+
+            assert.equal(coreConstraints.regex(undefined, {}, regex), null);
+            assert.equal(coreConstraints.regex(null, {}, regex), null);
+            assert.equal(coreConstraints.regex(10, {}, regex), 'Must finish by (at least) two a');
+            assert.equal(coreConstraints.regex('hello', {}, regex), 'Must finish by (at least) two a');
+            assert.equal(coreConstraints.regex('Time for teaaa', {}, regex), null);
+            assert.equal(coreConstraints.regex('Time for tea!', {}, {
+                ...regex,
+                message: 'Another error message',
+            }), 'Another error message');
+        });
+
+        it('.choices should return given error message if given value is not in given list', () => {
+            const params = {
+                list: ['Koa', 'Express'],
+                message: 'Should be a Node.js framework',
+            };
+
+            assert.equal(coreConstraints.choices(undefined, {}, params), null);
+            assert.equal(coreConstraints.choices(null, {}, params), null);
+            assert.equal(coreConstraints.choices(10, {}, params), 'Should be a Node.js framework');
+            assert.equal(coreConstraints.choices('Symfony', {}, params), 'Should be a Node.js framework');
+            assert.equal(coreConstraints.choices('Express', {}, params), null);
+            assert.equal(coreConstraints.choices('Spip', {}, {
+                ...params,
+                message: 'Should be either Koa or Express',
+            }), 'Should be either Koa or Express');
+        });
+
+        describe('.custom', () => {
+            it('should return result of given function', () => {
+                assert.equal(coreConstraints.custom(1, {}, () => 'Error'), 'Error');
+                assert.equal(coreConstraints.custom(1, {}, () => ''), '');
+            });
+
+            it('should pass edited value and whole record values as arguments', () => {
+                let passedArguments;
+                const record = { react: 15, angular: 2 };
+
+                coreConstraints.custom('foo', record, (...args) => { passedArguments = args; });
+                assert.deepEqual(passedArguments, ['foo', record]);
+            });
+        });
+    });
+
+    describe('getConstraintsFunctionFromFunctionOrObject', () => {
+        it('should return passed function if given constraint is already a function', () => {
+            const barFactory = () => 'bar';
+            const constraintsFunction = getConstraintsFunctionFromFunctionOrObject(barFactory);
+            assert.equal(constraintsFunction, barFactory);
+        });
+
+        it('should return a function checking all given constraints as single function', () => {
+            const constraints = {
+                required: true,
+                min: 100,
+            };
+
+            const constraintsFunction = getConstraintsFunctionFromFunctionOrObject(constraints);
+            assert.equal(constraintsFunction(''), 'Required field');
+            assert.equal(constraintsFunction(10), 'Minimum value: 100');
+        });
+
+        it('should throw an error if validation is neither a function nor an object', () => {
+            [false, true, '', 'foobar', 12, [1, 2]].forEach(constraints => {
+                try {
+                    getConstraintsFunctionFromFunctionOrObject(constraints);
+                } catch (e) {
+                    assert.equal(e.message, 'Unsupported validation type');
+                    return;
+                }
+
+                throw new Error(`Passing ${constraints} to getConstraintsFunction should throw an error`);
+            });
+        });
+    });
+
+    describe('validateForm', () => {
+        it('should return empty object if no validator return error message', () => {
+            const props = {
+                validation: {
+                    title: {
+                        custom: () => '',
+                    },
+                },
+            };
+
+            const errors = validateForm({ title: 'We <3 React!' }, props);
+            assert.deepEqual(errors, []);
+        });
+
+        it('should return validation function result if validation function is passed to the form', () => {
+            const props = {
+                validation: (values) => {
+                    const errors = {};
+                    if (!values.title) {
+                        errors.title = 'Required field';
+                    }
+
+                    if (values.rate < 0 || values.rate > 5) {
+                        errors.rate = 'Rate should be between 0 and 5.';
+                    }
+
+                    return errors;
+                },
+            };
+
+            const errors = validateForm({ title: '', rate: 12 }, props);
+            assert.deepEqual(errors, {
+                title: 'Required field',
+                rate: 'Rate should be between 0 and 5.',
+            });
+        });
+
+        it('should allow to specify validators on inputs directly', () => {
+            const props = {
+                children: <TextInput source="title" validation={{ required: true }} />,
+            };
+
+            const errors = validateForm({ title: '' }, props);
+            assert.deepEqual(errors, {
+                title: ['Required field'],
+            });
+        });
+
+        it('should apply both input and form validators', () => {
+            const props = {
+                children: <TextInput source="rate" validation={{ required: true }} />,
+                validation: (values) => (values.rate > 5 ? { rate: 'Maximum value: 5' } : {}),
+            };
+
+            const nullError = validateForm({ rate: '' }, props);
+            assert.deepEqual(nullError, { rate: ['Required field'] });
+
+            const valueError = validateForm({ rate: 6 }, props);
+            assert.deepEqual(valueError, { rate: 'Maximum value: 5' });
+        });
+    });
+
+    describe('getErrorsForForm', () => {
+        const values = { foo: 1, bar: 2, hello: 'world' };
+
+        it('should return an empty object when no validation function is passed', () => {
+            assert.deepEqual({}, getErrorsForForm(null, values));
+        });
+
+        it('should return an empty object when all values are correct', () => {
+            const validate = v => v.foo !== 1 ? { foo: ['error'] } : {}; // eslint-disable-line no-confusing-arrow
+            assert.deepEqual({}, getErrorsForForm(validate, values));
+        });
+
+        it('should return an error object for incorrect values', () => {
+            const validate = v => v.foo !== 2 ? { foo: ['error'] } : {}; // eslint-disable-line no-confusing-arrow
+            assert.deepEqual({ foo: ['error'] }, getErrorsForForm(validate, values));
+        });
+
+    });
+
+    describe('getErrorsForFieldConstraints', () => {
+        const values = { foo: 1, bar: 2, hello: 'world' };
+
+        it('should return an empty object when all values are correct', () => {
+            const constraints = {
+                foo: _ => [],
+            };
+            assert.deepEqual({}, getErrorsForFieldConstraints(constraints, values));
+        });
+
+        it('should return an error object for incorrect values', () => {
+            const constraints = {
+                foo: _ => [],
+                bar: _ => ['error'],
+            };
+            assert.deepEqual({ bar: ['error'] }, getErrorsForFieldConstraints(constraints, values));
+        });
+
+        it('should work for nested fields', () => {
+            const values = { foo: { bar: 1 } };
+            const constraints = {
+                'foo.bar': v => v ===1 ? ['error'] : [],
+            };
+            assert.deepEqual({ foo: { bar: ['error'] } }, getErrorsForFieldConstraints(constraints, values));
+        })
+    });
+
+});
Index: src/mui/button/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/button/index.js	(revision )
+++ src/mui/button/index.js	(revision )
@@ -0,0 +1,7 @@
+export CreateButton from './CreateButton';
+export DeleteButton from './DeleteButton';
+export EditButton from './EditButton';
+export ListButton from './ListButton';
+export SaveButton from './SaveButton';
+export ShowButton from './ShowButton';
+export RefreshButton from './RefreshButton';
Index: src/mui/layout/Layout.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/layout/Layout.js	(revision )
+++ src/mui/layout/Layout.js	(revision )
@@ -0,0 +1,139 @@
+import React, { Component, PropTypes } from 'react';
+import { connect } from 'react-redux';
+import MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';
+import getMuiTheme from 'material-ui/styles/getMuiTheme';
+import autoprefixer from 'material-ui/utils/autoprefixer';
+import CircularProgress from 'material-ui/CircularProgress';
+import withWidth from 'material-ui/utils/withWidth';
+import compose from 'recompose/compose';
+import injectTapEventPlugin from 'react-tap-event-plugin';
+import AppBar from './AppBar';
+import Sidebar from './Sidebar';
+import Notification from './Notification';
+import defaultTheme from '../defaultTheme';
+import { setSidebarVisibility as setSidebarVisibilityAction } from '../../actions';
+
+injectTapEventPlugin();
+
+const styles = {
+    wrapper: {
+        // Avoid IE bug with Flexbox, see #467
+        display: 'flex',
+        flexDirection: 'column',
+    },
+    main: {
+        display: 'flex',
+        flexDirection: 'column',
+        minHeight: '100vh',
+    },
+    body: {
+        backgroundColor: '#edecec',
+        display: 'flex',
+        flex: 1,
+        overflow: 'hidden',
+    },
+    bodySmall: {
+        backgroundColor: '#fff',
+    },
+    content: {
+        flex: 1,
+        padding: '2em',
+    },
+    contentSmall: {
+        flex: 1,
+        paddingTop: '3em',
+    },
+    loader: {
+        position: 'absolute',
+        top: 0,
+        right: 0,
+        margin: 16,
+        zIndex: 1200,
+    },
+};
+
+const prefixedStyles = {};
+
+class Layout extends Component {
+    componentWillMount() {
+        if (this.props.width !== 1) {
+            this.props.setSidebarVisibility(true);
+        }
+    }
+
+    render() {
+        const {
+            children,
+            isLoading,
+            menu,
+            route,
+            theme,
+            title,
+            width,
+        } = this.props;
+        const muiTheme = getMuiTheme(theme);
+        if (!prefixedStyles.main) {
+            // do this once because user agent never changes
+            const prefix = autoprefixer(muiTheme);
+            prefixedStyles.wrapper = prefix(styles.wrapper);
+            prefixedStyles.main = prefix(styles.main);
+            prefixedStyles.body = prefix(styles.body);
+            prefixedStyles.bodySmall = prefix(styles.bodySmall);
+            prefixedStyles.content = prefix(styles.content);
+            prefixedStyles.contentSmall = prefix(styles.contentSmall);
+        }
+        return (
+            <MuiThemeProvider muiTheme={muiTheme}>
+                <div style={prefixedStyles.wrapper}>
+                    <div style={prefixedStyles.main}>
+                        { width !== 1 && <AppBar title={title} />}
+                        <div className="body" style={width === 1 ? prefixedStyles.bodySmall : prefixedStyles.body}>
+                            <div style={width === 1 ? prefixedStyles.contentSmall : prefixedStyles.content}>{children}</div>
+                            <Sidebar theme={theme}>
+                                {menu}
+                            </Sidebar>
+                        </div>
+                        <Notification />
+                        {isLoading && <CircularProgress
+                            color="#fff"
+                            size={width === 1 ? 20 : 30}
+                            thickness={2}
+                            style={styles.loader}
+                        />}
+                    </div>
+                </div>
+            </MuiThemeProvider>
+        );
+    }
+}
+
+Layout.propTypes = {
+    authClient: PropTypes.func, // eslint-disable-line react/no-unused-prop-types
+    isLoading: PropTypes.bool.isRequired,
+    children: PropTypes.node,
+    menu: PropTypes.element,
+    route: PropTypes.object.isRequired,
+    setSidebarVisibility: PropTypes.func.isRequired,
+    title: PropTypes.string.isRequired,
+    theme: PropTypes.object.isRequired,
+    width: PropTypes.number,
+};
+
+Layout.defaultProps = {
+    theme: defaultTheme,
+};
+
+function mapStateToProps(state) {
+    return {
+        isLoading: state.admin.loading > 0,
+    };
+}
+
+const enhance = compose(
+    connect(mapStateToProps, {
+        setSidebarVisibility: setSidebarVisibilityAction,
+    }),
+    withWidth(),
+);
+
+export default enhance(Layout);
Index: CHANGELOG.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- CHANGELOG.md	(revision )
+++ CHANGELOG.md	(revision )
@@ -0,0 +1,324 @@
+# Changelog
+
+## v0.9.4
+
+* Fix `<ReferenceManyField>` documentation by adding a warning about required `<Resource>`
+* Fix custom dashboard documentation for `<ViewTitle>`
+* Fix custom List actions documentation ([remi13131](https://github.com/remi13131))
+* Fix `restClient` documentation by simplifying example code ([kulakowka](https://github.com/kulakowka))
+* Fix refresh on Edit clears data
+* Fix bad "unauthorized" notification after login
+* Fix typo on authentication documentation ([faviouz](https://github.com/faviouz))
+* Fix custom style component documentation ([vysakh0](https://github.com/vysakh0))
+* Fix Custom HTTP Client documentation ([remi13131](https://github.com/remi13131))
+* Explain branches in README
+* Fix `<NullableBooleanInput>` bug on undefined `meta` prop
+
+## v0.9.3
+
+* Fix list layout breaking when there are more than 3 filters
+* Fix documentation about API endpoint and aor URL mapping
+* Fix typos in Actions documentation ([leesei](https://github.com/leesei))
+* Fix hyperlink to JSON API route in Tutorial ([damiansimonpeter](https://github.com/damiansimonpeter))
+* Add a `dropAreaLabel` prop to `<ImageInput>` to let developers customize label of drop area ([DjLeChuck](https://github.com/DjLeChuck))
+
+## v0.9.2
+
+* Fix IE11/Edge flexbox issue ([LoicMahieu](https://github.com/LoicMahieu))
+* Fix custom sagas can't reliably watch router actions
+* Fix image input previews on drop
+* Fix pagination on mobile
+* Fix SelectInput error text position
+* Add mention of Hungarian translations ([s33m4nn](https://github.com/s33m4nn))
+* Add mention of `aor-parseserver-client`
+* Add contribution guidelines
+
+## v0.9.1
+
+* Fix redirection after creation
+* Fix `jsonServer` `GET_MANY` implementation ([wadjeroudi](https://github.com/wadjeroudi))
+* Add Loopback-like REST client ([kimkha](https://github.com/kimkha))
+* Update Webpack example config ([velociwabbit](https://github.com/velociwabbit))
+
+## v0.9.0
+
+* [BC Break] Update REST response format to always expect a `data` key
+* Add mobile UI (Sidebar, AppBar, Datagrid, actions, form action)
+* Add `<Responsive>` component
+* Add `<ViewTitle>` component (to be used instead of `<CardTitle>` for responsive views)
+* Add ability to hide sidebar using hamburger menu
+* Add `<Sidebar>` component
+* Add `menu` prop to `<Admin>`, to customize the menu without overriding the layout
+* Add dashboard MenuItem on top of Menu when relevant
+* Add ability to execute crud actions without redirect ([thedersen](https://github.com/thedersen))
+* Add support for custom `onBlur`, `onChange`, and `onFocus` props to `<NumberInput>` and `<TextInput>`
+* Add support for image preview change via dispatches form value in `<<ImageInput />`
+* Add support for custom redirect path when auth check fails ([thedersen](https://github.com/thedersen))
+* Add support for non-cancelable fetch in `crudGetList` action ([thedersen](https://github.com/thedersen))
+* Add support for default locale in `resolveBrowserLocale`
+* Add ability to translate `CRUD_UPDATE` to HTTP `PATCH` method
+* Add ability to hide fields
+* Add Spanish translations ([JonatanSalas](https://github.com/JonatanSalas))
+* Add Vietnamese translations ([kimkha](https://github.com/kimkha))
+* Improve Login page UX with form lock and loader ([Natsuke](https://github.com/Natsuke))
+* Improve `<Datagrid>` rendering options by using material-ui `<Table>` element
+* Improve loader and button components rendering speed
+* Remove link to dashboard in the top bar
+* Remove CSS copy step from build
+* Fix notification for server error even when the response body is empty
+
+## v0.8.4
+
+* Fix `defaultValue` assignment for nested resource attributes ([cytomich](https://github.com/cytomich))
+* Fix typo in Inputs documentation ([FallDi](https://github.com/FallDi))
+* Fix Custom App install instructions
+* Add Hebrew translation link ([mstmustisnt](https://github.com/mstmustisnt))
+* Add link to Feathers `restClient` ([josx](https://github.com/josx))
+
+
+## v0.8.3
+
+* Fix Edit view shows stale data
+* Fix anchor typo on documentation index ([szappacosta](https://github.com/szappacosta))
+* Fix missing import in the Getting Started tutorial ([SilentKernel](https://github.com/SilentKernel))
+* Add demo video in doc and GitHub homepage
+* Add Russian translation link ([cytomich](https://github.com/cytomich))
+
+## v0.8.2
+
+* Fix scroll to top during navigation when auth is disabled
+* Fix fetch saga to avoid mutating actions
+* Fix custom app documentation
+* Fix SelectInput arrow click hides input
+* Fix missing status in fetch when error is thrown ([wadjeroudi](https://github.com/wadjeroudi))
+* Remove documentation images from package
+* Add Chinese translation link ([downup2u](https://github.com/downup2u))
+* Add German translation link ([der-On](https://github.com/der-On))
+* Add link to powershell script for building ([mantis](https://github.com/mantis))
+
+## v0.8.1
+
+* Fix custom title in view and custom label in resource
+* Fix quick filter in example demo
+* Add link to GraphQl rest client in the docs
+* Add link to `<ColorInput>` component in the docs
+* Add link to Italian translation in the docs ([stefsava](https://github.com/stefsava))
+
+## v0.8.0
+
+See the [v0.8.0 announcement in the marmelab blog](https://marmelab.com/blog/2017/02/14/admin-on-rest-0-8.html).
+
+* [BC Break] Rename `defaultSort` prop to `sort` in `<List>` component, to make it consistent with the props of `<ReferenceInput>` and `<ReferenceManyField>`
+* [BC Break] Rename `filter` props (the one accepting a `<Filter>` element) to `filters` in `<List>` component
+* Add I18n
+* Add Authentication
+* Add `<ImageField>` and `<ImageInput>` to upload images
+* Add `<CheckboxGroupInput>` component
+* Add the ability to hook up custom sagas in `<Admin>`
+* Add the ability to hook up custom reducers in `<Admin>`
+* Add `filter` prop to `<List>` component for permanent filters
+* Add support for `defaultValue` in filters
+* Add support for functions as value for the `defaultValue` prop
+* Add ability to disable sorting on datagrid headers
+* Add `perPage`, `sort`, and `filter` props to ``<ReferenceManyField>`
+* Add `label` prop to all buttons
+* Add Custom Actions documentation
+* Add CSS prefix to flex-box elements ([yshing](https://github.com/yshing))
+* Improve Delete button labels
+* Update optimistic rendering to also work with custom fetch actions
+* Speed up `<Datagrid>` rendering
+* Refactor response side effects to a normal saga
+* Upgrade `redux-saga` to v0.14.2
+* Fix disconnection on dashboard
+* Fix edge case where list filter isn't shown
+* Fix validation for `<AutocompleteInput>`, `<ReferenceInput>`, and `<SelectInput>` ([AkselsLedins](https://github.com/AkselsLedins))
+
+## v0.7.2
+
+* Fix code snippets disappearing from documentation
+* Add mention of aor-postgrest-client in REST clients documentation
+* Fix missed refresh in example due to aor-json-rest-client not cloning the objects
+* Fix Refresh button doesn't refresh References
+* Fix pagination error in console during load
+
+## v0.7.1
+
+* Fix validation on nested fields
+* Fix validation when passed as `<Input>` prop in `<TabbedForm>` component
+* Fix endless spinning `<SaveButton>` upon error
+
+## v0.7.0
+
+See the [v0.7.0 announcement in the marmelab blog](https://marmelab.com/blog/2017/01/13/admin-on-rest-0-7.html).
+
+* [BC Break] Remove `<RichTextInput>` from core, use `aor-rich-text-input` instead
+* [BC Break] Introduce `<SimpleForm>` component between `<Edit>/<Create>` and input components
+* [BC Break] Introduce `<SimpleShowLayout>` component between `<Show>` and field components
+* [BC Break] Remove `GET_MATCHING` REST verb (and merge with `GET_LIST`)
+* [BC Break] Add a limit to the fetching of `<ReferenceInput>` (set to 25 by default)
+* [BC Break] Custom input elements are not decorated by `<Field>` by default, set `addField: true` to get it
+* [BC Break] Custom input elements are not decorated by `<Labeled>` by default, set `addLabel: true` to get it
+* [BC Break] Rename `includesField: true` to `addField: false` for Input components
+* [BC Break] Rename `includesLabel: true` to `addLabel: false` for Input components
+* [BC Break] All Redux action creators are now exported at the root level
+* Introduce `<TabbedForm>` component as an example of alternative form layout
+* Add `<AutocompleteInput>` field
+* Add `<NumberInput>` field
+* Add ability to use any React component (including Fields) as `Edit` or `Create` element
+* Add support for locales and options in `<DateField>`
+* Add animation on click in `<SaveButton>`
+* Add Refresh button in `<Edit>` view
+* Add support for defaultValue in `<Create>` and `<Edit>` components
+* Add support for defaultValue in `<Input>` components
+* Add support for actions in `<Create>` and `<Edit>` components
+* Add a `perPage` prop to `<ReferenceInput>` to allow fetching more or less options
+* Add a `sort` prop to `<ReferenceInput>` to allow sorting of options
+* Add support for function as `optionText` value in `<SelectInput>`, `<RadioButtonGroupInput>`, and `<AutocompleteInput>`
+* Add support for element as `optionText` value in `<SelectInput>`, and `<RadioButtonGroupInput>`
+* Add double submission protection in `<SaveButton>`
+* Add trigger to hide `<Edit>` view title until record is loaded
+* Add support for special chars like "/" in id ([dunglas](https://github.com/dunglas))
+* Add `<FormField>` component to allow reuse of the `addLabel/addField` decoration logic
+* Use Json REST client (http-less client) in example
+* Set `allowEmpty` to true by default in `Filter` form (was breaking `<ReferenceInput>` in filters by default)
+* Fix bad setup of `ReferenceInput` value in filters
+* Fix `<SavedButton>` in case of invalid form (was spinning forever)
+
+## v0.6.2
+
+* Fix bad `_end` argument for `jsonServer` REST client
+* Clarify CORS headers documentation and exception message
+* Fix wrong table cell wrap in `<Datagrid>`
+* Add custom layout documentation to Theming chapter
+* Fix `<NumberField>` when record has no value for the source
+* Fix `<DateField>` for null values
+
+## v0.6.1
+
+* Fix notification background colors to use mui theme
+* Fix missing `lodash.defaultdeep` not mentioned as dependency
+
+## v0.6.0
+
+* [BC Break] The `filter` prop of the <List> component now expects an element rather than a component (`<List filter={<MyFilter/>} >` rather than `<List filter={MyFilter} >`)
+* [BC Break] The `title` prop of all view components now expect an element rather than a component (`<List title={<MyTitle/>`} > rather than `<List title={MyTitle} >`)
+* [BC Break] Rename `style` to `elStyle` and let style override container element
+* Add special design for non-sortable columns in datagrid
+* Add `style`, `elStyle` to all components
+* Add `headerStyle` to Field components (ability to style `<th>`)
+* Add `rowStyle` to `<Datagrid>` (ability to style `<tr>` according to the value)
+* Add `defaultSort` to `<Datagrid>` (ability to set default sort order on list)
+* Add `actions`, `perPage`, and `pagination` props to the `<List>` component
+* Add List view documentation
+* Add `<BooleanField>` component
+* Add `<BooleanInput>` component
+* Add `<NullableBooleanInput>` component
+* Add `<NumberField>` component
+* Add `<FunctionField>` component
+* Align datagrid first column to the page title
+* Hide resources in the Menu when they don't have a list view
+* Fix warning for fields with no source and no label
+* Fix FilterButton for fields without label
+
+## v0.5.4
+
+* Document conditional formatting
+* Fix node incompatibility error caused by `quill` when installing with `yarn` ([tinhnguyen-ea](https://github.com/tinhnguyen-ea))
+* Fix pagination when the number of pages exceeds 8
+* Fix React 14.4 compatibility by updating `react-tap-event` dependency ([petetnt](https://github.com/petetnt))
+* Fix regression in material UI Popover
+* Update dependencies (`react`, `material-ui`, `redux-form`, `redux-saga`)
+
+## v0.5.3
+
+* Fix `jsonServer` `GET_MANY` when overriding `htpClient` ([aceofspades](https://github.com/aceofspades))
+* Fix bad refresh of list after create, update, and delete
+* Fix unstable state after create, update, and delete
+
+## v0.5.2
+
+* Fix `<SelectInput>` subcomponent key in case of duplicate value ([rweindl](https://github.com/rweindl))
+* Fix `make test-watch` command
+* Fix  datagrid margins to accomodate more content
+* Fix cannot set empty value on `<ReferenceInput/>`
+* Fix bad error message in `restClient` when no count header is found
+* Fix Infinite loop when two menu clicked quickly
+* Fix Warning when Datagrid contains two action buttons
+* Add ability to intercept HTTP request and add custom headers
+
+## v0.5.1
+
+Fix bad built files
+
+## v0.5.0
+
+See the [v0.5.0 announcement in the marmelab blog](http://marmelab.com/blog/2016/11/10/admin-on-rest-0-5.html).
+
+* [BC Break] Remove `credentials: include` HTTP option enabled by default
+* Add `<Show>` View
+* Add custom headers support
+* Add support for the `style` attribute in all components
+* Add Theming Documentation (by [MattWilliamsDev](https://github.com/MattWilliamsDev))
+* Update the `<Datagrid>` to use real tables (and auto-size columns)
+* Upgrade to material-ui 0.16
+* Update package to bundle quill
+* Export more components and functions to ease customization
+* Fix multiple ReferenceFields in a list incorrectly loads data
+* Fix spinner not stopping after delete
+* Fix Router now scrolls to top
+* Fix `<RadioButtonGroupInput>`
+* Fix datagrid layout to make columns adapt width to content
+* Fix doc on reducers in CustomApp (by [ArnaudD](https://github.com/ArnaudD))
+* Fix custom app docs now that redux form is required
+* Fix RadioButtonGroupInput
+* Fix Pagination when list has no filter
+* Fix clearing text filter doesn't fetch the unfiltered list
+* Fix Warning when Datagrid contains two action buttons
+
+## v0.4.0
+
+* [BC Break] Pass Headers object to `restClient`
+* Add loads of documentation
+* Use `source` as implicit `label` in fields and input components
+* Add `<RichTextField>` and `<RichTextInput>` components (powered by [quill](http://quilljs.com/))
+* Add `<UrlField>` component
+* Add Form Validation in `<Edit>` and `<Create>` views (powered by [redux-form](http://redux-form.com/))
+* Add material-ui theme support in the `<Admin>` component (by [fnberta](https://github.com/fnberta))
+* Add option to show date with time (by [fnberta](https://github.com/fnberta))
+* Add UUID support (by [bjet007](https://github.com/bjet007))
+* Add deep field selection
+* Add unit tests
+* Fix form display issue when single or no fields
+* Fix and speedup filters
+* Fix create form
+* Fix filter value reset when filter is removed
+
+## V0.3.0
+
+See the [v0.3.0 announcement in the marmelab blog](http://marmelab.com/blog/2016/09/02/admin-on-rest-react-admin-framework.html).
+
+* [BC Break] `<List>` takes an iterator child (like `<Datagrid>`)
+* [BC Break] `<ReferenceField>` replaces `referenceSource` by a child field
+* [BC Break] `<ReferenceInput>` replaces `referenceSource` by a child input
+* [BC Break] Rename `fetchJSON` to `fetchJson`
+* Switch FakeRest as an external dependency
+* Add ability to customize admin title
+* Add `<Labeled>` component, and introduce the `includesLabel` prop on inputs
+* Add `<SingleFieldList>` and `<ChipField>` components
+* Add `<ReferenceManyField>` component and related reducer logic
+* Add `<RadioButtonGroupInput>` component
+* Add `<SelectInput>` component
+* Add notifications
+* Add Custom App doc
+
+## v0.2.0
+
+* Fix redirect breaks loader
+* Move list params state from redux to router (allows usage of back button in the list)
+* Fix filters bug (did not reset the page number)
+* Add ability to define a custom dashboard component
+* Rename Datagrid to List, and introduce Datagrid component
+* Export REST types constants
+* Add tutorial
+
+## v0.1.0 - Initial release
Index: src/mui/form/Toolbar.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/form/Toolbar.js	(revision )
+++ src/mui/form/Toolbar.js	(revision )
@@ -0,0 +1,36 @@
+import React from 'react';
+import { Toolbar as MuiToolbar, ToolbarGroup } from 'material-ui/Toolbar';
+import Responsive from '../layout/Responsive';
+import { SaveButton } from '../button';
+
+const styles = {
+    mobileToolbar: {
+        position: 'fixed',
+        bottom: 0,
+        width: '100%',
+        backgroundColor: 'white',
+        justifyContent: 'flex-end',
+        zIndex: 2,
+    },
+};
+
+const Toolbar = ({ invalid }) => (
+    <Responsive
+        small={
+            <MuiToolbar style={styles.mobileToolbar} noGutter>
+                <ToolbarGroup>
+                    <SaveButton invalid={invalid} raised={false} />
+                </ToolbarGroup>
+            </MuiToolbar>
+        }
+        medium={
+            <MuiToolbar>
+                <ToolbarGroup>
+                    <SaveButton invalid={invalid} />
+                </ToolbarGroup>
+            </MuiToolbar>
+        }
+    />
+);
+
+export default Toolbar;
Index: src/mui/layout/Menu.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/layout/Menu.js	(revision )
+++ src/mui/layout/Menu.js	(revision )
@@ -0,0 +1,63 @@
+import React, { PropTypes } from 'react';
+import inflection from 'inflection';
+import MenuItem from 'material-ui/MenuItem';
+import { Link } from 'react-router';
+import pure from 'recompose/pure';
+import compose from 'recompose/compose';
+import DashboardMenuItem from './DashboardMenuItem';
+import translate from '../../i18n/translate';
+
+const styles = {
+    main: {
+        display: 'flex',
+        flexDirection: 'column',
+        justifyContent: 'flex-start',
+        height: '100%',
+    },
+};
+
+const translatedResourceName = (resource, translate) =>
+    translate(`resources.${resource.name}.name`, {
+        smart_count: 2,
+        _: resource.options && resource.options.label ?
+            translate(resource.options.label, { smart_count: 2, _: resource.options.label }) :
+            inflection.humanize(inflection.pluralize(resource.name)),
+    });
+
+const Menu = ({ hasDashboard, onMenuTap, resources, translate, logout }) => (
+    <div style={styles.main}>
+        {hasDashboard && <DashboardMenuItem onTouchTap={onMenuTap}/>}
+        {resources
+            .filter(r => r.list)
+            .map(resource =>
+                <MenuItem
+                    key={resource.name}
+                    containerElement={<Link to={`/${resource.name}`} />}
+                    primaryText={translatedResourceName(resource, translate)}
+                    leftIcon={<resource.icon />}
+                    onTouchTap={onMenuTap}
+                />,
+            )
+        }
+        {logout}
+    </div>
+);
+
+Menu.propTypes = {
+    hasDashboard: PropTypes.bool,
+    logout: PropTypes.element,
+    onMenuTap: PropTypes.func,
+    resources: PropTypes.array.isRequired,
+    translate: PropTypes.func.isRequired,
+};
+
+Menu.defaultProps = {
+    onMenuTap: () => null,
+};
+
+const enhance = compose(
+    pure,
+    translate,
+);
+
+export default enhance(Menu);
Index: src/mui/field/NumberField.spec.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/field/NumberField.spec.js	(revision )
+++ src/mui/field/NumberField.spec.js	(revision )
@@ -0,0 +1,41 @@
+import React from 'react';
+import assert from 'assert';
+import { shallow } from 'enzyme';
+import { NumberField } from './NumberField';
+
+describe('<NumberField />', () => {
+    it('should return null when the record is not set', () => assert.equal(
+        shallow(<NumberField source="foo" />).html(),
+        null,
+    ));
+
+    it('should return null when the record has no value for the source', () => assert.equal(
+        shallow(<NumberField record={{}} source="foo" />).html(),
+        null,
+    ));
+
+    it('should render a number', () => assert.equal(
+        shallow(<NumberField record={{ foo: 1 }} source="foo" />).html(),
+        '<span>1</span>',
+    ));
+
+    it('should pass the options prop to Intl.NumberFormat', () => assert.equal(
+        shallow(<NumberField record={{ foo: 1 }} source="foo" locales="en-US" options={{ minimumFractionDigits: 2 }} />).html(),
+        '<span>1.00</span>',
+    ));
+
+    it('should use the locales props as an argument to Intl.NumberFormat', () => assert.equal(
+        shallow(<NumberField record={{ foo: 1 }} source="foo" locales="fr-FR" options={{ minimumFractionDigits: 2 }} />).html(),
+        '<span>1,00</span>',
+    ));
+
+    it('should use custom styles passed as an elStyle prop', () => assert.equal(
+        shallow(<NumberField record={{ foo: 1 }} source="foo" elStyle={{ margin: 1 }} />).html(),
+        '<span style="margin:1px;">1</span>',
+    ));
+
+    it('should handle deep fields', () => assert.equal(
+        shallow(<NumberField record={{ foo: { bar: 2 } }} source="foo.bar" />).html(),
+        '<span>2</span>',
+    ));
+});
Index: src/sideEffect/saga/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sideEffect/saga/index.js	(revision )
+++ src/sideEffect/saga/index.js	(revision )
@@ -0,0 +1,5 @@
+export auth from './auth';
+export crudFetch from './crudFetch';
+export crudResponse from './crudResponse';
+export crudSaga from './crudSaga';
+export referenceFetch from './referenceFetch';
Index: src/i18n/messages.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/i18n/messages.js	(revision )
+++ src/i18n/messages.js	(revision )
@@ -0,0 +1,65 @@
+export default {
+    aor: {
+        action: {
+            delete: 'Delete',
+            show: 'Show',
+            list: 'List',
+            save: 'Save',
+            create: 'Create',
+            edit: 'Edit',
+            cancel: 'Cancel',
+            refresh: 'Refresh',
+            add_filter: 'Add filter',
+            remove_filter: 'Remove this filter',
+        },
+        boolean: {
+            true: 'Yes',
+            false: 'No',
+        },
+        page: {
+            list: '%{name} List',
+            edit: '%{name} #%{id}',
+            show: '%{name} #%{id}',
+            create: 'Create %{name}',
+            delete: 'Delete %{name} #%{id}',
+            dashboard: 'Dashboard',
+        },
+        input: {
+            image: {
+                upload_several: 'Drop some files to upload, or click to select one.',
+                upload_single: 'Drop a file to upload, or click to select it.',
+            },
+        },
+        message: {
+            yes: 'Yes',
+            no: 'No',
+            are_you_sure: 'Are you sure ?',
+            about: 'About',
+        },
+        navigation: {
+            page_out_of_boundaries: 'Page number %{page} out of boundaries',
+            page_out_from_end: 'Cannot go after last page',
+            page_out_from_begin: 'Cannot go before page 1',
+            page_range_info: '%{offsetBegin}-%{offsetEnd} of %{total}',
+            next: 'Next',
+            prev: 'Prev',
+        },
+        auth: {
+            username: 'Username',
+            password: 'Password',
+            sign_in: 'Sign in',
+            sign_in_error: 'Authentication failed, please retry',
+            logout: 'Logout',
+        },
+        notification: {
+            updated: 'Element updated',
+            created: 'Element created',
+            deleted: 'Element deleted',
+            item_doesnt_exist: 'Element does not exist',
+            http_error: 'Server communication error',
+        },
+        validation: {
+            required: 'Required',
+        },
+    },
+};
Index: src/mui/input/ImageInput.spec.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/input/ImageInput.spec.js	(revision )
+++ src/mui/input/ImageInput.spec.js	(revision )
@@ -0,0 +1,189 @@
+import assert from 'assert';
+import { shallow } from 'enzyme';
+import React from 'react';
+
+import { ImageField } from '../field/ImageField';
+import { ImageInput } from './ImageInput';
+
+describe('<ImageInput />', () => {
+    it('should display a dropzone', () => {
+        const wrapper = shallow((
+            <ImageInput
+                input={{
+                    value: {
+                        picture: null,
+                    },
+                }}
+                translate={x => x}
+                source="picture"
+            />
+        ));
+
+        assert.equal(wrapper.find('Dropzone').length, 1);
+    });
+
+    it('should display correct label depending multiple property', () => {
+        const test = (multiple, expectedLabel) => {
+            const wrapper = shallow((
+                <ImageInput
+                    multiple={multiple}
+                    input={{
+                        value: {
+                            picture: null,
+                        },
+                    }}
+                    translate={x => x}
+                    source="picture"
+                />
+            ));
+
+            assert.equal(wrapper.find('Dropzone p').text(), expectedLabel);
+        };
+
+        test(false, 'aor.input.image.upload_single');
+        test(true, 'aor.input.image.upload_several');
+    });
+
+    it('should display correct custom label', () => {
+        const test = (expectedLabel) => {
+            const wrapper = shallow((
+                <ImageInput
+                    placeholder={expectedLabel}
+                    input={{
+                        value: {
+                            picture: null,
+                        },
+                    }}
+                    translate={x => x}
+                    source="picture"
+                />
+            ));
+
+            assert.ok(wrapper.find('Dropzone').contains(expectedLabel));
+        };
+        const CustomLabel = () => (
+            <div>Custom label</div>
+        );
+
+        test('custom label');
+        test(<h1>Custom label</h1>);
+        test(<CustomLabel />);
+    });
+
+    describe('Image Preview', () => {
+        it('should display file preview using child as preview component', () => {
+            const wrapper = shallow((
+                <ImageInput
+                    input={{
+                        value: {
+                            url: 'http://foo.com/bar.jpg',
+                            title: 'Hello world!',
+                        },
+                    }}
+                    translate={x => x}
+                >
+                    <ImageField source="url" title="title" />
+                </ImageInput>
+            ));
+
+            const previewImage = wrapper.find('ImageField');
+
+            assert.equal(previewImage.length, 1);
+            assert.equal(previewImage.prop('source'), 'url');
+            assert.equal(previewImage.prop('title'), 'title');
+            assert.deepEqual(previewImage.prop('record'), {
+                title: 'Hello world!',
+                url: 'http://foo.com/bar.jpg',
+            });
+        });
+
+        it('should display all files (when several) previews using child as preview component', () => {
+            const wrapper = shallow((
+                <ImageInput
+                    input={{
+                        value: [
+                            { url: 'http://foo.com/bar.jpg', title: 'Hello world!' },
+                            { url: 'http://foo.com/qux.bmp', title: 'A good old Bitmap!' },
+                        ],
+                    }}
+                    translate={x => x}
+                >
+                    <ImageField source="url" title="title" />
+                </ImageInput>
+            ));
+
+            const previewImages = wrapper.find('ImageField');
+
+            assert.equal(previewImages.length, 2);
+            assert.equal(previewImages.at(0).prop('source'), 'url');
+            assert.equal(previewImages.at(0).prop('title'), 'title');
+            assert.deepEqual(previewImages.at(0).prop('record').title, 'Hello world!');
+            assert.deepEqual(previewImages.at(0).prop('record').url, 'http://foo.com/bar.jpg');
+
+            assert.equal(previewImages.at(1).prop('source'), 'url');
+            assert.equal(previewImages.at(1).prop('title'), 'title');
+            assert.deepEqual(previewImages.at(1).prop('record').title, 'A good old Bitmap!');
+            assert.deepEqual(previewImages.at(1).prop('record').url, 'http://foo.com/qux.bmp');
+        });
+
+        it('should update previews when updating input value', () => {
+            const wrapper = shallow(
+                <ImageInput
+                    source="picture"
+                    translate={x => x}
+                    input={{
+                        value: {
+                            url: 'http://static.acme.com/foo.jpg',
+                        },
+                    }}
+                >
+                    <ImageField source="url" />
+                </ImageInput>,
+            );
+
+            const previewImage = wrapper.find('ImageField');
+            const previewUrl = previewImage.prop('record').url;
+            assert.equal(previewUrl, 'http://static.acme.com/foo.jpg');
+
+            wrapper.setProps({
+                input: {
+                    value: {
+                        url: 'http://static.acme.com/bar.jpg',
+                    },
+                },
+            });
+
+            wrapper.update();
+
+            const updatedPreviewImage = wrapper.find('ImageField');
+            const updatedPreviewUrl = updatedPreviewImage.prop('record').url;
+            assert.equal(updatedPreviewUrl, 'http://static.acme.com/bar.jpg');
+        });
+
+        it('should update previews when dropping a file', () => {
+            const wrapper = shallow(
+                <ImageInput
+                    source="picture"
+                    translate={x => x}
+                    input={{}}
+                >
+                    <ImageField source="url" />
+                </ImageInput>,
+            );
+
+            wrapper.setProps({
+                input: {
+                    value: {
+                        preview: 'blob:http://localhost:8080/1234-5678',
+                    },
+                },
+            });
+
+            wrapper.update();
+
+            const imagePreview = wrapper.find('ImageField');
+            const previewUrl = imagePreview.prop('record').url;
+            assert.equal(previewUrl, 'blob:http://localhost:8080/1234-5678');
+        });
+    });
+});
Index: src/mui/list/SimpleList.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/list/SimpleList.js	(revision )
+++ src/mui/list/SimpleList.js	(revision )
@@ -0,0 +1,60 @@
+import React, { PropTypes } from 'react';
+import { List, ListItem } from 'material-ui/List';
+import { Link } from 'react-router';
+
+const tertiaryStyle = { float: 'right', opacity: 0.541176 };
+
+const SimpleList = ({
+    ids,
+    data,
+    basePath,
+    primaryText,
+    secondaryText,
+    secondaryTextLines,
+    tertiaryText,
+    leftAvatar,
+    leftIcon,
+    rightAvatar,
+    rightIcon,
+}) => (
+    <List>
+        {ids.map(id => (
+            <ListItem
+                key={id}
+                primaryText={
+                    <div>
+                        {primaryText(data[id], id)}
+                        {tertiaryText &&
+                            <span style={tertiaryStyle}>
+                                {tertiaryText(data[id], id)}
+                            </span>
+                        }
+                    </div>
+                }
+                secondaryText={secondaryText && secondaryText(data[id], id)}
+                secondaryTextLines={secondaryTextLines}
+                leftAvatar={leftAvatar && leftAvatar(data[id], id)}
+                leftIcon={leftIcon && leftIcon(data[id], id)}
+                rightAvatar={rightAvatar && rightAvatar(data[id], id)}
+                rightIcon={rightIcon && rightIcon(data[id], id)}
+                containerElement={<Link to={`${basePath}/${id}`} />}
+            />
+        ))}
+    </List>
+);
+
+SimpleList.propTypes = {
+    ids: PropTypes.array,
+    data: PropTypes.object,
+    basePath: PropTypes.string,
+    primaryText: PropTypes.func,
+    secondaryText: PropTypes.func,
+    secondaryTextLines: PropTypes.number,
+    tertiaryText: PropTypes.func,
+    leftAvatar: PropTypes.func,
+    leftIcon: PropTypes.func,
+    rightAvatar: PropTypes.func,
+    rightIcon: PropTypes.func,
+};
+
+export default SimpleList;
Index: src/util/linkToRecord.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/util/linkToRecord.js	(revision )
+++ src/util/linkToRecord.js	(revision )
@@ -0,0 +1,2 @@
+export default (basePath, id) =>
+    `${basePath}/${encodeURIComponent(id)}`
Index: src/mui/list/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/list/index.js	(revision )
+++ src/mui/list/index.js	(revision )
@@ -0,0 +1,8 @@
+export Datagrid from './Datagrid';
+export Filter from './Filter';
+export FilterButton from './FilterButton';
+export FilterForm from './FilterForm';
+export List from './List';
+export Pagination from './Pagination';
+export SimpleList from './SimpleList';
+export SingleFieldList from './SingleFieldList';
Index: src/mui/defaultTheme.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/defaultTheme.js	(revision )
+++ src/mui/defaultTheme.js	(revision )
@@ -0,0 +1,10 @@
+export default {
+    tabs: {
+        backgroundColor: 'white',
+        selectedTextColor: '#00bcd4',
+        textColor: '#757575',
+    },
+    inkBar: {
+        backgroundColor: '#00bcd4',
+    },
+};
Index: src/mui/input/LongTextInput.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/input/LongTextInput.js	(revision )
+++ src/mui/input/LongTextInput.js	(revision )
@@ -0,0 +1,35 @@
+import React, { PropTypes } from 'react';
+import TextField from 'material-ui/TextField';
+import FieldTitle from '../../util/FieldTitle';
+
+const LongTextInput = ({ input, label, meta: { touched, error }, options, source, elStyle, resource }) => (
+    <TextField
+        {...input}
+        multiLine
+        fullWidth
+        floatingLabelText={<FieldTitle label={label} source={source} resource={resource} />}
+        errorText={touched && error}
+        style={elStyle}
+        {...options}
+    />
+);
+
+LongTextInput.propTypes = {
+    addField: PropTypes.bool.isRequired,
+    elStyle: PropTypes.object,
+    input: PropTypes.object,
+    label: PropTypes.string,
+    meta: PropTypes.object,
+    name: PropTypes.string,
+    options: PropTypes.object,
+    resource: PropTypes.string,
+    source: PropTypes.string,
+    validation: PropTypes.object,
+};
+
+LongTextInput.defaultProps = {
+    addField: true,
+    options: {},
+};
+
+export default LongTextInput;
Index: src/Admin.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Admin.js	(revision )
+++ src/Admin.js	(revision )
@@ -0,0 +1,134 @@
+import React, { PropTypes } from 'react';
+import { combineReducers, createStore, compose, applyMiddleware } from 'redux';
+import { Provider } from 'react-redux';
+import { Router, IndexRoute, Route, Redirect, hashHistory } from 'react-router';
+import { syncHistoryWithStore, routerMiddleware, routerReducer } from 'react-router-redux';
+import { reducer as formReducer } from 'redux-form';
+import createSagaMiddleware from 'redux-saga';
+import { fork } from 'redux-saga/effects';
+import withProps from 'recompose/withProps';
+
+import adminReducer from './reducer';
+import localeReducer from './reducer/locale';
+import { crudSaga } from './sideEffect/saga';
+import CrudRoute from './CrudRoute';
+import DefaultLayout from './mui/layout/Layout';
+import Menu from './mui/layout/Menu';
+import Login from './mui/auth/Login';
+import Logout from './mui/auth/Logout';
+import TranslationProvider from './i18n/TranslationProvider';
+import { AUTH_CHECK } from './auth';
+
+const Admin = ({
+    appLayout,
+    authClient,
+    children,
+    customReducers = {},
+    customSagas = [],
+    customRoutes,
+    dashboard,
+    locale,
+    messages = {},
+    menu,
+    restClient,
+    theme,
+    title = 'Admin on REST',
+    loginPage,
+    logoutButton,
+}) => {
+    const resources = React.Children.map(children, ({ props }) => props);
+    const reducer = combineReducers({
+        admin: adminReducer(resources),
+        locale: localeReducer(locale),
+        form: formReducer,
+        routing: routerReducer,
+        ...customReducers,
+    });
+    const saga = function* rootSaga() {
+        yield [
+            crudSaga(restClient),
+            ...customSagas,
+        ].map(fork);
+    };
+    const sagaMiddleware = createSagaMiddleware();
+    const store = createStore(reducer, undefined, compose(
+        applyMiddleware(sagaMiddleware, routerMiddleware(hashHistory)),
+        window.devToolsExtension ? window.devToolsExtension() : f => f,
+    ));
+    sagaMiddleware.run(saga);
+
+    const history = syncHistoryWithStore(hashHistory, store);
+    const firstResource = resources[0].name;
+    const onEnter = authClient ?
+        params => (nextState, replace, callback) => authClient(AUTH_CHECK, params)
+            .then(() => params && params.scrollToTop ? window.scrollTo(0, 0) : null)
+            .catch(e => {
+                replace({
+                    pathname: (e && e.redirectTo) || '/login',
+                    state: { nextPathname: nextState.location.pathname },
+                })
+            })
+            .then(callback)
+        :
+        params => () => params && params.scrollToTop ? window.scrollTo(0, 0) : null;
+    const LoginPage = withProps({ title, theme, authClient })(loginPage || Login);
+    const LogoutButton = withProps({ authClient })(logoutButton || Logout);
+    const MenuComponent = withProps({ authClient, logout: <LogoutButton />, resources, hasDashboard: !!dashboard })(menu || Menu);
+    const Layout = withProps({
+        authClient,
+        logout: <LogoutButton />,
+        menu: <MenuComponent />,
+        title,
+        theme,
+    })(appLayout || DefaultLayout);
+
+    return (
+        <Provider store={store}>
+            <TranslationProvider messages={messages}>
+                <Router history={history}>
+                    {dashboard ? undefined : <Redirect from="/" to={`/${firstResource}`} />}
+                    <Route path="/login" component={LoginPage} />
+                    <Route path="/" component={Layout} resources={resources}>
+                        {customRoutes && customRoutes()}
+                        {dashboard && <IndexRoute component={dashboard} onEnter={onEnter()} />}
+                        {resources.map(resource =>
+                            <CrudRoute
+                                key={resource.name}
+                                path={resource.name}
+                                list={resource.list}
+                                create={resource.create}
+                                edit={resource.edit}
+                                show={resource.show}
+                                remove={resource.remove}
+                                options={resource.options}
+                                onEnter={onEnter}
+                            />
+                        )}
+                    </Route>
+                </Router>
+            </TranslationProvider>
+        </Provider>
+    );
+};
+
+const componentPropType = PropTypes.oneOfType([PropTypes.func, PropTypes.string]);
+
+Admin.propTypes = {
+    appLayout: componentPropType,
+    authClient: PropTypes.func,
+    children: PropTypes.node,
+    customSagas: PropTypes.array,
+    customReducers: PropTypes.object,
+    customRoutes: PropTypes.func,
+    dashboard: componentPropType,
+    loginPage: componentPropType,
+    logoutButton: componentPropType,
+    menu: componentPropType,
+    restClient: PropTypes.func,
+    theme: PropTypes.object,
+    title: PropTypes.string,
+    locale: PropTypes.string,
+    messages: PropTypes.object,
+};
+
+export default Admin;
Index: src/mui/list/DatagridCell.spec.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/list/DatagridCell.spec.js	(revision )
+++ src/mui/list/DatagridCell.spec.js	(revision )
@@ -0,0 +1,23 @@
+import assert from 'assert';
+import React from 'react';
+import { shallow } from 'enzyme';
+
+import DatagridCell from './DatagridCell';
+
+describe('<DatagridCell />', () => {
+    it('should render as a mui <TableRowColumn /> component', () => {
+        const wrapper = shallow(<DatagridCell field={{ type: 'foo', props: {} }} />);
+        const col = wrapper.find('TableRowColumn');
+        assert.equal(col.length, 1);
+    });
+    it('should use regular col style by default', () => {
+        const wrapper = shallow(<DatagridCell field={{ type: 'foo', props: {} }} defaultStyle={{ color: 'blue' }} />);
+        const col = wrapper.find('TableRowColumn');
+        assert.deepEqual(col.at(0).prop('style'), { color: 'blue' });
+    });
+    it('should use field style to override default style', () => {
+        const wrapper = shallow(<DatagridCell field={{ type: 'foo', props: { style: { color: 'red' } } }} />);
+        const col = wrapper.find('TableRowColumn');
+        assert.deepEqual(col.at(0).prop('style'), { color: 'red' });
+    });
+});
Index: src/reducer/references/possibleValues.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/reducer/references/possibleValues.js	(revision )
+++ src/reducer/references/possibleValues.js	(revision )
@@ -0,0 +1,28 @@
+import { CRUD_GET_MATCHING_SUCCESS } from '../../actions/dataActions';
+
+const initialState = {};
+
+export default (previousState = initialState, { type, payload, meta }) => {
+    switch (type) {
+    case CRUD_GET_MATCHING_SUCCESS:
+        return {
+            ...previousState,
+            [meta.relatedTo]: payload.data.map(record => record.id),
+        };
+    default:
+        return previousState;
+    }
+};
+
+export const getPossibleReferences = (state, referenceSource, reference, selectedId) => {
+    if (!state.admin.references.possibleValues[referenceSource]) {
+        return typeof selectedId === 'undefined' || !state.admin[reference].data[selectedId] ? [] : [state.admin[reference].data[selectedId]];
+    }
+    const possibleValues = state.admin.references.possibleValues[referenceSource];
+    if (typeof selectedId !== 'undefined' && !possibleValues.includes(selectedId)) {
+        possibleValues.unshift(selectedId);
+    }
+    return possibleValues
+        .map(id => state.admin[reference].data[id])
+        .filter(r => typeof r !== 'undefined');
+};
Index: src/mui/field/NumberField.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/field/NumberField.js	(revision )
+++ src/mui/field/NumberField.js	(revision )
@@ -0,0 +1,64 @@
+import React, { PropTypes } from 'react';
+import get from 'lodash.get';
+import pure from 'recompose/pure';
+
+const hasNumberFormat = !!(typeof Intl === 'object' && Intl && typeof Intl.NumberFormat === 'function');
+
+/**
+ * Display a numeric value as a locale string.
+ *
+ * Uses Intl.NumberFormat() if available, passing the locales and options props as arguments.
+ * If Intl is not available, it outputs number as is (and ignores the locales and options props).
+ *
+ * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString
+ * @example
+ * <NumberField source="score" />
+ * // renders the record { id: 1234, score: 567 } as
+ * <span>567</span>
+ *
+ * <NumberField source="score" elStyle={{ color: 'red' }} />
+ * // renders the record { id: 1234, score: 567 } as
+ * <span style="color:red;">567</span>
+ *
+ * <NumberField source="share" options={{ style: 'percent' }} />
+ * // renders the record { id: 1234, share: 0.2545 } as
+ * <span>25%</span>
+ *
+ * <NumberField source="price" options={{ style: 'currency', currency: 'USD' }} />
+ * // renders the record { id: 1234, price: 25.99 } as
+ * <span>$25.99</span>
+ *
+ * <NumberField source="price" locales="fr-FR" options={{ style: 'currency', currency: 'USD' }} />
+ * // renders the record { id: 1234, price: 25.99 } as
+ * <span>25,99 $US</span>
+ */
+export const NumberField = ({ record, source, locales, options, elStyle }) => {
+    if (!record) return null;
+    const value = get(record, source);
+    if (value == null) return null;
+    if (!hasNumberFormat) return <span style={elStyle}>{value}</span>;
+    return <span style={elStyle}>{value.toLocaleString(locales, options)}</span>;
+};
+
+NumberField.propTypes = {
+    addLabel: PropTypes.bool,
+    elStyle: PropTypes.object,
+    label: PropTypes.string,
+    locales: PropTypes.oneOfType([
+        PropTypes.string,
+        PropTypes.arrayOf(PropTypes.string),
+    ]),
+    options: PropTypes.object,
+    record: PropTypes.object,
+    source: PropTypes.string.isRequired,
+};
+
+const PureNumberField = pure(NumberField);
+
+PureNumberField.defaultProps = {
+    addLabel: true,
+    style: { textAlign: 'right' },
+    headerStyle: { textAlign: 'right' },
+};
+
+export default PureNumberField;
Index: src/mui/list/Filter.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/list/Filter.js	(revision )
+++ src/mui/list/Filter.js	(revision )
@@ -0,0 +1,33 @@
+import React, { PropTypes } from 'react';
+import FilterForm from './FilterForm';
+import FilterButton from './FilterButton';
+
+const Filter = ({ resource, context, children, showFilter, hideFilter, displayedFilters, filterValues }) => (
+    context === 'form' ?
+        <FilterForm
+            resource={resource}
+            filters={React.Children.toArray(children)}
+            hideFilter={hideFilter}
+            displayedFilters={displayedFilters}
+            initialValues={filterValues}
+        /> :
+        <FilterButton
+            resource={resource}
+            filters={React.Children.toArray(children)}
+            showFilter={showFilter}
+            displayedFilters={displayedFilters}
+            filterValues={filterValues}
+        />
+);
+
+Filter.propTypes = {
+    children: PropTypes.node,
+    resource: PropTypes.string.isRequired,
+    context: React.PropTypes.oneOf(['form', 'button']),
+    showFilter: React.PropTypes.func,
+    hideFilter: React.PropTypes.func,
+    displayedFilters: PropTypes.object,
+    filterValues: PropTypes.object,
+};
+
+export default Filter;
Index: src/mui/list/Pagination.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/list/Pagination.js	(revision )
+++ src/mui/list/Pagination.js	(revision )
@@ -0,0 +1,158 @@
+import React, { Component, PropTypes } from 'react';
+import pure from 'recompose/pure';
+import FlatButton from 'material-ui/FlatButton';
+import IconButton from 'material-ui/IconButton';
+import ChevronLeft from 'material-ui/svg-icons/navigation/chevron-left';
+import ChevronRight from 'material-ui/svg-icons/navigation/chevron-right';
+import { Toolbar, ToolbarGroup } from 'material-ui/Toolbar';
+import { cyan500 } from 'material-ui/styles/colors'
+import compose from 'recompose/compose';
+import withWidth from 'material-ui/utils/withWidth';
+import translate from '../../i18n/translate';
+
+const styles = {
+    button: {
+        margin: '10px 0',
+    },
+    pageInfo: {
+        padding: '1.2em',
+    },
+    mobileToolbar: {
+        margin: 'auto',
+    },
+};
+
+export class Pagination extends Component {
+    range() {
+        const input = [];
+        const { page, perPage, total } = this.props;
+        if (isNaN(page)) return input;
+        const nbPages = Math.ceil(total / perPage) || 1;
+
+        // display page links around the current page
+        if (page > 2) {
+            input.push('1');
+        }
+        if (page === 4) {
+            input.push('2');
+        }
+        if (page > 4) {
+            input.push('.');
+        }
+        if (page > 1) {
+            input.push(page - 1);
+        }
+        input.push(page);
+        if (page < nbPages) {
+            input.push(page + 1);
+        }
+        if (page === (nbPages - 3)) {
+            input.push(nbPages - 1);
+        }
+        if (page < (nbPages - 3)) {
+            input.push('.');
+        }
+        if (page < (nbPages - 1)) {
+            input.push(nbPages);
+        }
+
+        return input;
+    }
+
+    getNbPages() {
+        return Math.ceil(this.props.total / this.props.perPage) || 1;
+    }
+
+    prevPage = (event) => {
+        event.stopPropagation();
+        if (this.props.page === 1) {
+            throw new Error(this.props.translate('aor.navigation.page_out_from_begin'));
+        }
+        this.props.setPage(this.props.page - 1);
+    }
+
+    nextPage = (event) => {
+        event.stopPropagation();
+        if (this.props.page > this.getNbPages()) {
+            throw new Error(this.props.translate('aor.navigation.page_out_from_end'));
+        }
+        this.props.setPage(this.props.page + 1);
+    }
+
+    gotoPage = (event) => {
+        event.stopPropagation();
+        const page = event.currentTarget.dataset.page;
+        if (page < 1 || page > this.getNbPages()) {
+            throw new Error(this.props.translate('aor.navigation.page_out_of_boundaries', { page }));
+        }
+        this.props.setPage(page);
+    }
+
+    renderPageNums() {
+        return this.range().map((pageNum, index) =>
+            (pageNum === '.') ?
+                <span key={`hyphen_${index}`} style={{ padding: '1.2em' }}>&hellip;</span> :
+                <FlatButton key={pageNum} label={pageNum} data-page={pageNum} onClick={this.gotoPage} primary={pageNum !== this.props.page} style={styles.button} />
+        );
+    }
+
+    render() {
+        const { page, perPage, total, translate, width } = this.props;
+        if (total === 0) return null;
+        const offsetEnd = Math.min(page * perPage, total);
+        const offsetBegin = Math.min((page - 1) * perPage + 1, offsetEnd);
+        const nbPages = this.getNbPages();
+
+        return width === 1 ? (
+            <Toolbar>
+                <ToolbarGroup style={styles.mobileToolbar}>
+                    {page > 1 &&
+                        <IconButton onClick={this.prevPage}>
+                            <ChevronLeft color={cyan500} />
+                        </IconButton>
+                    }
+                    <span style={styles.pageInfo}>{translate('aor.navigation.page_range_info', { offsetBegin, offsetEnd, total })}</span>
+                    {page !== nbPages &&
+                        <IconButton onClick={this.nextPage}>
+                            <ChevronRight color={cyan500} />
+                        </IconButton>
+                    }
+                </ToolbarGroup>
+            </Toolbar>
+        ) : (
+            <Toolbar>
+                <ToolbarGroup firstChild>
+                    <span style={styles.pageInfo}>{translate('aor.navigation.page_range_info', { offsetBegin, offsetEnd, total })}</span>
+                </ToolbarGroup>
+                {nbPages > 1 &&
+                    <ToolbarGroup>
+                    {page > 1 &&
+                        <FlatButton primary key="prev" label={translate('aor.navigation.prev')} icon={<ChevronLeft />} onClick={this.prevPage} style={styles.button} />
+                    }
+                    {this.renderPageNums()}
+                    {page !== nbPages &&
+                        <FlatButton primary key="next" label={translate('aor.navigation.next')} icon={<ChevronRight />} labelPosition="before" onClick={this.nextPage} style={styles.button} />
+                    }
+                </ToolbarGroup>
+                }
+            </Toolbar>
+        );
+    }
+}
+
+Pagination.propTypes = {
+    page: PropTypes.number,
+    perPage: PropTypes.number,
+    total: PropTypes.number,
+    setPage: PropTypes.func,
+    translate: PropTypes.func.isRequired,
+    width: PropTypes.number,
+};
+
+const enhance = compose(
+    pure,
+    translate,
+    withWidth(),
+);
+
+export default enhance(Pagination);
Index: src/Resource.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Resource.js	(revision )
+++ src/Resource.js	(revision )
@@ -0,0 +1,25 @@
+import React, { PropTypes } from 'react';
+import ViewListIcon from 'material-ui/svg-icons/action/view-list';
+
+const componentPropType = PropTypes.oneOfType([PropTypes.func, PropTypes.string]);
+
+const Resource = () => <span>&lt;Resource&gt; elements are for configuration only and should not be rendered</span>;
+
+Resource.propTypes = {
+    name: PropTypes.string.isRequired,
+    list: componentPropType,
+    create: componentPropType,
+    edit: componentPropType,
+    show: componentPropType,
+    remove: componentPropType,
+    icon: componentPropType,
+    options: PropTypes.object,
+    checkCredentials: PropTypes.func,
+};
+
+Resource.defaultProps = {
+    icon: ViewListIcon,
+    options: {},
+};
+
+export default Resource;
Index: src/mui/input/DisabledInput.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/input/DisabledInput.js	(revision )
+++ src/mui/input/DisabledInput.js	(revision )
@@ -0,0 +1,19 @@
+import React, { PropTypes } from 'react';
+import TextField from 'material-ui/TextField';
+import get from 'lodash.get';
+import FieldTitle from '../../util/FieldTitle';
+
+const DisabledInput = ({ label, record, resource, source }) => <TextField
+    value={get(record, source)}
+    floatingLabelText={<FieldTitle label={label} source={source} resource={resource} />}
+    disabled
+/>;
+
+DisabledInput.propTypes = {
+    label: PropTypes.string,
+    record: PropTypes.object,
+    resource: PropTypes.string,
+    source: PropTypes.string,
+};
+
+export default DisabledInput;
Index: src/reducer/resource/list/total.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/reducer/resource/list/total.js	(revision )
+++ src/reducer/resource/list/total.js	(revision )
@@ -0,0 +1,11 @@
+import { CRUD_GET_LIST_SUCCESS } from '../../../actions/dataActions';
+
+export default resource => (previousState = 0, { type, payload, meta }) => {
+    if (!meta || meta.resource !== resource) {
+        return previousState;
+    }
+    if (type === CRUD_GET_LIST_SUCCESS) {
+        return payload.total;
+    }
+    return previousState;
+};
Index: src/mui/button/CreateButton.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/button/CreateButton.js	(revision )
+++ src/mui/button/CreateButton.js	(revision )
@@ -0,0 +1,56 @@
+import React, { PropTypes } from 'react';
+import { Link } from 'react-router';
+import onlyUpdateForKeys from 'recompose/onlyUpdateForKeys';
+import FlatButton from 'material-ui/FlatButton';
+import FloatingActionButton from 'material-ui/FloatingActionButton';
+import ContentAdd from 'material-ui/svg-icons/content/add';
+import withWidth from 'material-ui/utils/withWidth';
+import compose from 'recompose/compose';
+import translate from '../../i18n/translate';
+
+const styles = {
+    floating: {
+        margin: 0,
+        top: 'auto',
+        right: 20,
+        bottom: 60,
+        left: 'auto',
+        position: 'fixed',
+    },
+    flat: {
+        overflow: 'inherit',
+    },
+};
+
+const CreateButton = ({ basePath = '', translate, label = 'aor.action.create', width }) =>
+    width === 1
+    ?
+        <FloatingActionButton
+            style={styles.floating}
+            containerElement={<Link to={`${basePath}/create`} />}
+        >
+            <ContentAdd />
+        </FloatingActionButton>
+    :
+        <FlatButton
+            primary
+            label={label && translate(label)}
+            icon={<ContentAdd />}
+            containerElement={<Link to={`${basePath}/create`} />}
+            style={styles.flat}
+        />;
+
+CreateButton.propTypes = {
+    basePath: PropTypes.string,
+    label: PropTypes.string,
+    translate: PropTypes.func.isRequired,
+    width: PropTypes.number,
+};
+
+const enhance = compose(
+    onlyUpdateForKeys(['basePath, label']),
+    withWidth(),
+    translate,
+);
+
+export default enhance(CreateButton);
Index: src/mui/list/DatagridHeaderCell.spec.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/list/DatagridHeaderCell.spec.js	(revision )
+++ src/mui/list/DatagridHeaderCell.spec.js	(revision )
@@ -0,0 +1,59 @@
+import assert from 'assert';
+import React from 'react';
+import { shallow } from 'enzyme';
+
+import { DatagridHeaderCell } from './DatagridHeaderCell';
+
+describe('<DatagridHeaderCell />', () => {
+    describe('sorting on a column', () => {
+        const defaultField = {
+            type: 'foo',
+            props: {},
+            updateSort: () => {},
+        };
+
+        it('should be enabled when field has a source', () => {
+            const wrapper = shallow((
+                <DatagridHeaderCell
+                    currentSort={{}}
+                    field={{
+                        ...defaultField,
+                        props: {
+                            source: 'title',
+                        },
+                    }}
+                />
+            ));
+
+            assert.equal(wrapper.find('FlatButton').length, 1);
+        });
+
+        it('should be disabled when field has no source', () => {
+            const wrapper = shallow((
+                <DatagridHeaderCell
+                    currentSort={{}}
+                    field={{ ...defaultField }}
+                />
+            ));
+
+            assert.equal(wrapper.find('FlatButton').length, 0);
+        });
+
+        it('should be disabled when sortable prop is explicitly set to false', () => {
+            const wrapper = shallow((
+                <DatagridHeaderCell
+                    currentSort={{}}
+                    field={{
+                        ...defaultField,
+                        props: {
+                            source: 'title',
+                            sortable: false,
+                        },
+                    }}
+                />
+            ));
+
+            assert.equal(wrapper.find('FlatButton').length, 0);
+        });
+    });
+});
Index: src/mui/field/ReferenceManyField.spec.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/field/ReferenceManyField.spec.js	(revision )
+++ src/mui/field/ReferenceManyField.spec.js	(revision )
@@ -0,0 +1,140 @@
+import React from 'react';
+import assert from 'assert';
+import { shallow } from 'enzyme';
+import { ReferenceManyField } from './ReferenceManyField';
+import TextField from './TextField';
+import SingleFieldList from '../list/SingleFieldList';
+
+describe('<ReferenceManyField />', () => {
+    it('should render a loading indicator when related records are not yet fetched', () => {
+        const wrapper = shallow(
+            <ReferenceManyField
+                resource="foo"
+                reference="bar"
+                target="foo_id"
+                basePath=""
+                crudGetManyReference={() => {}}
+            >
+                <SingleFieldList>
+                    <TextField source="title" />
+                </SingleFieldList>
+            </ReferenceManyField>
+        );
+        const ProgressElements = wrapper.find('LinearProgress');
+        assert.equal(ProgressElements.length, 1);
+        const SingleFieldListElement = wrapper.find('SingleFieldList');
+        assert.equal(SingleFieldListElement.length, 0);
+    });
+
+    it('should render a list of the child component', () => {
+        const data = {
+            1: { id: 1, title: 'hello' },
+            2: { id: 2, title: 'world' },
+        };
+        const wrapper = shallow(
+            <ReferenceManyField
+                resource="foo"
+                reference="bar"
+                target="foo_id"
+                basePath=""
+                data={data}
+                ids={[1, 2]}
+                crudGetManyReference={() => {}}
+            >
+                <SingleFieldList>
+                    <TextField source="title" />
+                </SingleFieldList>
+            </ReferenceManyField>
+        );
+        const ProgressElements = wrapper.find('LinearProgress');
+        assert.equal(ProgressElements.length, 0);
+        const SingleFieldListElement = wrapper.find('SingleFieldList');
+        assert.equal(SingleFieldListElement.length, 1);
+        assert.equal(SingleFieldListElement.at(0).prop('resource'), 'bar');
+        assert.deepEqual(SingleFieldListElement.at(0).prop('data'), data);
+        assert.deepEqual(SingleFieldListElement.at(0).prop('ids'), [1, 2]);
+    });
+
+    it('should render nothing when there are no related records', () => {
+        const wrapper = shallow(
+            <ReferenceManyField
+                resource="foo"
+                reference="bar"
+                target="foo_id"
+                basePath=""
+                data={{}}
+                ids={[]}
+                crudGetManyReference={() => {}}
+            >
+                <SingleFieldList>
+                    <TextField source="title" />
+                </SingleFieldList>
+            </ReferenceManyField>
+        );
+        const ProgressElements = wrapper.find('LinearProgress');
+        assert.equal(ProgressElements.length, 0);
+        const SingleFieldListElement = wrapper.find('SingleFieldList');
+        assert.equal(SingleFieldListElement.length, 1);
+        assert.equal(SingleFieldListElement.at(0).prop('resource'), 'bar');
+        assert.deepEqual(SingleFieldListElement.at(0).prop('data'), {});
+        assert.deepEqual(SingleFieldListElement.at(0).prop('ids'), []);
+    });
+
+    it('should support record with string identifier', () => {
+        const data = {
+            "abc-1": { id: "abc-1", title: 'hello' },
+            "abc-2": { id: "abc-2", title: 'world' },
+        };
+        const wrapper = shallow(
+            <ReferenceManyField
+                resource="foo"
+                reference="bar"
+                target="foo_id"
+                basePath=""
+                data={data}
+                ids={['abc-1', 'abc-2']}
+                crudGetManyReference={() => {}}
+            >
+                <SingleFieldList>
+                    <TextField source="title" />
+                </SingleFieldList>
+            </ReferenceManyField>
+        );
+        const ProgressElements = wrapper.find('LinearProgress');
+        assert.equal(ProgressElements.length, 0);
+        const SingleFieldListElement = wrapper.find('SingleFieldList');
+        assert.equal(SingleFieldListElement.length, 1);
+        assert.equal(SingleFieldListElement.at(0).prop('resource'), 'bar');
+        assert.deepEqual(SingleFieldListElement.at(0).prop('data'), data);
+        assert.deepEqual(SingleFieldListElement.at(0).prop('ids'), ["abc-1", "abc-2"]);
+    });
+
+    it('should support record with number identifier', () => {
+       const data = {
+           1: { id: 1, title: 'hello' },
+           2: { id: 2, title: 'world' },
+       };
+       const wrapper = shallow(
+           <ReferenceManyField
+               resource="foo"
+               reference="bar"
+               target="foo_id"
+               basePath=""
+               data={data}
+               ids={[1, 2]}
+               crudGetManyReference={() => {}}
+           >
+               <SingleFieldList>
+                   <TextField source="title" />
+               </SingleFieldList>
+           </ReferenceManyField>
+       );
+       const ProgressElements = wrapper.find('LinearProgress');
+       assert.equal(ProgressElements.length, 0);
+       const SingleFieldListElement = wrapper.find('SingleFieldList');
+       assert.equal(SingleFieldListElement.length, 1);
+       assert.equal(SingleFieldListElement.at(0).prop('resource'), 'bar');
+       assert.deepEqual(SingleFieldListElement.at(0).prop('data'), data);
+       assert.deepEqual(SingleFieldListElement.at(0).prop('ids'), [1,2]);
+   });
+});
Index: src/actions/notificationActions.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/actions/notificationActions.js	(revision )
+++ src/actions/notificationActions.js	(revision )
@@ -0,0 +1,12 @@
+export const SHOW_NOTIFICATION = 'SHOW_NOTIFICATION';
+
+export const showNotification = (text, type = 'info') => ({
+    type: SHOW_NOTIFICATION,
+    payload: { text, type },
+});
+
+export const HIDE_NOTIFICATION = 'HIDE_NOTIFICATION';
+
+export const hideNotification = () => ({
+    type: HIDE_NOTIFICATION,
+});
Index: src/mui/detail/EditActions.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/detail/EditActions.js	(revision )
+++ src/mui/detail/EditActions.js	(revision )
@@ -0,0 +1,20 @@
+import React, { PropTypes } from 'react';
+import { CardActions } from 'material-ui/Card';
+import { ListButton, ShowButton, DeleteButton, RefreshButton } from '../button';
+
+const cardActionStyle = {
+    zIndex: 2,
+    display: 'inline-block',
+    float: 'right',
+};
+
+const EditActions = ({ basePath, data, hasDelete, hasShow, refresh }) => (
+    <CardActions style={cardActionStyle}>
+        {hasShow && <ShowButton basePath={basePath} record={data} />}
+        <ListButton basePath={basePath} />
+        {hasDelete && <DeleteButton basePath={basePath} record={data} />}
+        <RefreshButton refresh={refresh} />
+    </CardActions>
+);
+
+export default EditActions;
Index: src/mui/layout/ViewTitle.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/layout/ViewTitle.js	(revision )
+++ src/mui/layout/ViewTitle.js	(revision )
@@ -0,0 +1,12 @@
+import React from 'react';
+import { CardTitle } from 'material-ui/Card';
+import withWidth from 'material-ui/utils/withWidth';
+import AppBarMobile from './AppBarMobile';
+
+const ViewTitle = ({ title, width }) => (
+    width === 1
+        ? <AppBarMobile title={title} />
+        : <CardTitle title={title} />
+);
+
+export default withWidth()(ViewTitle);
Index: src/mui/button/SaveButton.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/button/SaveButton.js	(revision )
+++ src/mui/button/SaveButton.js	(revision )
@@ -0,0 +1,58 @@
+import React, { Component, PropTypes } from 'react';
+import { connect } from 'react-redux';
+import RaisedButton from 'material-ui/RaisedButton';
+import FlatButton from 'material-ui/FlatButton';
+import ContentSave from 'material-ui/svg-icons/content/save';
+import CircularProgress from 'material-ui/CircularProgress';
+import translate from '../../i18n/translate';
+
+class SaveButton extends Component {
+
+    handleClick = (e) => {
+        if (this.props.saving) {
+            // prevent double submission
+            e.preventDefault();
+        }
+    }
+
+    render() {
+        const { saving, label = 'aor.action.save', raised = true, translate } = this.props;
+        return raised
+            ? <RaisedButton
+                type="submit"
+                label={label && translate(label)}
+                icon={saving ? <CircularProgress size={25} thickness={2} /> : <ContentSave />}
+                onClick={this.handleClick}
+                primary={!saving}
+                style={{
+                    margin: '10px 24px',
+                    position: 'relative',
+                }}
+            />
+            : <FlatButton
+                type="submit"
+                label={label && translate(label)}
+                icon={saving ? <CircularProgress size={25} thickness={2} /> : <ContentSave />}
+                onClick={this.handleClick}
+                primary={!saving}
+                style={{
+                    margin: '10px 24px',
+                    position: 'relative',
+                }}
+            />
+        ;
+    }
+}
+
+SaveButton.propTypes = {
+    label: PropTypes.string,
+    raised: PropTypes.bool,
+    saving: PropTypes.bool,
+    translate: PropTypes.func.isRequired,
+};
+
+const mapStateToProps = state => ({
+    saving: state.admin.saving,
+});
+
+export default connect(mapStateToProps)(translate(SaveButton));
Index: src/mui/detail/Edit.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/detail/Edit.js	(revision )
+++ src/mui/detail/Edit.js	(revision )
@@ -0,0 +1,156 @@
+import React, { Component, PropTypes } from 'react';
+import { connect } from 'react-redux';
+import { Card, CardTitle, CardText } from 'material-ui/Card';
+import compose from 'recompose/compose';
+import inflection from 'inflection';
+import ViewTitle from '../layout/ViewTitle';
+import Title from '../layout/Title';
+import { crudGetOne as crudGetOneAction, crudUpdate as crudUpdateAction } from '../../actions/dataActions';
+import DefaultActions from './EditActions';
+import translate from '../../i18n/translate';
+
+/**
+ * Turns a children data structure (either single child or array of children) into an array.
+ * We can't use React.Children.toArray as it loses references.
+ */
+const arrayizeChildren = children => (Array.isArray(children) ? children : [children]);
+
+export class Edit extends Component {
+    constructor(props) {
+        super(props);
+        this.state = {
+            key: 0,
+            record: props.data,
+        };
+        this.previousKey = 0;
+        this.handleSubmit = this.handleSubmit.bind(this);
+    }
+
+    componentDidMount() {
+        this.updateData();
+    }
+
+    componentWillReceiveProps(nextProps) {
+        if (this.props.data !== nextProps.data) {
+            this.setState({ record: nextProps.data }); // FIXME: erases user entry when fetch response arrives late
+            if (this.fullRefresh) {
+                this.fullRefresh = false;
+                this.setState({ key: this.state.key + 1 });
+            }
+        }
+        if (this.props.id !== nextProps.id) {
+            this.updateData(nextProps.resource, nextProps.id);
+        }
+    }
+
+    // FIXME Seems that the cloneElement in CrudRoute slices the children array, which makes this necessary to avoid rerenders
+    shouldComponentUpdate(nextProps) {
+        if (nextProps.isLoading !== this.props.isLoading) {
+            return true;
+        }
+
+        const currentChildren = arrayizeChildren(this.props.children);
+        const newChildren = arrayizeChildren(nextProps.children);
+
+        return newChildren.every((child, index) => child === currentChildren[index]);
+    }
+
+    getBasePath() {
+        const { location } = this.props;
+        return location.pathname.split('/').slice(0, -1).join('/');
+    }
+
+    updateData(resource = this.props.resource, id = this.props.id) {
+        this.props.crudGetOne(resource, id, this.getBasePath());
+    }
+
+    refresh = (event) => {
+        event.stopPropagation();
+        this.fullRefresh = true;
+        this.updateData();
+    }
+
+    handleSubmit(record) {
+        this.props.crudUpdate(this.props.resource, this.props.id, record, this.props.data, this.getBasePath());
+    }
+
+    render() {
+        const { actions = <DefaultActions />, children, data, hasDelete, hasShow, id, isLoading, resource, title, translate } = this.props;
+        const { key } = this.state;
+        const basePath = this.getBasePath();
+
+        const resourceName = translate(`resources.${resource}.name`, {
+            smart_count: 1,
+            _: inflection.humanize(inflection.singularize(resource)),
+        });
+        const defaultTitle = translate('aor.page.edit', {
+            name: `${resourceName}`,
+            id,
+            data,
+        });
+        const titleElement = data ? <Title title={title} record={data} defaultTitle={defaultTitle} /> : '';
+        // using this.previousKey instead of this.fullRefresh makes
+        // the new form mount, the old form unmount, and the new form update appear in the same frame
+        // so the form doesn't disappear while refreshing
+        const isRefreshing = key !== this.previousKey;
+        this.previousKey = key;
+
+        return (
+            <div>
+                <Card style={{ opacity: isLoading ? 0.8 : 1 }} key={key}>
+                    {actions && React.cloneElement(actions, {
+                        basePath,
+                        data,
+                        hasDelete,
+                        hasShow,
+                        refresh: this.refresh,
+                        resource,
+                    })}
+                    <ViewTitle title={titleElement} />
+                    {data && !isRefreshing && React.cloneElement(children, {
+                        onSubmit: this.handleSubmit,
+                        resource,
+                        basePath,
+                        record: data,
+                    })}
+                    {!data && <CardText>&nbsp;</CardText>}
+                </Card>
+            </div>
+        );
+    }
+}
+
+Edit.propTypes = {
+    actions: PropTypes.element,
+    children: PropTypes.element.isRequired,
+    crudGetOne: PropTypes.func.isRequired,
+    crudUpdate: PropTypes.func.isRequired,
+    data: PropTypes.object,
+    hasDelete: PropTypes.bool,
+    hasShow: PropTypes.bool,
+    id: PropTypes.string.isRequired,
+    isLoading: PropTypes.bool.isRequired,
+    location: PropTypes.object.isRequired,
+    params: PropTypes.object.isRequired,
+    resource: PropTypes.string.isRequired,
+    title: PropTypes.any,
+    translate: PropTypes.func,
+};
+
+function mapStateToProps(state, props) {
+    return {
+        id: props.params.id,
+        data: state.admin[props.resource].data[props.params.id],
+        isLoading: state.admin.loading > 0,
+    };
+}
+
+const enhance = compose(
+    connect(
+        mapStateToProps,
+        { crudGetOne: crudGetOneAction, crudUpdate: crudUpdateAction },
+    ),
+    translate,
+);
+
+export default enhance(Edit);
Index: src/mui/list/Filter.spec.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/list/Filter.spec.js	(revision )
+++ src/mui/list/Filter.spec.js	(revision )
@@ -0,0 +1,26 @@
+import assert from 'assert';
+import React from 'react';
+import { shallow } from 'enzyme';
+
+import Filter from './Filter';
+
+describe('<Filter />', () => {
+    describe('With form context', () => {
+        const defaultProps = {
+            context: 'form',
+            resource: 'posts',
+        };
+
+        it('should render a redux <FilterForm /> component', () => {
+            const wrapper = shallow(<Filter {...defaultProps} />);
+            const form = wrapper.find('getContext(ReduxForm)');
+            assert.equal(form.length, 1);
+        });
+
+        it('should pass `filterValues` as `initialValues` props', () => {
+            const wrapper = shallow(<Filter {...defaultProps} filterValues={{ q: 'Lorem' }} />);
+            const form = wrapper.find('getContext(ReduxForm)').first();
+            assert.deepEqual(form.prop('initialValues'), { q: 'Lorem' });
+        });
+    });
+});
Index: src/reducer/locale.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/reducer/locale.js	(revision )
+++ src/reducer/locale.js	(revision )
@@ -0,0 +1,13 @@
+import { DEFAULT_LOCALE } from '../i18n/index';
+import { CHANGE_LOCALE } from '../actions/localeActions';
+
+export default (initialLocale = DEFAULT_LOCALE) => (
+    (previousLocale = initialLocale, { type, payload }) => {
+        switch (type) {
+        case CHANGE_LOCALE:
+            return payload;
+        default:
+            return previousLocale;
+        }
+    }
+);
Index: src/mui/field/TextField.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/field/TextField.js	(revision )
+++ src/mui/field/TextField.js	(revision )
@@ -0,0 +1,23 @@
+import React, { PropTypes } from 'react';
+import get from 'lodash.get';
+import pure from 'recompose/pure';
+
+const TextField = ({ source, record = {}, elStyle }) => {
+    return <span style={elStyle}>{get(record, source)}</span>;
+}
+
+TextField.propTypes = {
+    addLabel: PropTypes.bool,
+    elStyle: PropTypes.object,
+    label: PropTypes.string,
+    record: PropTypes.object,
+    source: PropTypes.string.isRequired,
+};
+
+const PureTextField = pure(TextField);
+
+PureTextField.defaultProps = {
+    addLabel: true,
+};
+
+export default PureTextField;
Index: src/sideEffect/saga/crudSaga.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sideEffect/saga/crudSaga.js	(revision )
+++ src/sideEffect/saga/crudSaga.js	(revision )
@@ -0,0 +1,16 @@
+import auth from './auth';
+import crudFetch from './crudFetch';
+import crudResponse from './crudResponse';
+import referenceFetch from './referenceFetch';
+
+/**
+ * @param {Object} restClient A REST object with two methods: fetch() and convertResponse()
+ */
+export default restClient => function* crudSaga() {
+    yield [
+        auth(),
+        crudFetch(restClient)(),
+        crudResponse(),
+        referenceFetch(),
+    ];
+};
Index: src/mui/form/getDefaultValues.spec.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/form/getDefaultValues.spec.js	(revision )
+++ src/mui/form/getDefaultValues.spec.js	(revision )
@@ -0,0 +1,23 @@
+import { createElement } from 'react';
+import assert from 'assert';
+import getDefaultValues from './getDefaultValues';
+
+describe('getDefaultValues', () => {
+    it('should get defaults values from form correctly', () => {
+        const someTitle = 'some value';
+        const formElements = {
+            children: [
+                createElement('input', { defaultValue: someTitle, source: 'title' }),
+                createElement('input', { defaultValue: someTitle, source: 'nested.title' }),
+            ],
+        };
+        const expectedResult = {
+            title: someTitle,
+            nested: {
+                title: someTitle,
+            },
+        };
+        const defaultValuesResult = getDefaultValues({}, formElements);
+        assert.deepEqual(defaultValuesResult, expectedResult);
+    });
+});
Index: src/mui/input/SelectInput.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/input/SelectInput.js	(revision )
+++ src/mui/input/SelectInput.js	(revision )
@@ -0,0 +1,112 @@
+import React, { Component, PropTypes } from 'react';
+import SelectField from 'material-ui/SelectField';
+import MenuItem from 'material-ui/MenuItem';
+
+import FieldTitle from '../../util/FieldTitle';
+
+/**
+ * An Input component for a select box, using an array of objects for the options
+ *
+ * Pass possible options as an array of objects in the 'choices' attribute.
+ *
+ * By default, the options are built from:
+ *  - the 'id' property as the option value,
+ *  - the 'name' property an the option text
+ * @example
+ * const choices = [
+ *    { id: 'M', name: 'Male' },
+ *    { id: 'F', name: 'Female' },
+ * ];
+ * <SelectInput source="gender" choices={choices} />
+ *
+ * You can also customize the properties to use for the option name and value,
+ * thanks to the 'optionText' and 'optionValue' attributes.
+ * @example
+ * const choices = [
+ *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },
+ *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },
+ * ];
+ * <SelectInput source="author_id" choices={choices} optionText="full_name" optionValue="_id" />
+ *
+ * `optionText` also accepts a function, so you can shape the option text at will:
+ * @example
+ * const choices = [
+ *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },
+ *    { id: 456, first_name: 'Jane', last_name: 'Austen' },
+ * ];
+ * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;
+ * <SelectInput source="author_id" choices={choices} optionText={optionRenderer} />
+ *
+ * `optionText` also accepts a React Element, that will be cloned and receive
+ * the related choice as the `record` prop. You can use Field components there.
+ * @example
+ * const choices = [
+ *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },
+ *    { id: 456, first_name: 'Jane', last_name: 'Austen' },
+ * ];
+ * const FullNameField = ({ record }) => <span>{record.first_name} {record.last_name}</span>;
+ * <SelectInput source="gender" choices={choices} optionText={<FullNameField />}/>
+ *
+ * The object passed as `options` props is passed to the material-ui <SelectField> component
+ */
+class SelectInput extends Component {
+    handleChange = (event, index, value) => this.props.input.onChange(value);
+
+    render() {
+        const { allowEmpty, input, label, choices, optionText, optionValue, options, source, elStyle, meta: { touched, error }, resource } = this.props;
+        const option = React.isValidElement(optionText) ? // eslint-disable-line no-nested-ternary
+            choice => React.cloneElement(optionText, { record: choice }) :
+            (typeof optionText === 'function' ?
+                optionText :
+                choice => choice[optionText]
+            );
+        return (
+            <SelectField
+                value={input.value}
+                floatingLabelText={<FieldTitle label={label} source={source} resource={resource} />}
+                onChange={this.handleChange}
+                autoWidth
+                style={elStyle}
+                errorText={touched && error}
+                {...options}
+            >
+                {allowEmpty &&
+                    <MenuItem value={null} primaryText="" />
+                }
+                {choices.map(choice =>
+                    <MenuItem key={choice[optionValue]} primaryText={option(choice)} value={choice[optionValue]} />
+                )}
+            </SelectField>
+        );
+    }
+}
+
+SelectInput.propTypes = {
+    addField: PropTypes.bool.isRequired,
+    allowEmpty: PropTypes.bool.isRequired,
+    choices: PropTypes.arrayOf(PropTypes.object),
+    elStyle: PropTypes.object,
+    input: PropTypes.object,
+    label: PropTypes.string,
+    meta: PropTypes.object,
+    options: PropTypes.object,
+    optionText: PropTypes.oneOfType([
+        PropTypes.string,
+        PropTypes.func,
+        PropTypes.element,
+    ]).isRequired,
+    optionValue: PropTypes.string.isRequired,
+    resource: PropTypes.string,
+    source: PropTypes.string,
+};
+
+SelectInput.defaultProps = {
+    addField: true,
+    allowEmpty: false,
+    choices: [],
+    options: {},
+    optionText: 'name',
+    optionValue: 'id',
+};
+
+export default SelectInput;
Index: src/mui/field/ReferenceManyField.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/field/ReferenceManyField.js	(revision )
+++ src/mui/field/ReferenceManyField.js	(revision )
@@ -0,0 +1,135 @@
+import React, { Component, PropTypes } from 'react';
+import { connect } from 'react-redux';
+import LinearProgress from 'material-ui/LinearProgress';
+import { crudGetManyReference as crudGetManyReferenceAction } from '../../actions/dataActions';
+import { getIds, getReferences, nameRelatedTo } from '../../reducer/references/oneToMany';
+
+/**
+ * Render related records to the current one.
+ *
+ * You must define the fields to be passed to the iterator component as children.
+ *
+ * @example Display all the comments of the current post as a datagrid
+ * <ReferenceManyField reference="comments" target="post_id">
+ *     <Datagrid>
+ *         <TextField source="id" />
+ *         <TextField source="body" />
+ *         <DateField source="created_at" />
+ *         <EditButton />
+ *     </Datagrid>
+ * </ReferenceManyField>
+ *
+ * @example Display all the books by the current author, only the title
+ * <ReferenceManyField reference="books" target="author_id">
+ *     <SingleFieldList>
+ *         <ChipField source="title" />
+ *     </SingleFieldList>
+ * </ReferenceManyField>
+ *
+ * By default, restricts the possible values to 25. You can extend this limit
+ * by setting the `perPage` prop.
+ *
+ * @example
+ * <ReferenceManyField perPage={10} reference="comments" target="post_id">
+ *    ...
+ * </ReferenceManyField>
+ *
+ * By default, orders the possible values by id desc. You can change this order
+ * by setting the `sort` prop (an object with `field` and `order` properties).
+ *
+ * @example
+ * <ReferenceManyField sort={{ field: 'created_at', order: 'DESC' }} reference="comments" target="post_id">
+ *    ...
+ * </ReferenceManyField>
+ *
+ * Also, you can filter the query used to populate the possible values. Use the
+ * `filter` prop for that.
+ *
+ * @example
+ * <ReferenceManyField filter={{ is_published: true }} reference="comments" target="post_id">
+ *    ...
+ * </ReferenceManyField>
+ */
+export class ReferenceManyField extends Component {
+    componentDidMount() {
+        this.fetchReferences();
+    }
+
+    componentWillReceiveProps(nextProps) {
+        if (this.props.record.id !== nextProps.record.id) {
+            this.fetchReferences(nextProps);
+        }
+    }
+
+    fetchReferences({ reference, record, resource, target, perPage, sort, filter } = this.props) {
+        const { crudGetManyReference } = this.props;
+        const pagination = { page: 1, perPage };
+        const relatedTo = nameRelatedTo(reference, record.id, resource, target);
+        crudGetManyReference(reference, target, record.id, relatedTo, pagination, sort, filter);
+    }
+
+    render() {
+        const { resource, reference, data, ids, children, basePath } = this.props;
+        if (React.Children.count(children) !== 1) {
+            throw new Error('<ReferenceManyField> only accepts a single child (like <Datagrid>)');
+        }
+        if (typeof ids === 'undefined') {
+            return <LinearProgress style={{ marginTop: '1em' }} />;
+        }
+        const referenceBasePath = basePath.replace(resource, reference); // FIXME obviously very weak
+        return React.cloneElement(children, {
+            resource: reference,
+            ids,
+            data,
+            basePath: referenceBasePath,
+            currentSort: {},
+        });
+    }
+}
+
+ReferenceManyField.propTypes = {
+    addLabel: PropTypes.bool,
+    basePath: PropTypes.string.isRequired,
+    children: PropTypes.element.isRequired,
+    crudGetManyReference: PropTypes.func.isRequired,
+    filter: PropTypes.object,
+    ids: PropTypes.array,
+    label: PropTypes.string,
+    perPage: PropTypes.number,
+    record: PropTypes.object,
+    reference: PropTypes.string.isRequired,
+    data: PropTypes.object,
+    resource: PropTypes.string.isRequired,
+    sort: PropTypes.shape({
+        field: PropTypes.string,
+        order: PropTypes.oneOf(['ASC', 'DESC']),
+    }),
+    source: PropTypes.string.isRequired,
+    target: PropTypes.string.isRequired,
+};
+
+ReferenceManyField.defaultProps = {
+    filter: {},
+    perPage: 25,
+    sort: { field: 'id', order: 'DESC' },
+    source: '',
+};
+
+function mapStateToProps(state, props) {
+    const relatedTo = nameRelatedTo(props.reference, props.record.id, props.resource, props.target);
+    return {
+        data: getReferences(state, props.reference, relatedTo),
+        ids: getIds(state, relatedTo),
+    };
+}
+
+const ConnectedReferenceManyField = connect(mapStateToProps, {
+    crudGetManyReference: crudGetManyReferenceAction,
+})(ReferenceManyField);
+
+ConnectedReferenceManyField.defaultProps = {
+    addLabel: true,
+    source: '',
+};
+
+export default ConnectedReferenceManyField;
Index: src/mui/layout/Notification.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/layout/Notification.js	(revision )
+++ src/mui/layout/Notification.js	(revision )
@@ -0,0 +1,70 @@
+import React, { PropTypes } from 'react';
+import { connect } from 'react-redux';
+import Snackbar from 'material-ui/Snackbar';
+import { hideNotification as hideNotificationAction } from '../../actions/notificationActions' ;
+import translate from '../../i18n/translate';
+
+function getStyles(context) {
+    if (!context) return { primary1Color: '#00bcd4', accent1Color: '#ff4081' };
+    const {
+      muiTheme: {
+        baseTheme: {
+          palette: {
+              primary1Color,
+              accent1Color,
+          },
+        },
+      },
+    } = context;
+    return { primary1Color, accent1Color };
+}
+
+class Notification extends React.Component {
+    handleRequestClose = () => {
+        this.props.hideNotification();
+    };
+
+    render() {
+        const style = {};
+        const { primary1Color, accent1Color } = getStyles(this.context);
+        const { type, translate, message } = this.props;
+        if (type === 'warning') {
+            style.backgroundColor = accent1Color;
+        }
+        if (type === 'confirm') {
+            style.backgroundColor = primary1Color;
+        }
+        return (<Snackbar
+            open={!!message}
+            message={!!message && translate(message)}
+            autoHideDuration={4000}
+            onRequestClose={this.handleRequestClose}
+            bodyStyle={style}
+        />);
+    }
+}
+
+Notification.propTypes = {
+    message: PropTypes.string,
+    type: PropTypes.string.isRequired,
+    hideNotification: PropTypes.func.isRequired,
+    translate: PropTypes.func.isRequired,
+};
+
+Notification.defaultProps = {
+    type: 'info',
+};
+
+Notification.contextTypes = {
+    muiTheme: PropTypes.object.isRequired,
+};
+
+const mapStateToProps = state => ({
+    message: state.admin.notification.text,
+    type: state.admin.notification.type,
+});
+
+export default translate(connect(
+  mapStateToProps,
+  { hideNotification: hideNotificationAction },
+)(Notification));
Index: src/mui/field/BooleanField.spec.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/field/BooleanField.spec.js	(revision )
+++ src/mui/field/BooleanField.spec.js	(revision )
@@ -0,0 +1,31 @@
+import React from 'react';
+import assert from 'assert';
+import { shallow } from 'enzyme';
+import { BooleanField } from './BooleanField';
+
+describe('<BooleanField />', () => {
+    it('should display tick if value is true', () => assert.ok(
+        shallow(<BooleanField record={{ published: true }} source="published" />)
+        .is('ActionDone')
+    ));
+
+    it('should display cross if value is false', () => assert.ok(
+        shallow(<BooleanField record={{ published: false }} source="published" />)
+        .is('ContentClear')
+    ));
+
+    it('should not display anything if value is null', () => assert.ok(
+        shallow(<BooleanField record={{ published: null }} source="published" />)
+        .is('span')
+    ));
+
+    it('should use custom styles passed as an elStyle prop', () => assert.deepEqual(
+        shallow(<BooleanField record={{ foo: true }} source="foo" elStyle={{ margin: 1 }} />).prop('style'),
+        { margin: 1 },
+    ));
+
+    it('should handle deep fields', () => assert.ok(
+        shallow(<BooleanField record={{ foo: { bar: true } }} source="foo.bar" />)
+        .is('ActionDone')
+    ));
+});
Index: src/reducer/ui.spec.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/reducer/ui.spec.js	(revision )
+++ src/reducer/ui.spec.js	(revision )
@@ -0,0 +1,19 @@
+import assert from 'assert';
+import { toggleSidebar, setSidebarVisibility } from '../actions/uiActions';
+import reducer from './ui';
+
+describe('ui reducer', () => {
+    it('should return hidden sidebar by default', () => {
+        assert.deepEqual({ sidebarOpen: false }, reducer(undefined, {}));
+    });
+    it('should toggle sidebar visibility upon TOGGLE_SIDEBAR', () => {
+        assert.deepEqual({ sidebarOpen: false }, reducer({ sidebarOpen: true }, toggleSidebar()));
+        assert.deepEqual({ sidebarOpen: true }, reducer({ sidebarOpen: false }, toggleSidebar()));
+    });
+    it('should set sidebar visibility upon SET_SIDEBAR_VISIBILITY', () => {
+        assert.deepEqual({ sidebarOpen: false }, reducer({ sidebarOpen: true }, setSidebarVisibility(false)));
+        assert.deepEqual({ sidebarOpen: true }, reducer({ sidebarOpen: true }, setSidebarVisibility(true)));
+        assert.deepEqual({ sidebarOpen: false }, reducer({ sidebarOpen: false }, setSidebarVisibility(false)));
+        assert.deepEqual({ sidebarOpen: true }, reducer({ sidebarOpen: false }, setSidebarVisibility(true)));
+    });
+});
Index: src/mui/field/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/field/index.js	(revision )
+++ src/mui/field/index.js	(revision )
@@ -0,0 +1,12 @@
+export BooleanField from './BooleanField';
+export ChipField from './ChipField';
+export DateField from './DateField';
+export EmailField from './EmailField';
+export ImageField from './ImageField';
+export FunctionField from './FunctionField';
+export NumberField from './NumberField';
+export ReferenceField from './ReferenceField';
+export ReferenceManyField from './ReferenceManyField';
+export RichTextField from './RichTextField';
+export TextField from './TextField';
+export UrlField from './UrlField';
Index: src/mui/list/FilterButton.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/list/FilterButton.js	(revision )
+++ src/mui/list/FilterButton.js	(revision )
@@ -0,0 +1,96 @@
+import React, { Component, PropTypes } from 'react';
+import FlatButton from 'material-ui/FlatButton';
+import Popover from 'material-ui/Popover';
+import Menu from 'material-ui/Menu';
+import MenuItem from 'material-ui/MenuItem';
+import ContentFilter from 'material-ui/svg-icons/content/filter-list';
+import FieldTitle from '../../util/FieldTitle';
+import translate from '../../i18n/translate';
+
+export class FilterButton extends Component {
+    constructor(props) {
+        super(props);
+        this.handleShow = this.handleShow.bind(this);
+        this.state = {
+            open: false,
+        };
+        this.handleTouchTap = this.handleTouchTap.bind(this);
+        this.handleRequestClose = this.handleRequestClose.bind(this);
+        this.handleShow = this.handleShow.bind(this);
+    }
+
+    getHiddenFilters() {
+        const { filters, displayedFilters, filterValues } = this.props;
+        return filters
+            .filter(filterElement =>
+                !filterElement.props.alwaysOn &&
+                !displayedFilters[filterElement.props.source] &&
+                !filterValues[filterElement.props.source]
+            );
+    }
+
+    handleTouchTap(event) {
+        // This prevents ghost click.
+        event.preventDefault();
+
+        this.setState({
+            open: true,
+            anchorEl: event.currentTarget,
+        });
+    }
+
+    handleRequestClose() {
+        this.setState({
+            open: false,
+        });
+    }
+
+    handleShow(event) {
+        const { key, defaultValue } = event.currentTarget.dataset;
+        this.props.showFilter(key, defaultValue);
+        this.setState({
+            open: false,
+        });
+    }
+
+    render() {
+        const hiddenFilters = this.getHiddenFilters();
+        const { resource } = this.props;
+        const { open, anchorEl } = this.state;
+
+        return (hiddenFilters.length > 0 && <div style={{ display: 'inline-block' }}>
+            <FlatButton primary label={this.props.translate('aor.action.add_filter')} icon={<ContentFilter />} onTouchTap={this.handleTouchTap} />
+            <Popover
+                open={open}
+                anchorEl={anchorEl}
+                anchorOrigin={{ horizontal: 'left', vertical: 'bottom' }}
+                targetOrigin={{ horizontal: 'left', vertical: 'top' }}
+                onRequestClose={this.handleRequestClose}
+            >
+                <Menu>
+                    {hiddenFilters.map(filterElement =>
+                        <MenuItem
+                            data-key={filterElement.props.source}
+                            data-default-value={filterElement.props.defaultValue}
+                            key={filterElement.props.source}
+                            primaryText={<FieldTitle label={filterElement.props.label} source={filterElement.props.source} resource={resource} />}
+                            onTouchTap={this.handleShow}
+                        />
+                    )}
+                </Menu>
+            </Popover>
+        </div>);
+    }
+}
+
+FilterButton.propTypes = {
+    resource: PropTypes.string.isRequired,
+    filters: PropTypes.arrayOf(PropTypes.node).isRequired,
+    displayedFilters: PropTypes.object.isRequired,
+    filterValues: PropTypes.object.isRequired,
+    resource: PropTypes.string,
+    showFilter: PropTypes.func.isRequired,
+    translate: PropTypes.func.isRequired,
+};
+
+export default translate(FilterButton);
Index: src/mui/input/ReferenceInput.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/input/ReferenceInput.js	(revision )
+++ src/mui/input/ReferenceInput.js	(revision )
@@ -0,0 +1,219 @@
+import React, { Component, PropTypes } from 'react';
+import { connect } from 'react-redux';
+import debounce from 'lodash.debounce';
+import Labeled from './Labeled';
+import { crudGetOne as crudGetOneAction, crudGetMatching as crudGetMatchingAction } from '../../actions/dataActions';
+import { getPossibleReferences } from '../../reducer/references/possibleValues';
+
+const referenceSource = (resource, source) => `${resource}@${source}`;
+const noFilter = () => true;
+
+/**
+ * An Input component for choosing a reference record. Useful for foreign keys.
+ *
+ * This component fetches the possible values in the reference resource
+ * (using the `CRUD_GET_MATCHING` REST method), then delegates rendering
+ * to a subcomponent, to which it passes the possible choices
+ * as the `choices` attribute.
+ *
+ * Use it with a selector component as child, like `<AutocompleteInput>`,
+ * `<SelectInput>`, or `<RadioButtonGroupInput>`.
+ *
+ * @example
+ * export const CommentEdit = (props) => (
+ *     <Edit {...props}>
+ *         <SimpleForm>
+ *             <ReferenceInput label="Post" source="post_id" reference="posts">
+ *                 <AutocompleteInput optionText="title" />
+ *             </ReferenceInput>
+ *         </SimpleForm>
+ *     </Edit>
+ * );
+ *
+ * @example
+ * export const CommentEdit = (props) => (
+ *     <Edit {...props}>
+ *         <SimpleForm>
+ *             <ReferenceInput label="Post" source="post_id" reference="posts">
+ *                 <SelectInput optionText="title" />
+ *             </ReferenceInput>
+ *         </SimpleForm>
+ *     </Edit>
+ * );
+ *
+ * By default, restricts the possible values to 25. You can extend this limit
+ * by setting the `perPage` prop.
+ *
+ * @example
+ * <ReferenceInput
+ *      source="post_id"
+ *      reference="posts"
+ *      perPage={100}>
+ *     <SelectInput optionText="title" />
+ * </ReferenceInput>
+ *
+ * By default, orders the possible values by id desc. You can change this order
+ * by setting the `sort` prop (an object with `field` and `order` properties).
+ *
+ * @example
+ * <ReferenceInput
+ *      source="post_id"
+ *      reference="posts"
+ *      sort={{ field: 'title', order: 'ASC' }}>
+ *     <SelectInput optionText="title" />
+ * </ReferenceInput>
+ *
+ * Also, you can filter the query used to populate the possible values. Use the
+ * `filter` prop for that.
+ *
+ * @example
+ * <ReferenceInput
+ *      source="post_id"
+ *      reference="posts"
+ *      filter={{ is_published: true }}>
+ *     <SelectInput optionText="title" />
+ * </ReferenceInput>
+ *
+ * The enclosed component may filter results. ReferenceInput passes a `setFilter`
+ * function as prop to its child component. It uses the value to create a filter
+ * for the query - by default { q: [searchText] }. You can customize the mapping
+ * searchText => searchQuery by setting a custom `filterToQuery` function prop:
+ *
+ * @example
+ * <ReferenceInput
+ *      source="post_id"
+ *      reference="posts"
+ *      filterToQuery={searchText => ({ title: searchText })}>
+ *     <SelectInput optionText="title" />
+ * </ReferenceInput>
+ */
+export class ReferenceInput extends Component {
+    constructor(props) {
+        super(props);
+        const { perPage, sort, filter } = props;
+        // stored as a property rather than state because we don't want redraw of async updates
+        this.params = { pagination: { page: 1, perPage }, sort, filter };
+        this.debouncedSetFilter = debounce(this.setFilter.bind(this), 500);
+    }
+
+    componentDidMount() {
+        this.fetchReferenceAndOptions();
+    }
+
+    componentWillReceiveProps(nextProps) {
+        if (this.props.record.id !== nextProps.record.id) {
+            this.fetchReferenceAndOptions(nextProps);
+        }
+    }
+
+    setFilter = (filter) => {
+        if (filter !== this.params.filter) {
+            this.params.filter = this.props.filterToQuery(filter);
+            this.fetchReferenceAndOptions();
+        }
+    }
+
+    setPagination = (pagination) => {
+        if (pagination !== this.param.pagination) {
+            this.param.pagination = pagination;
+            this.fetchReferenceAndOptions();
+        }
+    }
+
+    setSort = (sort) => {
+        if (sort !== this.params.sort) {
+            this.params.sort = sort;
+            this.fetchReferenceAndOptions();
+        }
+    }
+
+    fetchReferenceAndOptions({ input, reference, source, resource } = this.props) {
+        const { pagination, sort, filter } = this.params;
+        const id = input.value;
+        if (id) {
+            this.props.crudGetOne(reference, id, null, false);
+        }
+        this.props.crudGetMatching(reference, referenceSource(resource, source), pagination, sort, filter);
+    }
+
+    render() {
+        const { input, resource, label, source, reference, referenceRecord, allowEmpty, matchingReferences, basePath, onChange, children, meta } = this.props;
+        if (!referenceRecord && !allowEmpty) {
+            return <Labeled
+                label={typeof label === 'undefined' ? `resources.${resource}.fields.${source}` : label}
+                source={source}
+                resource={resource}
+            />;
+        }
+
+        return React.cloneElement(children, {
+            allowEmpty,
+            input,
+            label: typeof label === 'undefined' ? `resources.${resource}.fields.${source}` : label,
+            resource,
+            meta,
+            source,
+            choices: matchingReferences,
+            basePath,
+            onChange,
+            filter: noFilter, // for AutocompleteInput
+            setFilter: this.debouncedSetFilter,
+            setPagination: this.setPagination,
+            setSort: this.setSort,
+        });
+    }
+}
+
+ReferenceInput.propTypes = {
+    addField: PropTypes.bool.isRequired,
+    allowEmpty: PropTypes.bool.isRequired,
+    basePath: PropTypes.string,
+    children: PropTypes.element.isRequired,
+    crudGetMatching: PropTypes.func.isRequired,
+    crudGetOne: PropTypes.func.isRequired,
+    filter: PropTypes.object,
+    filterToQuery: PropTypes.func.isRequired,
+    input: PropTypes.object.isRequired,
+    label: PropTypes.string,
+    matchingReferences: PropTypes.array,
+    meta: PropTypes.object,
+    onChange: PropTypes.func,
+    perPage: PropTypes.number,
+    reference: PropTypes.string.isRequired,
+    referenceRecord: PropTypes.object,
+    resource: PropTypes.string.isRequired,
+    sort: PropTypes.shape({
+        field: PropTypes.string,
+        order: PropTypes.oneOf(['ASC', 'DESC']),
+    }),
+    source: PropTypes.string,
+};
+
+ReferenceInput.defaultProps = {
+    allowEmpty: false,
+    filter: {},
+    filterToQuery: searchText => ({ q: searchText }),
+    matchingReferences: [],
+    perPage: 25,
+    sort: { field: 'id', order: 'DESC' },
+    referenceRecord: null,
+};
+
+function mapStateToProps(state, props) {
+    const referenceId = props.input.value;
+    return {
+        referenceRecord: state.admin[props.reference].data[referenceId],
+        matchingReferences: getPossibleReferences(state, referenceSource(props.resource, props.source), props.reference, referenceId),
+    };
+}
+
+const ConnectedReferenceInput = connect(mapStateToProps, {
+    crudGetOne: crudGetOneAction,
+    crudGetMatching: crudGetMatchingAction,
+})(ReferenceInput);
+
+ConnectedReferenceInput.defaultProps = {
+    addField: true,
+};
+
+export default ConnectedReferenceInput;
Index: src/mui/layout/DashboardMenuItem.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/layout/DashboardMenuItem.js	(revision )
+++ src/mui/layout/DashboardMenuItem.js	(revision )
@@ -0,0 +1,21 @@
+import React, { PropTypes } from 'react';
+import MenuItem from 'material-ui/MenuItem';
+import DashboardIcon from 'material-ui/svg-icons/action/dashboard';
+import { Link } from 'react-router';
+import translate from '../../i18n/translate';
+
+const DashboardMenuItem = ({ onTouchTap, translate }) => (
+    <MenuItem
+        containerElement={<Link to="/" />}
+        primaryText={translate('aor.page.dashboard')}
+        leftIcon={<DashboardIcon />}
+        onTouchTap={onTouchTap}
+    />
+);
+
+DashboardMenuItem.propTypes = {
+    onTouchTap: PropTypes.func,
+    translate: PropTypes.func.isRequired,
+};
+
+export default translate(DashboardMenuItem);
Index: src/reducer/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/reducer/index.js	(revision )
+++ src/reducer/index.js	(revision )
@@ -0,0 +1,22 @@
+import { combineReducers } from 'redux';
+import resourceReducer from './resource';
+import loading from './loading';
+import notification from './notification';
+import references from './references';
+import saving from './saving';
+import ui from './ui';
+
+export default (resources) => {
+    const resourceReducers = {};
+    resources.forEach((resource) => {
+        resourceReducers[resource.name] = resourceReducer(resource.name, resource.options);
+    });
+    return combineReducers({
+        ...resourceReducers,
+        loading,
+        notification,
+        references,
+        saving,
+        ui,
+    });
+};
Index: src/mui/field/DateField.spec.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/field/DateField.spec.js	(revision )
+++ src/mui/field/DateField.spec.js	(revision )
@@ -0,0 +1,51 @@
+import React from 'react';
+import assert from 'assert';
+import { shallow } from 'enzyme';
+import { DateField } from './DateField';
+
+describe('<DateField />', () => {
+    it('should return null when the record is not set', () => assert.equal(
+        shallow(<DateField source="foo" />).html(),
+        null,
+    ));
+
+    it('should return null when the record has no value for the source', () => assert.equal(
+        shallow(<DateField record={{}} source="foo" />).html(),
+        null,
+    ));
+
+    it('should render a date', () => assert.equal(
+        shallow(<DateField record={{ foo: new Date('2017-04-23') }} source="foo" locales="en-US" />).html(),
+        '<span>4/23/2017</span>',
+    ));
+
+    it('should render a date and time when the showtime prop is passed', () => assert.equal(
+        shallow(<DateField record={{ foo: new Date('2017-04-23 23:05') }} showTime source="foo" locales="en-US" />).html(),
+        '<span>4/23/2017, 11:05:00 PM</span>',
+    ));
+
+    it('should pass the options prop to Intl.DateTimeFormat', () => assert.equal(
+        shallow(<DateField record={{ foo: new Date('2017-04-23') }} source="foo" locales="en-US" options={{
+            weekday: 'long',
+            year: 'numeric',
+            month: 'long',
+            day: 'numeric',
+        }} />).html(),
+        '<span>Sunday, April 23, 2017</span>',
+    ));
+
+    it('should use the locales props as an argument to Intl.DateTimeFormat', () => assert.equal(
+        shallow(<DateField record={{ foo: new Date('2017-04-23') }} source="foo" locales="fr-FR" />).html(),
+        '<span>23/04/2017</span>',
+    ));
+
+    it('should use custom styles passed as an elStyle prop', () => assert.equal(
+        shallow(<DateField record={{ foo: new Date('01/01/2016') }} source="foo" locales="en-US" elStyle={{ margin: 1 }} />).html(),
+        '<span style="margin:1px;">1/1/2016</span>',
+    ));
+
+    it('should handle deep fields', () => assert.equal(
+        shallow(<DateField record={{ foo: { bar: new Date('01/01/2016') } }} source="foo.bar" locales="en-US" />).html(),
+        '<span>1/1/2016</span>',
+    ));
+});
Index: src/mui/field/EmailField.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/field/EmailField.js	(revision )
+++ src/mui/field/EmailField.js	(revision )
@@ -0,0 +1,22 @@
+import React, { PropTypes } from 'react';
+import get from 'lodash.get';
+import pure from 'recompose/pure';
+
+const EmailField = ({ source, record = {}, elStyle }) =>
+    <a style={elStyle} href={`mailto:${get(record, source)}`}>{get(record, source)}</a>;
+
+EmailField.propTypes = {
+    addLabel: PropTypes.bool,
+    elStyle: PropTypes.object,
+    label: PropTypes.string,
+    record: PropTypes.object,
+    source: PropTypes.string.isRequired,
+};
+
+const PureEmailField = pure(EmailField);
+
+PureEmailField.defaultProps = {
+    addLabel: true,
+};
+
+export default PureEmailField;
Index: src/mui/input/DateInput.spec.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/input/DateInput.spec.js	(revision )
+++ src/mui/input/DateInput.spec.js	(revision )
@@ -0,0 +1,70 @@
+import assert from 'assert';
+import { shallow } from 'enzyme';
+import React from 'react';
+import sinon from 'sinon';
+
+import DateInput, { datify } from './DateInput';
+
+describe('DateInput .datify', () => {
+    it('should return null if there is no input', () => {
+        assert.equal(datify(), null);
+        assert.equal(datify(null), null);
+        assert.equal(datify(''), null);
+    });
+
+    it('should throw an error if given input is not a recognizable date', () => {
+        try {
+            datify('Hello world');
+        } catch (e) {
+            return;
+        }
+
+        assert.fail();
+    });
+
+    it('should return a date Object whichever non-null input is given', () => {
+        assert.deepEqual(datify(new Date('2010-05-01')), new Date('2010-05-01'));
+        assert.deepEqual(datify('2010-05-01'), new Date('2010-05-01'));
+    });
+});
+
+describe('<DateInput />', () => {
+    it('should render a localized <DatePicker />', () => {
+        const input = { value: null };
+        const wrapper = shallow(<DateInput source="foo" meta={{}} input={input} options={{ locale:'de-DE' }} />);
+
+        const datePicker = wrapper.find('DatePicker');
+        assert.equal(datePicker.length, 1);
+        assert.equal(datePicker.prop('locale'), 'de-DE');
+    });
+
+    it('should call props `input.onChange` method when changed', () => {
+        const input = { value: null, onChange: sinon.spy() };
+        const wrapper = shallow(
+            <DateInput source="foo" input={input} meta={{}} locale="de-DE" />
+        );
+
+        wrapper.find('DatePicker').simulate('change', null, '2010-01-04');
+        assert.deepEqual(input.onChange.args, [['2010-01-04']]);
+    });
+
+    describe('error message', () => {
+        it('should not be displayed if field is pristine', () => {
+            const wrapper = shallow(<DateInput source="foo" input={{ value: null }} meta={{ touched: false }} />);
+            const DatePicker = wrapper.find('DatePicker');
+            assert.equal(DatePicker.prop('errorText'), false);
+        });
+
+        it('should not be displayed if field has been touched but is valid', () => {
+            const wrapper = shallow(<DateInput source="foo" input={{ value: null }} meta={{ touched: true, error: false }} />);
+            const DatePicker = wrapper.find('DatePicker');
+            assert.equal(DatePicker.prop('errorText'), false);
+        });
+
+        it('should be displayed if field has been touched and is invalid', () => {
+            const wrapper = shallow(<DateInput source="foo" input={{ value: null }} meta={{ touched: true, error: 'Required field.' }} />);
+            const DatePicker = wrapper.find('DatePicker');
+            assert.equal(DatePicker.prop('errorText'), 'Required field.');
+        });
+    });
+});
Index: src/mui/input/CheckboxGroupInput.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/input/CheckboxGroupInput.js	(revision )
+++ src/mui/input/CheckboxGroupInput.js	(revision )
@@ -0,0 +1,127 @@
+import React, { Component, PropTypes } from 'react';
+import Checkbox from 'material-ui/Checkbox';
+import Labeled from './Labeled';
+
+/**
+ * An Input component for a checkbox group, using an array of objects for the options
+ *
+ * Pass possible options as an array of objects in the 'choices' attribute.
+ *
+ * The expected input must be an array of identifiers (e.g. [12, 31]) which correspond to
+ * the 'optionValue' of 'choices' attribute objects.
+ *
+ * By default, the options are built from:
+ *  - the 'id' property as the option value,
+ *  - the 'name' property an the option text
+ * @example
+ * const choices = [
+ *     { id: 12, name: 'Ray Hakt' },
+ *     { id: 31, name: 'Ann Gullar' },
+ *     { id: 42, name: 'Sean Phonee' },
+ * ];
+ * <CheckboxGroupInput source="recipients" choices={choices} />
+ *
+ * You can also customize the properties to use for the option name and value,
+ * thanks to the 'optionText' and 'optionValue' attributes.
+ * @example
+ * const choices = [
+ *    { _id: 123, full_name: 'Leo Tolstoi' },
+ *    { _id: 456, full_name: 'Jane Austen' },
+ * ];
+ * <CheckboxGroupInput source="recipients" choices={choices} optionText="full_name" optionValue="_id" />
+ *
+ * `optionText` also accepts a function, so you can shape the option text at will:
+ * @example
+ * const choices = [
+ *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },
+ *    { id: 456, first_name: 'Jane', last_name: 'Austen' },
+ * ];
+ * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;
+ * <CheckboxGroupInput source="recipients" choices={choices} optionText={optionRenderer} />
+ *
+ * `optionText` also accepts a React Element, that will be cloned and receive
+ * the related choice as the `record` prop. You can use Field components there.
+ * @example
+ * const choices = [
+ *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },
+ *    { id: 456, first_name: 'Jane', last_name: 'Austen' },
+ * ];
+ * const FullNameField = ({ record }) => <span>{record.first_name} {record.last_name}</span>;
+ * <CheckboxGroupInput source="recipients" choices={choices} optionText={<FullNameField />}/>
+ */
+export class CheckboxGroupInput extends Component {
+    handleCheck = (event, isChecked) => {
+        const { input: { value, onChange } } = this.props;
+
+        if (isChecked) {
+            onChange([...value, ...[event.target.value]]);
+        } else {
+            onChange(value.filter(v => (v != event.target.value)));
+        }
+    };
+
+    render() {
+        const {
+            choices,
+            optionValue,
+            optionText,
+            label,
+            resource,
+            source,
+            options,
+            input: { value },
+        } = this.props;
+
+        const option = React.isValidElement(optionText) ? // eslint-disable-line no-nested-ternary
+            choice => React.cloneElement(optionText, { record: choice }) :
+            (typeof optionText === 'function' ?
+                optionText :
+                choice => choice[optionText]
+            );
+
+        return (
+            <Labeled label={label} source={source} resource={resource}>
+                <div>
+                    {choices.map(choice =>
+                        <Checkbox
+                            key={choice[optionValue]}
+                            checked={value ? value.find(v => (v == choice[optionValue])) !== undefined : false}
+                            onCheck={this.handleCheck}
+                            value={choice[optionValue]}
+                            label={option(choice)}
+                            {...options}
+                        />,
+                    )}
+                </div>
+            </Labeled>
+        );
+    }
+}
+
+CheckboxGroupInput.propTypes = {
+    addField: PropTypes.bool.isRequired,
+    choices: PropTypes.arrayOf(PropTypes.object),
+    label: PropTypes.string,
+    source: PropTypes.string,
+    options: PropTypes.object,
+    input: PropTypes.shape({
+        onChange: PropTypes.func.isRequired,
+    }),
+    optionText: PropTypes.oneOfType([
+        PropTypes.string,
+        PropTypes.func,
+        PropTypes.element,
+    ]).isRequired,
+    optionValue: PropTypes.string.isRequired,
+    resource: PropTypes.string,
+};
+
+CheckboxGroupInput.defaultProps = {
+    addField: true,
+    choices: [],
+    options: {},
+    optionText: 'name',
+    optionValue: 'id',
+};
+
+export default CheckboxGroupInput;
Index: src/mui/form/SimpleForm.spec.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/form/SimpleForm.spec.js	(revision )
+++ src/mui/form/SimpleForm.spec.js	(revision )
@@ -0,0 +1,29 @@
+import assert from 'assert';
+import { shallow } from 'enzyme';
+import React from 'react';
+
+import { SimpleForm } from './SimpleForm';
+import TextInput from '../input/TextInput';
+
+describe('<SimpleForm />', () => {
+    it('should embed a form with given component children', () => {
+        const wrapper = shallow(
+            <SimpleForm>
+                <TextInput source="name" />
+                <TextInput source="city" />
+            </SimpleForm>
+        );
+        const inputs = wrapper.find('FormField');
+        assert.deepEqual(inputs.map(i => i.prop('input').props.source), ['name', 'city']);
+    });
+
+    it('should display <Toolbar />', () => {
+        const wrapper = shallow(
+            <SimpleForm>
+                <TextInput source="name" />
+            </SimpleForm>
+        );
+        const button = wrapper.find('Toolbar');
+        assert.equal(button.length, 1);
+    });
+});
Index: src/mui/list/List.spec.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/list/List.spec.js	(revision )
+++ src/mui/list/List.spec.js	(revision )
@@ -0,0 +1,79 @@
+import assert from 'assert';
+import React from 'react';
+import { shallow } from 'enzyme';
+import sinon from 'sinon';
+
+import { List } from './List';
+
+describe('<List />', () => {
+    const defaultProps = {
+        resource: 'post',
+        hasCreate: false,
+        hasEdit: false,
+        location: {},
+        params: {},
+        query: {},
+        filterValues: {},
+        total: 100,
+        isLoading: false,
+        crudGetList: () => {},
+        push: () => {},
+        translate: () => {},
+    };
+
+    describe('Filters', () => {
+        let clock;
+        beforeEach(() => {
+            clock = sinon.useFakeTimers();
+        });
+
+        it('should call `changeListParams` prop function for each filter change', () => {
+            const changeListParams = sinon.spy();
+            const wrapper = shallow(
+                <List
+                    {...defaultProps}
+                    changeListParams={changeListParams}
+                    filterValues={{}}
+                >
+                    <div />
+                </List>
+            );
+
+            wrapper.setProps({ filterValues: { q: 'hello' } });
+            clock.tick(1000); // wait for debounce
+            wrapper.setProps({ filterValues: {} });
+            clock.tick(1000); // wait for debounce
+
+            assert.deepEqual(changeListParams.args, [
+                ['post', { page: 1, perPage: 10, sort: 'id', order: 'DESC', filter: { q: 'hello' } }],
+                ['post', { page: 1, perPage: 10, sort: 'id', order: 'DESC', filter: {} }],
+            ]);
+        });
+
+        it('should call `changeFormValue` prop function when a filter is removed (hidden)', () => {
+            const changeListParams = sinon.spy();
+            const changeFormValue = sinon.spy();
+            const wrapper = shallow(
+                <List
+                    {...defaultProps}
+                    changeListParams={changeListParams}
+                    changeFormValue={changeFormValue}
+                >
+                    <div />
+                </List>
+            );
+
+            wrapper.instance().hideFilter('q');
+
+            assert.deepEqual(changeFormValue.args, [
+                ['filterForm', 'q', ''],
+            ]);
+        });
+
+        afterEach(() => {
+            if (clock) {
+                clock.restore();
+            }
+        });
+    });
+});
Index: src/i18n/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/i18n/index.js	(revision )
+++ src/i18n/index.js	(revision )
@@ -0,0 +1,7 @@
+export const DEFAULT_LOCALE = 'en';
+
+export * from './TranslationUtils';
+
+export englishMessages from './messages';
+export translate from './translate';
+export TranslationProvider from './TranslationProvider';
Index: src/reducer/resource/list/queryReducer.spec.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/reducer/resource/list/queryReducer.spec.js	(revision )
+++ src/reducer/resource/list/queryReducer.spec.js	(revision )
@@ -0,0 +1,54 @@
+import assert from 'assert';
+import queryReducer from './queryReducer';
+
+describe('Query Reducer', () => {
+    describe('SET_PAGE action', () => {
+        it('should update the page', () => {
+            const updatedState = queryReducer({
+                page: 1,
+            }, {
+                type: 'SET_PAGE',
+                payload: 2,
+            });
+            assert.equal(updatedState.page, 2);
+        });
+        it('should not update the filter', () => {
+            const initialFilter = {};
+            const updatedState = queryReducer({
+                filter: initialFilter,
+                page: 1,
+            }, {
+                type: 'SET_PAGE',
+                payload: 2,
+            });
+            assert.equal(updatedState.filter, initialFilter);
+        });
+    });
+    describe('SET_FILTER action', () => {
+        it('should add new filter with given value when set', () => {
+            const updatedState = queryReducer({}, {
+                type: 'SET_FILTER',
+                payload: { title: 'foo' },
+            });
+            assert.deepEqual(updatedState.filter, { title: 'foo' });
+        });
+
+        it('should replace existing filter with given value', () => {
+            const updatedState = queryReducer({
+                filter: {
+                    title: 'foo',
+                },
+            }, {
+                type: 'SET_FILTER',
+                payload: { title: 'bar' },
+            });
+
+            assert.deepEqual(updatedState.filter, { title: 'bar' });
+        });
+
+        it('should reset page to 1', () => {
+            const updatedState = queryReducer({ page: 3 }, { type: 'SET_FILTER', payload: {} });
+            assert.equal(updatedState.page, 1);
+        });
+    });
+});
Index: src/i18n/TranslationProvider.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/i18n/TranslationProvider.js	(revision )
+++ src/i18n/TranslationProvider.js	(revision )
@@ -0,0 +1,34 @@
+import { Children, PropTypes } from 'react';
+import Polyglot from 'node-polyglot';
+import { connect } from 'react-redux';
+import { compose, withContext } from 'recompose';
+
+import defaultMessages from './messages';
+
+const withI18nContext = withContext({
+    translate: PropTypes.func.isRequired,
+    locale: PropTypes.string.isRequired,
+}, ({ locale, messages = {} }) => {
+    const userMessages = messages[locale] || {};
+    const polyglot = new Polyglot({
+        locale,
+        phrases: { ...defaultMessages, ...userMessages },
+    });
+
+    return {
+        locale,
+        translate: polyglot.t.bind(polyglot),
+    };
+});
+
+const TranslationProvider = ({ children }) => Children.only(children);
+
+TranslationProvider.propTypes = {
+    locale: PropTypes.string.isRequired,
+    messages: PropTypes.object,
+    children: PropTypes.element,
+};
+
+const mapStateToProps = state => ({ locale: state.locale });
+
+export default compose(connect(mapStateToProps), withI18nContext)(TranslationProvider);
Index: src/mui/field/ChipField.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/field/ChipField.js	(revision )
+++ src/mui/field/ChipField.js	(revision )
@@ -0,0 +1,23 @@
+import React, { PropTypes } from 'react';
+import get from 'lodash.get';
+import pure from 'recompose/pure';
+import Chip from 'material-ui/Chip';
+
+const ChipField = ({ source, record = {}, elStyle = { margin: 4 } }) =>
+    <Chip style={elStyle}>{get(record, source)}</Chip>;
+
+ChipField.propTypes = {
+    addLabel: PropTypes.bool,
+    elStyle: PropTypes.object,
+    label: PropTypes.string,
+    source: PropTypes.string.isRequired,
+    record: PropTypes.object,
+};
+
+const PureChipField = pure(ChipField);
+
+PureChipField.defaultProps = {
+    addLabel: true,
+};
+
+export default PureChipField;
Index: src/i18n/translate.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/i18n/translate.js	(revision )
+++ src/i18n/translate.js	(revision )
@@ -0,0 +1,15 @@
+import { PropTypes } from 'react';
+import { getContext } from 'recompose';
+
+const translate = (BaseComponent) => {
+    const TranslatedComponent = getContext({
+        translate: PropTypes.func.isRequired,
+        locale: PropTypes.string.isRequired,
+    })(BaseComponent);
+
+    TranslatedComponent.defaultProps = BaseComponent.defaultProps;
+
+    return TranslatedComponent;
+};
+
+export default translate;
Index: src/mui/detail/CreateActions.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/detail/CreateActions.js	(revision )
+++ src/mui/detail/CreateActions.js	(revision )
@@ -0,0 +1,17 @@
+import React from 'react';
+import { CardActions } from 'material-ui/Card';
+import { ListButton } from '../button';
+
+const cardActionStyle = {
+    zIndex: 2,
+    display: 'inline-block',
+    float: 'right',
+};
+
+const CreateActions = ({ basePath }) => (
+    <CardActions style={cardActionStyle}>
+        <ListButton basePath={basePath} />
+    </CardActions>
+);
+
+export default CreateActions;
Index: src/rest/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/rest/index.js	(revision )
+++ src/rest/index.js	(revision )
@@ -0,0 +1,3 @@
+export simpleRestClient from './simple';
+export jsonServerRestClient from './jsonServer';
+export * from './types';
Index: src/rest/jsonServer.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/rest/jsonServer.js	(revision )
+++ src/rest/jsonServer.js	(revision )
@@ -0,0 +1,127 @@
+import { queryParameters, fetchJson } from '../util/fetch';
+import {
+    GET_LIST,
+    GET_ONE,
+    GET_MANY,
+    GET_MANY_REFERENCE,
+    CREATE,
+    UPDATE,
+    DELETE,
+} from './types';
+
+/**
+ * Maps admin-on-rest queries to a json-server powered REST API
+ *
+ * @see https://github.com/typicode/json-server
+ * @example
+ * GET_LIST     => GET http://my.api.url/posts?_sort=title&_order=ASC&_start=0&_end=24
+ * GET_ONE      => GET http://my.api.url/posts/123
+ * GET_MANY     => GET http://my.api.url/posts/123, GET http://my.api.url/posts/456, GET http://my.api.url/posts/789
+ * UPDATE       => PUT http://my.api.url/posts/123
+ * CREATE       => POST http://my.api.url/posts/123
+ * DELETE       => DELETE http://my.api.url/posts/123
+ */
+export default (apiUrl, httpClient = fetchJson) => {
+    /**
+     * @param {String} type One of the constants appearing at the top if this file, e.g. 'UPDATE'
+     * @param {String} resource Name of the resource to fetch, e.g. 'posts'
+     * @param {Object} params The REST request params, depending on the type
+     * @returns {Object} { url, options } The HTTP request parameters
+     */
+    const convertRESTRequestToHTTP = (type, resource, params) => {
+        let url = '';
+        const options = {};
+        switch (type) {
+        case GET_LIST: {
+            const { page, perPage } = params.pagination;
+            const { field, order } = params.sort;
+            const query = {
+                ...params.filter,
+                _sort: field,
+                _order: order,
+                _start: (page - 1) * perPage,
+                _end: page * perPage,
+            };
+            url = `${apiUrl}/${resource}?${queryParameters(query)}`;
+            break;
+        }
+        case GET_ONE:
+            url = `${apiUrl}/${resource}/${params.id}`;
+            break;
+        case GET_MANY_REFERENCE: {
+            const { page, perPage } = params.pagination;
+            const { field, order } = params.sort;
+            const query = {
+                ...params.filter,
+                [params.target]: params.id,
+                _sort: field,
+                _order: order,
+                _start: (page - 1) * perPage,
+                _end: page * perPage,
+            };
+            url = `${apiUrl}/${resource}?${queryParameters(query)}`;
+            break;
+        }
+        case UPDATE:
+            url = `${apiUrl}/${resource}/${params.id}`;
+            options.method = 'PUT';
+            options.body = JSON.stringify(params.data);
+            break;
+        case CREATE:
+            url = `${apiUrl}/${resource}`;
+            options.method = 'POST';
+            options.body = JSON.stringify(params.data);
+            break;
+        case DELETE:
+            url = `${apiUrl}/${resource}/${params.id}`;
+            options.method = 'DELETE';
+            break;
+        default:
+            throw new Error(`Unsupported fetch action type ${type}`);
+        }
+        return { url, options };
+    };
+
+    /**
+     * @param {Object} response HTTP response from fetch()
+     * @param {String} type One of the constants appearing at the top if this file, e.g. 'UPDATE'
+     * @param {String} resource Name of the resource to fetch, e.g. 'posts'
+     * @param {Object} params The REST request params, depending on the type
+     * @returns {Object} REST response
+     */
+    const convertHTTPResponseToREST = (response, type, resource, params) => {
+        const { headers, json } = response;
+        switch (type) {
+        case GET_LIST:
+        case GET_MANY_REFERENCE:
+            if (!headers.has('x-total-count')) {
+                throw new Error('The X-Total-Count header is missing in the HTTP Response. The jsonServer REST client expects responses for lists of resources to contain this header with the total number of results to build the pagination. If you are using CORS, did you declare X-Total-Count in the Access-Control-Expose-Headers header?');
+            }
+            return {
+                data: json,
+                total: parseInt(headers.get('x-total-count').split('/').pop(), 10),
+            };
+        case CREATE:
+            return { data: { ...params.data, id: json.id } };
+        default:
+            return { data: json };
+        }
+    };
+
+    /**
+     * @param {string} type Request type, e.g GET_LIST
+     * @param {string} resource Resource name, e.g. "posts"
+     * @param {Object} payload Request parameters. Depends on the request type
+     * @returns {Promise} the Promise for a REST response
+     */
+    return (type, resource, params) => {
+        // json-server doesn't handle WHERE IN requests, so we fallback to calling GET_ONE n times instead
+        if (type === GET_MANY) {
+            return Promise.all(params.ids.map(id => httpClient(`${apiUrl}/${resource}/${id}`)))
+                .then(responses => ({ data: responses.map(response => response.json) }));
+        }
+        const { url, options } = convertRESTRequestToHTTP(type, resource, params);
+        return httpClient(url, options)
+            .then(response => convertHTTPResponseToREST(response, type, resource, params));
+    };
+};
Index: src/mui/input/NullableBooleanInput.spec.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/input/NullableBooleanInput.spec.js	(revision )
+++ src/mui/input/NullableBooleanInput.spec.js	(revision )
@@ -0,0 +1,43 @@
+import assert from 'assert';
+import { shallow } from 'enzyme';
+import React from 'react';
+
+import { NullableBooleanInput } from './NullableBooleanInput';
+
+describe('<NullableBooleanInput />', () => {
+    const defaultProps = {
+        input: {},
+        meta: {},
+        translate: x => x,
+    };
+
+    it('should give three different choices for true, false or unknown', () => {
+        const wrapper = shallow(<NullableBooleanInput source="foo" {...defaultProps} />);
+        const choices = wrapper.find('SelectInput').prop('choices');
+        assert.deepEqual(choices, [
+            { id: null, name: '' },
+            { id: false, name: 'aor.boolean.false' },
+            { id: true, name: 'aor.boolean.true' },
+        ]);
+    });
+
+    describe('error message', () => {
+        it('should not be displayed if field is pristine', () => {
+            const wrapper = shallow(<NullableBooleanInput source="foo" {...defaultProps} meta={{ touched: false }} />);
+            const SelectInputElement = wrapper.find('SelectInput');
+            assert.equal(SelectInputElement.prop('errorText'), undefined);
+        });
+
+        it('should not be displayed if field has been touched but is valid', () => {
+            const wrapper = shallow(<NullableBooleanInput source="foo" {...defaultProps} meta={{ touched: true, error: false }} />);
+            const SelectInputElement = wrapper.find('SelectInput');
+            assert.equal(SelectInputElement.prop('errorText'), undefined);
+        });
+
+        it('should be displayed if field has been touched and is invalid', () => {
+            const wrapper = shallow(<NullableBooleanInput source="foo" {...defaultProps} meta={{ touched: true, error: 'Required field.' }} />);
+            const SelectInputElement = wrapper.find('SelectInput');
+            assert.deepEqual(SelectInputElement.prop('meta'), { touched: true, error: 'Required field.' });
+        });
+    });
+});
Index: src/mui/form/TabbedForm.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/form/TabbedForm.js	(revision )
+++ src/mui/form/TabbedForm.js	(revision )
@@ -0,0 +1,91 @@
+import React, { Children, Component, PropTypes } from 'react';
+import { reduxForm } from 'redux-form';
+import { connect } from 'react-redux';
+import compose from 'recompose/compose';
+import { Tabs, Tab } from 'material-ui/Tabs';
+import { getFieldConstraints, getErrorsForForm, getErrorsForFieldConstraints } from '../../util/validate';
+import Toolbar from './Toolbar';
+import getDefaultValues from '../form/getDefaultValues';
+import translate from '../../i18n/translate';
+
+/**
+ * Validator function for redux-form
+ */
+export const validateForm = (values, { children, validation }) => {
+    // digging first in `<FormTab>`, then in all children
+    const fieldConstraints = Children.toArray(children)
+        .map(child => child.props.children)
+        .map(getFieldConstraints)
+        // merge all constraints object into a single object
+        .reduce((prev, next) => ({ ...prev, ...next }), {});
+
+    return {
+        ...getErrorsForForm(validation, values),
+        ...getErrorsForFieldConstraints(fieldConstraints, values),
+    };
+};
+
+export class TabbedForm extends Component {
+    constructor(props) {
+        super(props);
+        this.state = {
+            value: 0,
+        };
+    }
+
+    handleChange = (value) => {
+        this.setState({ value });
+    };
+
+    render() {
+        const { children, contentContainerStyle, handleSubmit, invalid, record, resource, basePath, translate } = this.props;
+        return (
+            <form onSubmit={handleSubmit}>
+                <div style={{ padding: '0 1em 1em 1em' }}>
+                    <Tabs value={this.state.value} onChange={this.handleChange} contentContainerStyle={contentContainerStyle}>
+                        {React.Children.map(children, (tab, index) =>
+                            <Tab key={tab.props.value} label={translate(tab.props.label)} value={index} icon={tab.props.icon}>
+                                {React.cloneElement(tab, { resource, record, basePath })}
+                            </Tab>
+                        )}
+                    </Tabs>
+                </div>
+                <Toolbar invalid={invalid} />
+            </form>
+        );
+    }
+}
+
+TabbedForm.propTypes = {
+    children: PropTypes.node,
+    contentContainerStyle: PropTypes.object,
+    defaultValue: PropTypes.oneOfType([
+        PropTypes.object,
+        PropTypes.func,
+    ]),
+    handleSubmit: PropTypes.func,
+    invalid: PropTypes.bool,
+    record: PropTypes.object,
+    resource: PropTypes.string,
+    basePath: PropTypes.string,
+    translate: PropTypes.func,
+    validation: PropTypes.func,
+};
+
+TabbedForm.defaultProps = {
+    contentContainerStyle: { borderTop: 'solid 1px #e0e0e0' },
+};
+
+const enhance = compose(
+    connect((state, props) => ({
+        initialValues: getDefaultValues(state, props),
+    })),
+    reduxForm({
+        form: 'record-form',
+        validate: validateForm,
+        enableReinitialize: true,
+    }),
+    translate,
+);
+
+export default enhance(TabbedForm);
Index: .babelrc
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .babelrc	(revision )
+++ .babelrc	(revision )
@@ -0,0 +1,14 @@
+{
+    "presets": ["es2015", "stage-0", "react"],
+    "plugins": [
+        "transform-react-jsx",
+        "add-module-exports",
+        ["babel-plugin-transform-builtin-extend", {
+            "globals": ["Error"]
+        }],
+        ["transform-runtime", {
+            "polyfill": false,
+            "regenerator": true
+        }]
+    ]
+}
Index: src/reducer/resource/list/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/reducer/resource/list/index.js	(revision )
+++ src/reducer/resource/list/index.js	(revision )
@@ -0,0 +1,10 @@
+import { combineReducers } from 'redux';
+import ids from './ids';
+import params from './params';
+import total from './total';
+
+export default resource => combineReducers({
+    ids: ids(resource),
+    params: params(resource),
+    total: total(resource),
+});
Index: src/mui/list/Datagrid.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/list/Datagrid.js	(revision )
+++ src/mui/list/Datagrid.js	(revision )
@@ -0,0 +1,130 @@
+import React, { Component, PropTypes } from 'react';
+import muiThemeable from 'material-ui/styles/muiThemeable';
+import { Table, TableBody, TableHeader, TableHeaderColumn, TableRow, TableRowColumn } from 'material-ui/Table';
+import DatagridCell from './DatagridCell';
+import DatagridHeaderCell from './DatagridHeaderCell';
+import DatagridBody from './DatagridBody';
+
+const defaultStyles = {
+    table: {
+        tableLayout: 'auto',
+    },
+    tbody: {
+        height: 'inherit',
+    },
+    header: {
+        th: {
+            padding: 0,
+        },
+        'th:first-child': {
+            padding: '0 0 0 12px',
+        },
+    },
+    cell: {
+        td: {
+            padding: '0 12px',
+            whiteSpace: 'normal',
+        },
+        'td:first-child': {
+            padding: '0 12px 0 16px',
+            whiteSpace: 'normal',
+        },
+    },
+};
+
+/**
+ * The Datagrid component renders a list of records as a table.
+ * It is usually used as a child of the <List> and <ReferenceManyField> components.
+ *
+ * Props:
+ *  - styles
+ *  - rowStyle
+ *  - options (passed as props to <Table>)
+ *  - headerOptions (passed as props to mui <TableHeader>)
+ *  - bodyOptions (passed as props to mui <TableBody>)
+ *  - rowOptions (passed as props to mui <TableRow>)
+ *
+ * @example Display all posts as a datagrid
+ * const postRowStyle = (record, index) => ({
+ *     backgroundColor: record.nb_views >= 500 ? '#efe' : 'white',
+ * });
+ * export const PostList = (props) => (
+ *     <List {...props}>
+ *         <Datagrid rowStyle={postRowStyle}>
+ *             <TextField source="id" />
+ *             <TextField source="title" />
+ *             <TextField source="body" />
+ *             <EditButton />
+ *         </Datagrid>
+ *     </List>
+ * );
+ *
+ * @example Display all the comments of the current post as a datagrid
+ * <ReferenceManyField reference="comments" target="post_id">
+ *     <Datagrid>
+ *         <TextField source="id" />
+ *         <TextField source="body" />
+ *         <DateField source="created_at" />
+ *         <EditButton />
+ *     </Datagrid>
+ * </ReferenceManyField>
+ */
+class Datagrid extends Component {
+    updateSort = (event) => {
+        event.stopPropagation();
+        this.props.setSort(event.currentTarget.dataset.sort);
+    }
+
+    render() {
+        const { resource, children, ids, isLoading, data, currentSort, basePath, styles = defaultStyles, muiTheme, rowStyle, options, headerOptions, bodyOptions, rowOptions } = this.props;
+        return (
+            <Table style={options && options.fixedHeader ? null : styles.table} fixedHeader={false} {...options}>
+                <TableHeader displaySelectAll={false} adjustForCheckbox={false} {...headerOptions}>
+                    <TableRow style={muiTheme.tableRow}>
+                        {React.Children.map(children, (field, index) => (
+                            <DatagridHeaderCell
+                                key={field.props.source || index}
+                                field={field}
+                                defaultStyle={index === 0 ? styles.header['th:first-child'] : styles.header.th}
+                                currentSort={currentSort}
+                                isSorting={field.props.source === currentSort.field}
+                                updateSort={this.updateSort}
+                                resource={resource}
+                            />
+                        ))}
+                    </TableRow>
+                </TableHeader>
+                <DatagridBody resource={resource} ids={ids} data={data} basePath={basePath} styles={styles} rowStyle={rowStyle} isLoading={isLoading} options={bodyOptions} rowOptions={rowOptions}>
+                    {children}
+                </DatagridBody>
+            </Table>
+        );
+    }
+}
+
+Datagrid.propTypes = {
+    basePath: PropTypes.string,
+    bodyOptions: PropTypes.object,
+    currentSort: PropTypes.shape({
+        sort: PropTypes.string,
+        order: PropTypes.string,
+    }),
+    data: PropTypes.object.isRequired,
+    headerOptions: PropTypes.object,
+    ids: PropTypes.arrayOf(PropTypes.any).isRequired,
+    isLoading: PropTypes.bool,
+    muiTheme: PropTypes.object,
+    options: PropTypes.object,
+    resource: PropTypes.string,
+    rowOptions: PropTypes.object,
+    rowStyle: PropTypes.func,
+    setSort: PropTypes.func,
+    styles: PropTypes.object,
+};
+
+Datagrid.defaultProps = {
+    data: {},
+    ids: [],
+};
+
+export default muiThemeable()(Datagrid);
Index: src/reducer/loading.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/reducer/loading.js	(revision )
+++ src/reducer/loading.js	(revision )
@@ -0,0 +1,14 @@
+import { FETCH_START, FETCH_END, FETCH_ERROR, FETCH_CANCEL } from '../actions/fetchActions';
+
+export default (previousState = 0, { type }) => {
+    switch (type) {
+    case FETCH_START:
+        return previousState + 1;
+    case FETCH_END:
+    case FETCH_ERROR:
+    case FETCH_CANCEL:
+        return Math.max(previousState - 1, 0);
+    default:
+        return previousState;
+    }
+};
Index: src/mui/delete/Delete.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/delete/Delete.js	(revision )
+++ src/mui/delete/Delete.js	(revision )
@@ -0,0 +1,131 @@
+import React, { Component, PropTypes } from 'react';
+import { connect } from 'react-redux';
+import { Card, CardTitle, CardText, CardActions } from 'material-ui/Card';
+import { Toolbar, ToolbarGroup } from 'material-ui/Toolbar';
+import RaisedButton from 'material-ui/RaisedButton';
+import ActionCheck from 'material-ui/svg-icons/action/check-circle';
+import AlertError from 'material-ui/svg-icons/alert/error-outline';
+import compose from 'recompose/compose';
+import inflection from 'inflection';
+import ViewTitle from '../layout/ViewTitle';
+import Title from '../layout/Title';
+import { ListButton } from '../button';
+import { crudGetOne as crudGetOneAction, crudDelete as crudDeleteAction } from '../../actions/dataActions';
+import translate from '../../i18n/translate';
+
+const styles = {
+    actions: { zIndex: 2, display: 'inline-block', float: 'right' },
+    toolbar: { clear: 'both' },
+    button: { margin: '10px 24px', position: 'relative' },
+};
+
+class Delete extends Component {
+    constructor(props) {
+        super(props);
+        this.handleSubmit = this.handleSubmit.bind(this);
+        this.goBack = this.goBack.bind(this);
+    }
+
+    componentDidMount() {
+        this.props.crudGetOne(this.props.resource, this.props.id, this.getBasePath());
+    }
+
+    componentWillReceiveProps(nextProps) {
+        if (this.props.id !== nextProps.id) {
+            this.props.crudGetOne(nextProps.resource, nextProps.id, this.getBasePath());
+        }
+    }
+
+    getBasePath() {
+        const { location } = this.props;
+        return location.pathname.split('/').slice(0, -2).join('/');
+    }
+
+    handleSubmit(event) {
+        event.preventDefault();
+        this.props.crudDelete(this.props.resource, this.props.id, this.getBasePath());
+    }
+
+    goBack() {
+        this.props.history.goBack();
+    }
+
+    render() {
+        const { title, id, data, isLoading, resource, translate } = this.props;
+        const basePath = this.getBasePath();
+
+        const resourceName = translate(`resources.${resource}.name`, {
+            smart_count: 1,
+            _: inflection.humanize(inflection.singularize(resource)),
+        });
+        const defaultTitle = translate('aor.page.delete', {
+            name: `${resourceName}`,
+            id,
+            data,
+        });
+        const titleElement = data ? <Title title={title} record={data} defaultTitle={defaultTitle} /> : '';
+
+        return (
+            <div>
+                <Card style={{ opacity: isLoading ? .8 : 1 }}>
+                    <CardActions style={styles.actions}>
+                        <ListButton basePath={basePath} />
+                    </CardActions>
+                    <ViewTitle title={titleElement} />
+                    <form onSubmit={this.handleSubmit}>
+                        <CardText>{translate('aor.message.are_you_sure')}</CardText>
+                        <Toolbar style={styles.toolbar}>
+                            <ToolbarGroup>
+                                <RaisedButton
+                                    type="submit"
+                                    label={translate('aor.action.delete')}
+                                    icon={<ActionCheck />}
+                                    primary
+                                    style={styles.button}
+                                />
+                                <RaisedButton
+                                    label={translate('aor.action.cancel')}
+                                    icon={<AlertError />}
+                                    onClick={this.goBack}
+                                    style={styles.button}
+                                />
+                            </ToolbarGroup>
+                        </Toolbar>
+                    </form>
+                </Card>
+            </div>
+        );
+    }
+}
+
+Delete.propTypes = {
+    title: PropTypes.any,
+    id: PropTypes.string.isRequired,
+    resource: PropTypes.string.isRequired,
+    location: PropTypes.object.isRequired,
+    params: PropTypes.object.isRequired,
+    history: PropTypes.object.isRequired,
+    data: PropTypes.object,
+    isLoading: PropTypes.bool.isRequired,
+    crudGetOne: PropTypes.func.isRequired,
+    crudDelete: PropTypes.func.isRequired,
+    translate: PropTypes.func.isRequired,
+};
+
+function mapStateToProps(state, props) {
+    return {
+        id: props.params.id,
+        data: state.admin[props.resource].data[props.params.id],
+        isLoading: state.admin.loading > 0,
+    };
+}
+
+const enhance = compose(
+    connect(
+        mapStateToProps,
+        { crudGetOne: crudGetOneAction, crudDelete: crudDeleteAction }
+    ),
+    translate,
+);
+
+export default enhance(Delete);
Index: src/mui/input/TextInput.spec.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/input/TextInput.spec.js	(revision )
+++ src/mui/input/TextInput.spec.js	(revision )
@@ -0,0 +1,64 @@
+import { shallow } from 'enzyme';
+import assert from 'assert';
+import React from 'react';
+import sinon from 'sinon';
+
+import TextInput from './TextInput';
+
+describe('<TextInput />', () => {
+    const defaultProps = {
+        source: 'foo',
+        meta: {},
+        input: {},
+    };
+
+    it('should use a mui TextField', () => {
+        const wrapper = shallow(<TextInput {...defaultProps} input={{ value: 'hello' }} />);
+        const TextFieldElement = wrapper.find('TextField');
+        assert.equal(TextFieldElement.length, 1);
+        assert.equal(TextFieldElement.prop('value'), 'hello');
+        assert.equal(TextFieldElement.prop('type'), 'text');
+    });
+
+
+    it('should use a mui TextField', () => {
+        const wrapper = shallow(<TextInput {...defaultProps} type="password" />);
+        const TextFieldElement = wrapper.find('TextField');
+        assert.equal(TextFieldElement.length, 1);
+        assert.equal(TextFieldElement.prop('type'), 'password');
+    });
+
+    it('should call redux-form onBlur handler when blurred', () => {
+        const onBlur = sinon.spy();
+        const wrapper = shallow(
+            <TextInput
+                {...defaultProps}
+                input={{ onBlur }}
+            />,
+        );
+
+        const TextFieldElement = wrapper.find('TextField').first();
+        TextFieldElement.simulate('blur', 'event');
+        assert.deepEqual(onBlur.args[0], ['event']);
+    });
+
+    describe('error message', () => {
+        it('should not be displayed if field is pristine', () => {
+            const wrapper = shallow(<TextInput {...defaultProps} meta={{ touched: false }} />);
+            const TextFieldElement = wrapper.find('TextField');
+            assert.equal(TextFieldElement.prop('errorText'), false);
+        });
+
+        it('should not be displayed if field has been touched but is valid', () => {
+            const wrapper = shallow(<TextInput {...defaultProps} meta={{ touched: true, error: false }} />);
+            const TextFieldElement = wrapper.find('TextField');
+            assert.equal(TextFieldElement.prop('errorText'), false);
+        });
+
+        it('should be displayed if field has been touched and is invalid', () => {
+            const wrapper = shallow(<TextInput {...defaultProps} meta={{ touched: true, error: 'Required field.' }} />);
+            const TextFieldElement = wrapper.find('TextField');
+            assert.equal(TextFieldElement.prop('errorText'), 'Required field.');
+        });
+    });
+});
Index: src/reducer/resource/list/params.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/reducer/resource/list/params.js	(revision )
+++ src/reducer/resource/list/params.js	(revision )
@@ -0,0 +1,21 @@
+import { CRUD_CHANGE_LIST_PARAMS } from '../../../actions/listActions';
+
+const defaultState = {
+    sort: null,
+    order: null,
+    page: 1,
+    perPage: null,
+    filter: {},
+};
+
+export default resource => (previousState = defaultState, { type, payload, meta }) => {
+    if (!meta || meta.resource !== resource) {
+        return previousState;
+    }
+    switch (type) {
+    case CRUD_CHANGE_LIST_PARAMS:
+        return payload;
+    default:
+        return previousState;
+    }
+};
Index: src/mui/field/BooleanField.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/field/BooleanField.js	(revision )
+++ src/mui/field/BooleanField.js	(revision )
@@ -0,0 +1,38 @@
+import React, { PropTypes } from 'react';
+import get from 'lodash.get';
+import pure from 'recompose/pure';
+
+import FalseIcon from 'material-ui/svg-icons/content/clear';
+import TrueIcon from 'material-ui/svg-icons/action/done';
+
+export const BooleanField = ({ source, record = {}, elStyle }) => {
+    if (get(record, source) === false) {
+        return <FalseIcon style={elStyle} />;
+    }
+
+    if (get(record, source) === true) {
+        return <TrueIcon style={elStyle} />;
+    }
+
+    return <span style={elStyle} />;
+};
+
+BooleanField.propTypes = {
+    addLabel: PropTypes.bool,
+    elStyle: PropTypes.object,
+    label: PropTypes.string,
+    record: PropTypes.object,
+    source: PropTypes.string.isRequired,
+};
+
+const PureBooleanField = pure(BooleanField);
+
+PureBooleanField.defaultProps = {
+    addLabel: true,
+    elStyle: {
+        display: 'block',
+        margin: 'auto',
+    },
+};
+
+export default PureBooleanField;
Index: src/reducer/saving.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/reducer/saving.js	(revision )
+++ src/reducer/saving.js	(revision )
@@ -0,0 +1,17 @@
+import { actionTypes } from 'redux-form';
+import { LOCATION_CHANGE } from 'react-router-redux';
+import { CRUD_CREATE_FAILURE, CRUD_UPDATE_FAILURE } from '../actions';
+
+export default (previousState = false, { type }) => {
+    switch (type) {
+    case actionTypes.TOUCH:
+        return true;
+    case LOCATION_CHANGE:
+    case actionTypes.SET_SUBMIT_FAILED:
+    case CRUD_CREATE_FAILURE:
+    case CRUD_UPDATE_FAILURE:
+        return false;
+    default:
+        return previousState;
+    }
+};
Index: src/mui/input/TextInput.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/input/TextInput.js	(revision )
+++ src/mui/input/TextInput.js	(revision )
@@ -0,0 +1,89 @@
+import React, { Component, PropTypes } from 'react';
+import TextField from 'material-ui/TextField';
+import FieldTitle from '../../util/FieldTitle';
+
+/**
+ * An Input component for a string
+ *
+ * @example
+ * <TextInput source="first_name" />
+ *
+ * You can customize the `type` props (which defaults to "text").
+ * Note that, due to a React bug, you should use `<NumberField>` instead of using type="number".
+ * @example
+ * <TextInput source="email" type="email" />
+ * <NumberInput source="nb_views" />
+ *
+ * The object passed as `options` props is passed to the material-ui <TextField> component
+ */
+export class TextInput extends Component {
+    handleBlur = (eventOrValue) => {
+        this.props.onBlur(eventOrValue);
+        this.props.input.onBlur(eventOrValue);
+    }
+
+    handleFocus = (event) => {
+        this.props.onFocus(event);
+        this.props.input.onFocus(event);
+    }
+
+    handleChange = (eventOrValue) => {
+        this.props.onChange(eventOrValue);
+        this.props.input.onChange(eventOrValue);
+    }
+
+    render() {
+        const {
+            elStyle,
+            input,
+            label,
+            meta: { touched, error },
+            options,
+            resource,
+            source,
+            type,
+        } = this.props;
+
+        return (
+            <TextField
+                {...input}
+                onBlur={this.handleBlur}
+                onFocus={this.handleFocus}
+                onChange={this.handleChange}
+                type={type}
+                floatingLabelText={<FieldTitle label={label} source={source} resource={resource} />}
+                errorText={touched && error}
+                style={elStyle}
+                {...options}
+            />
+        );
+    }
+}
+
+TextInput.propTypes = {
+    addField: PropTypes.bool.isRequired,
+    elStyle: PropTypes.object,
+    input: PropTypes.object,
+    label: PropTypes.string,
+    meta: PropTypes.object,
+    name: PropTypes.string,
+    onBlur: PropTypes.func,
+    onChange: PropTypes.func,
+    onFocus: PropTypes.func,
+    options: PropTypes.object,
+    resource: PropTypes.string,
+    source: PropTypes.string,
+    type: PropTypes.string,
+    validation: PropTypes.object,
+};
+
+TextInput.defaultProps = {
+    addField: true,
+    onBlur: () => {},
+    onChange: () => {},
+    onFocus: () => {},
+    options: {},
+    type: 'text',
+};
+
+export default TextInput;
Index: src/reducer/resource/list/queryReducer.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/reducer/resource/list/queryReducer.js	(revision )
+++ src/reducer/resource/list/queryReducer.js	(revision )
@@ -0,0 +1,42 @@
+export const SET_SORT = 'SET_SORT';
+export const SORT_ASC = 'ASC';
+export const SORT_DESC = 'DESC';
+
+export const SET_PAGE = 'SET_PAGE';
+
+export const SET_FILTER = 'SET_FILTER';
+
+const oppositeOrder = direction => (direction === SORT_DESC ? SORT_ASC : SORT_DESC);
+
+/**
+ * This reducer is for the react-router query string, NOT for redux.
+ */
+export default (previousState, { type, payload }) => {
+    switch (type) {
+    case SET_SORT:
+        if (payload === previousState.sort) {
+            return {
+                ...previousState,
+                order: oppositeOrder(previousState.order),
+                page: 1,
+            };
+        }
+
+        return {
+            ...previousState,
+            sort: payload,
+            order: SORT_ASC,
+            page: 1,
+        };
+
+    case SET_PAGE:
+        return { ...previousState, page: payload };
+
+    case SET_FILTER: {
+        return { ...previousState, page: 1, filter: payload };
+    }
+
+    default:
+        return previousState;
+    }
+};
Index: src/actions/listActions.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/actions/listActions.js	(revision )
+++ src/actions/listActions.js	(revision )
@@ -0,0 +1,7 @@
+export const CRUD_CHANGE_LIST_PARAMS = 'CRUD_CHANGE_LIST_PARAMS';
+
+export const changeListParams = (resource, params) => ({
+    type: CRUD_CHANGE_LIST_PARAMS,
+    payload: params,
+    meta: { resource },
+});
Index: src/actions/filterActions.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/actions/filterActions.js	(revision )
+++ src/actions/filterActions.js	(revision )
@@ -0,0 +1,21 @@
+export const CRUD_SHOW_FILTER = 'CRUD_SHOW_FILTER';
+export const CRUD_HIDE_FILTER = 'CRUD_HIDE_FILTER';
+export const CRUD_SET_FILTER = 'CRUD_SET_FILTER';
+
+export const showFilter = (resource, field) => ({
+    type: CRUD_SHOW_FILTER,
+    payload: { field },
+    meta: { resource },
+});
+
+export const hideFilter = (resource, field) => ({
+    type: CRUD_HIDE_FILTER,
+    payload: { field },
+    meta: { resource },
+});
+
+export const setFilter = (resource, field, value) => ({
+    type: CRUD_SET_FILTER,
+    payload: { field, value },
+    meta: { resource },
+});
Index: src/reducer/resource/data.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/reducer/resource/data.js	(revision )
+++ src/reducer/resource/data.js	(revision )
@@ -0,0 +1,96 @@
+import { FETCH_END } from '../../actions/fetchActions';
+import {
+    GET_LIST,
+    GET_ONE,
+    GET_MANY,
+    GET_MANY_REFERENCE,
+    CREATE,
+    UPDATE,
+} from '../../rest/types';
+
+/**
+ * The data state is an instance pool, which keeps track of the fetch date of each instance.
+ *
+ * @example
+ * {
+ *   23: { id: 23, title: 'War and Peace' },
+ *   67: { id: 67, title: 'Anna Karenina' },
+ *   fetchedAt: { // non enumerable
+ *     23: new Date('2016-08-05T19:33:15.012Z'),
+ *     67: new Date('2016-08-05T19:33:43.449Z'),
+ *   },
+ * }
+ */
+
+const cacheDuration = 10 * 60 * 1000; // ten minutes
+
+/**
+ * Add new records to the pool, and remove outdated ones.
+ *
+ * This is the equivalent of a stale-while-revalidate caching strategy:
+ * The cached data is displayed before fetching, and stale data is removed
+ * only once fresh data is fetched.
+ */
+const addRecords = (newRecords = [], oldRecords) => {
+    // prepare new records and timestamp them
+    const newRecordsById = newRecords.reduce((prev, record) => {
+        prev[record.id] = record; // eslint-disable-line no-param-reassign
+        return prev;
+    }, {});
+    const now = new Date();
+    const newRecordsFetchedAt = newRecords.reduce((prev, record) => {
+        prev[record.id] = now; // eslint-disable-line no-param-reassign
+        return prev;
+    }, {});
+    // remove outdated old records
+    const latestValidDate = new Date();
+    latestValidDate.setTime(latestValidDate.getTime() - cacheDuration);
+    const oldValidRecordIds = oldRecords.fetchedAt
+        ? Object.keys(oldRecords.fetchedAt)
+            .filter(id => oldRecords.fetchedAt[id] > latestValidDate)
+        : [];
+    const oldValidRecords = oldValidRecordIds.reduce((prev, id) => {
+        prev[id] = oldRecords[id]; // eslint-disable-line no-param-reassign
+        return prev;
+    }, {});
+    const oldValidRecordsFetchedAt = oldValidRecordIds.reduce((prev, id) => {
+        prev[id] = oldRecords.fetchedAt[id]; // eslint-disable-line no-param-reassign
+        return prev;
+    }, {});
+    // combine old records and new records
+    const records = {
+        ...oldValidRecords,
+        ...newRecordsById,
+    };
+    Object.defineProperty(records, 'fetchedAt', { value: {
+        ...oldValidRecordsFetchedAt,
+        ...newRecordsFetchedAt,
+    } }); // non enumerable by default
+    return records;
+};
+
+const initialState = {};
+Object.defineProperty(initialState, 'fetchedAt', { value: {} }); // non enumerable by default
+
+export default resource => (previousState = initialState, { payload, meta }) => {
+    if (!meta || meta.resource !== resource) {
+        return previousState;
+    }
+    if (!meta.fetchResponse || meta.fetchStatus !== FETCH_END) {
+        return previousState;
+    }
+    switch (meta.fetchResponse) {
+    case GET_LIST:
+    case GET_MANY:
+    case GET_MANY_REFERENCE:
+        return addRecords(payload.data, previousState);
+    case GET_ONE:
+    case UPDATE:
+    case CREATE:
+        return addRecords([payload.data], previousState);
+    default:
+        return previousState;
+    }
+};
+
+export const getRecord = (state, id) => state[id];
Index: src/mui/layout/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/layout/index.js	(revision )
+++ src/mui/layout/index.js	(revision )
@@ -0,0 +1,10 @@
+export AppBar from './AppBar';
+export AppBarMobile from './AppBarMobile';
+export DashboardMenuItem from './DashboardMenuItem';
+export Layout from './Layout';
+export Menu from './Menu';
+export Notification from './Notification';
+export Responsive from './Responsive';
+export Sidebar from './Sidebar';
+export Title from './Title';
+export ViewTitle from './ViewTitle';
Index: src/mui/input/RadioButtonGroupInput.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/input/RadioButtonGroupInput.js	(revision )
+++ src/mui/input/RadioButtonGroupInput.js	(revision )
@@ -0,0 +1,104 @@
+import React, { Component, PropTypes } from 'react';
+import { RadioButton, RadioButtonGroup } from 'material-ui/RadioButton';
+import Labeled from './Labeled';
+
+/**
+ * An Input component for a radio button group, using an array of objects for the options
+ *
+ * Pass possible options as an array of objects in the 'choices' attribute.
+ *
+ * By default, the options are built from:
+ *  - the 'id' property as the option value,
+ *  - the 'name' property an the option text
+ * @example
+ * const choices = [
+ *    { id: 'M', name: 'Male' },
+ *    { id: 'F', name: 'Female' },
+ * ];
+ * <RadioButtonGroupInput source="gender" choices={choices} />
+ *
+ * You can also customize the properties to use for the option name and value,
+ * thanks to the 'optionText' and 'optionValue' attributes.
+ * @example
+ * const choices = [
+ *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },
+ *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },
+ * ];
+ * <RadioButtonGroupInput source="author_id" choices={choices} optionText="full_name" optionValue="_id" />
+ *
+ * `optionText` also accepts a function, so you can shape the option text at will:
+ * @example
+ * const choices = [
+ *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },
+ *    { id: 456, first_name: 'Jane', last_name: 'Austen' },
+ * ];
+ * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;
+ * <RadioButtonGroupInput source="author_id" choices={choices} optionText={optionRenderer} />
+ *
+ * `optionText` also accepts a React Element, that will be cloned and receive
+ * the related choice as the `record` prop. You can use Field components there.
+ * @example
+ * const choices = [
+ *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },
+ *    { id: 456, first_name: 'Jane', last_name: 'Austen' },
+ * ];
+ * const FullNameField = ({ record }) => <span>{record.first_name} {record.last_name}</span>;
+ * <RadioButtonGroupInput source="gender" choices={choices} optionText={<FullNameField />}/>
+ *
+ * The object passed as `options` props is passed to the material-ui <RadioButtonGroup> component
+ */
+class RadioButtonGroupInput extends Component {
+    handleChange = (event, value) => {
+        this.props.input.onChange(value);
+    }
+
+    render() {
+        const { label, source, input, choices, optionText, optionValue, options, elStyle } = this.props;
+        const option = React.isValidElement(optionText) ? // eslint-disable-line no-nested-ternary
+            choice => React.cloneElement(optionText, { record: choice }) :
+            (typeof optionText === 'function' ?
+                optionText :
+                choice => choice[optionText]
+            );
+        return (
+            <Labeled label={label} onChange={this.handleChange} source={source}>
+                <RadioButtonGroup
+                    name={source}
+                    defaultSelected={input.value}
+                    style={elStyle}
+                    {...options}
+                >
+                    {choices.map(choice =>
+                        <RadioButton key={choice[optionValue]} label={option(choice)} value={choice[optionValue]} />
+                    )}
+                </RadioButtonGroup>
+            </Labeled>
+        );
+    }
+}
+
+RadioButtonGroupInput.propTypes = {
+    addField: PropTypes.bool.isRequired,
+    choices: PropTypes.arrayOf(PropTypes.object),
+    label: PropTypes.string,
+    onChange: PropTypes.func,
+    options: PropTypes.object,
+    optionText: PropTypes.oneOfType([
+        PropTypes.string,
+        PropTypes.func,
+        PropTypes.element,
+    ]).isRequired,
+    optionValue: PropTypes.string.isRequired,
+    source: PropTypes.string,
+    style: PropTypes.object,
+};
+
+RadioButtonGroupInput.defaultProps = {
+    addField: true,
+    choices: [],
+    options: {},
+    optionText: 'name',
+    optionValue: 'id',
+};
+
+export default RadioButtonGroupInput;
Index: src/mui/input/DateInput.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/input/DateInput.js	(revision )
+++ src/mui/input/DateInput.js	(revision )
@@ -0,0 +1,55 @@
+import React, { Component, PropTypes } from 'react';
+import DatePicker from 'material-ui/DatePicker';
+import FieldTitle from '../../util/FieldTitle';
+
+export const datify = input => {
+    if (!input) {
+        return null;
+    }
+
+    const date = input instanceof Date ? input : new Date(input);
+    if (isNaN(date)) {
+        throw new Error(`Invalid date: ${input}`);
+    }
+
+    return date;
+};
+
+class DateInput extends Component {
+    onChange = (_, date) => this.props.input.onChange(date);
+
+    render() {
+        const { input, label, meta: { touched, error }, options, source, elStyle, resource } = this.props;
+
+        return (<DatePicker
+            {...input}
+            errorText={touched && error}
+            floatingLabelText={<FieldTitle label={label} source={source} resource={resource} />}
+            DateTimeFormat={Intl.DateTimeFormat}
+            container="inline"
+            autoOk
+            value={datify(input.value)}
+            onChange={this.onChange}
+            style={elStyle}
+            {...options}
+        />);
+    }
+}
+
+DateInput.propTypes = {
+    addField: PropTypes.bool.isRequired,
+    elStyle: PropTypes.object,
+    input: PropTypes.object,
+    label: PropTypes.string,
+    meta: PropTypes.object,
+    options: PropTypes.object,
+    resource: PropTypes.string,
+    source: PropTypes.string,
+};
+
+DateInput.defaultProps = {
+    addField: true,
+    options: {},
+};
+
+export default DateInput;
Index: src/mui/input/AutocompleteInput.spec.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/input/AutocompleteInput.spec.js	(revision )
+++ src/mui/input/AutocompleteInput.spec.js	(revision )
@@ -0,0 +1,107 @@
+import React from 'react';
+import assert from 'assert';
+import { shallow } from 'enzyme';
+import AutocompleteInput from './AutocompleteInput';
+
+describe('<AutocompleteInput />', () => {
+    const defaultProps = {
+        source: 'foo',
+        meta: {},
+        input: {},
+    };
+
+    it('should use a mui AutoComplete', () => {
+        const wrapper = shallow(<AutocompleteInput {...defaultProps} input={{ value: 1 }} choices={[{ id: 1, name: 'hello' }]} />);
+        const AutoCompleteElement = wrapper.find('AutoComplete');
+        assert.equal(AutoCompleteElement.length, 1);
+        assert.equal(AutoCompleteElement.prop('searchText'), 'hello');
+    });
+
+    it('should use the input parameter value as the initial input searchText', () => {
+        const wrapper = shallow(<AutocompleteInput
+            {...defaultProps}
+            input={{ value: 2 }}
+            choices={[{ id: 2, name: 'foo' }]}
+        />);
+        const AutoCompleteElement = wrapper.find('AutoComplete').first();
+        assert.equal(AutoCompleteElement.prop('searchText'), 'foo');
+    });
+
+    it('should pass choices as dataSource', () => {
+        const wrapper = shallow(<AutocompleteInput
+            {...defaultProps}
+            choices={[
+                { id: 'M', name: 'Male' },
+                { id: 'F', name: 'Female' },
+            ]}
+            options={{ open: true }}
+        />);
+        const AutoCompleteElement = wrapper.find('AutoComplete').first();
+        assert.deepEqual(AutoCompleteElement.prop('dataSource'), [
+            { value: 'M', text: 'Male' },
+            { value: 'F', text: 'Female' },
+        ]);
+    });
+
+    it('should use optionValue as value identifier', () => {
+        const wrapper = shallow(<AutocompleteInput
+            {...defaultProps}
+            optionValue="foobar"
+            choices={[
+                { foobar: 'M', name: 'Male' },
+            ]}
+        />);
+        const AutoCompleteElement = wrapper.find('AutoComplete').first();
+        assert.deepEqual(AutoCompleteElement.prop('dataSource'), [
+            { value: 'M', text: 'Male' },
+        ]);
+    });
+
+    it('should use optionText with a string value as text identifier', () => {
+        const wrapper = shallow(<AutocompleteInput
+            {...defaultProps}
+            optionText="foobar"
+            choices={[
+                { id: 'M', foobar: 'Male' },
+            ]}
+        />);
+        const AutoCompleteElement = wrapper.find('AutoComplete').first();
+        assert.deepEqual(AutoCompleteElement.prop('dataSource'), [
+            { value: 'M', text: 'Male' },
+        ]);
+    });
+
+    it('should use optionText with a function value as text identifier', () => {
+        const wrapper = shallow(<AutocompleteInput
+            {...defaultProps}
+            optionText={choice => choice.foobar}
+            choices={[
+                { id: 'M', foobar: 'Male' },
+            ]}
+        />);
+        const AutoCompleteElement = wrapper.find('AutoComplete').first();
+        assert.deepEqual(AutoCompleteElement.prop('dataSource'), [
+            { value: 'M', text: 'Male' },
+        ]);
+    });
+
+    describe('error message', () => {
+        it('should not be displayed if field is pristine', () => {
+            const wrapper = shallow(<AutocompleteInput {...defaultProps} meta={{ touched: false }} />);
+            const AutoCompleteElement = wrapper.find('AutoComplete');
+            assert.equal(AutoCompleteElement.prop('errorText'), false);
+        });
+
+        it('should not be displayed if field has been touched but is valid', () => {
+            const wrapper = shallow(<AutocompleteInput {...defaultProps} meta={{ touched: true, error: false }} />);
+            const AutoCompleteElement = wrapper.find('AutoComplete');
+            assert.equal(AutoCompleteElement.prop('errorText'), false);
+        });
+
+        it('should be displayed if field has been touched and is invalid', () => {
+            const wrapper = shallow(<AutocompleteInput {...defaultProps} meta={{ touched: true, error: 'Required field.' }} />);
+            const AutoCompleteElement = wrapper.find('AutoComplete');
+            assert.equal(AutoCompleteElement.prop('errorText'), 'Required field.');
+        });
+    });
+});
Index: src/mui/input/BooleanInput.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/input/BooleanInput.js	(revision )
+++ src/mui/input/BooleanInput.js	(revision )
@@ -0,0 +1,43 @@
+import React, { PropTypes } from 'react';
+import Toggle from 'material-ui/Toggle';
+import FieldTitle from '../../util/FieldTitle';
+
+const styles = {
+    block: {
+        margin: '1rem 0',
+        maxWidth: 250,
+    },
+    label: {
+        color: 'rgba(0, 0, 0, 0.298039)',
+    },
+    toggle: {
+        marginBottom: 16,
+    },
+};
+
+const BooleanInput = ({ input, label, source, elStyle, resource }) => (
+    <div style={elStyle || styles.block}>
+        <Toggle
+            defaultToggled={!!input.value}
+            onToggle={input.onChange}
+            labelStyle={styles.label}
+            style={styles.toggle}
+            label={<FieldTitle label={label} source={source} resource={resource} />}
+        />
+    </div>
+);
+
+BooleanInput.propTypes = {
+    addField: PropTypes.bool.isRequired,
+    elStyle: PropTypes.object,
+    input: PropTypes.object,
+    label: PropTypes.string,
+    resource: PropTypes.string,
+    source: PropTypes.string,
+};
+
+BooleanInput.defaultProps = {
+    addField: true,
+};
+
+export default BooleanInput;
Index: src/CrudRoute.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/CrudRoute.js	(revision )
+++ src/CrudRoute.js	(revision )
@@ -0,0 +1,39 @@
+import React from 'react';
+import { IndexRoute, Route } from 'react-router';
+import { createRoutesFromReactChildren } from 'react-router/lib/RouteUtils';
+import pure from 'recompose/pure';
+
+const CrudRoute = () => <div>&lt;CrudRoute&gt; elements are for configuration only and should not be rendered</div>;
+
+CrudRoute.createRouteFromReactElement = (element, parentRoute) => {
+    const { path, list, create, edit, show, remove, options, onEnter = () => null } = element.props;
+
+    // dynamically add crud routes
+    const crudRoute = createRoutesFromReactChildren(
+        <Route path={path}>
+            {list && <IndexRoute component={list} onEnter={onEnter({ resource: path, route: 'list' })} />}
+            {create && <Route path="create" component={create} onEnter={onEnter({ resource: path, route: 'create' })} />}
+            {edit && <Route path=":id" component={edit} onEnter={onEnter({ resource: path, route: 'edit', scrollToTop: true })} />}
+            {show && <Route path=":id/show" component={show} onEnter={onEnter({ resource: path, route: 'show', scrollToTop: true })} />}
+            {remove && <Route path=":id/delete" component={remove} onEnter={onEnter({ resource: path, route: 'delete' })} />}
+        </Route>,
+        parentRoute,
+    )[0];
+    // higher-order component to pass path as resource to components
+    crudRoute.component = pure(({ children }) => (
+        <div>
+            {React.Children.map(children, child => React.cloneElement(child, {
+                resource: path,
+                options,
+                hasList: !!list,
+                hasEdit: !!edit,
+                hasShow: !!show,
+                hasCreate: !!create,
+                hasDelete: !!remove,
+            }))}
+        </div>
+    ));
+    return crudRoute;
+};
+
+export default CrudRoute;
Index: src/mui/button/ShowButton.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/button/ShowButton.js	(revision )
+++ src/mui/button/ShowButton.js	(revision )
@@ -0,0 +1,34 @@
+import React, { PropTypes } from 'react';
+import { Link } from 'react-router';
+import shouldUpdate from 'recompose/shouldUpdate';
+import compose from 'recompose/compose';
+import FlatButton from 'material-ui/FlatButton';
+import ImageEye from 'material-ui/svg-icons/image/remove-red-eye';
+import linkToRecord from '../../util/linkToRecord';
+import translate from '../../i18n/translate';
+
+const ShowButton = ({ basePath = '', label = 'aor.action.show', record = {}, translate }) => <FlatButton
+    primary
+    label={label && translate(label)}
+    icon={<ImageEye />}
+    containerElement={<Link to={`${linkToRecord(basePath, record.id)}/show`} />}
+    style={{ overflow: 'inherit' }}
+/>;
+
+ShowButton.propTypes = {
+    basePath: PropTypes.string,
+    label: PropTypes.string,
+    record: PropTypes.object,
+    translate: PropTypes.func.isRequired,
+};
+
+const enhance = compose(
+    shouldUpdate((props, nextProps) =>
+        props.record
+        && props.record.id !== nextProps.record.id
+        || props.basePath !== nextProps.basePath
+    ),
+    translate,
+);
+
+export default enhance(ShowButton);
Index: src/mui/field/RichTextField.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/field/RichTextField.js	(revision )
+++ src/mui/field/RichTextField.js	(revision )
@@ -0,0 +1,32 @@
+import React, { PropTypes } from 'react';
+import get from 'lodash.get';
+import pure from 'recompose/pure';
+
+export const removeTags = input => input.replace(/<[^>]+>/gm, '');
+
+const RichTextField = ({ source, record = {}, stripTags, elStyle }) => {
+    const value = get(record, source);
+    if (stripTags) {
+        return <div style={elStyle}>{removeTags(value)}</div>;
+    }
+
+    return <div style={elStyle} dangerouslySetInnerHTML={{ __html: value }}></div>;
+};
+
+RichTextField.propTypes = {
+    addLabel: PropTypes.bool,
+    elStyle: PropTypes.object,
+    label: PropTypes.string,
+    record: PropTypes.object,
+    source: PropTypes.string.isRequired,
+    stripTags: PropTypes.bool,
+};
+
+const PureRichTextField = pure(RichTextField);
+
+PureRichTextField.defaultProps = {
+    addLabel: true,
+    stripTags: false,
+};
+
+export default PureRichTextField;
Index: src/mui/form/FormField.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/form/FormField.js	(revision )
+++ src/mui/form/FormField.js	(revision )
@@ -0,0 +1,18 @@
+import React from 'react';
+import { Field } from 'redux-form';
+import Labeled from '../input/Labeled';
+
+const FormField = ({ input, ...rest }) => input.props.addField ?
+    (input.props.addLabel ?
+        <Field {...rest} {...input.props} name={input.props.source} component={Labeled} label={input.props.label}>{ input }</Field> :
+        <Field {...rest} {...input.props} name={input.props.source} component={input.type} />
+    ) :
+    (input.props.addLabel ?
+        <Labeled {...rest} label={input.props.label} source={input.props.source}>{input}</Labeled> :
+        (typeof input.type === 'string' ?
+            input :
+            React.cloneElement(input, rest)
+        )
+    );
+
+export default FormField;
Index: Makefile
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Makefile	(revision )
+++ Makefile	(revision )
@@ -0,0 +1,35 @@
+.PHONY: build help
+
+help:
+	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'
+
+install: package.json ## install dependencies
+	@npm install
+
+run: example_install ## run the example
+	@cd example && ../node_modules/.bin/webpack-dev-server --hot --inline --config ./webpack.config.js
+
+example_install: example/package.json
+	@cd example && npm install
+
+build: ## compile ES6 files to JS
+	@NODE_ENV=production ./node_modules/.bin/babel ./src -d lib --ignore '*.spec.js'
+
+watch: ## continuously compile ES6 files to JS
+	@NODE_ENV=production ./node_modules/.bin/babel ./src -d lib --ignore '*.spec.js' --watch
+
+doc: ## compile doc as html and launch doc web server
+	@cd docs && jekyll server . --watch
+
+test: ## launch unit tests
+	@NODE_ENV=test NODE_ICU_DATA=node_modules/full-icu ./node_modules/.bin/mocha \
+		--require ignore-styles \
+		--compilers js:babel-register \
+		'./src/**/*.spec.js'
+
+test-watch: ## launch unit tests and watch for changes
+	@NODE_ENV=test NODE_ICU_DATA=node_modules/full-icu ./node_modules/.bin/mocha \
+		--require ignore-styles \
+		--compilers js:babel-register \
+		--watch \
+		'./src/**/*.spec.js'
Index: src/mui/input/ReferenceInput.spec.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/input/ReferenceInput.spec.js	(revision )
+++ src/mui/input/ReferenceInput.spec.js	(revision )
@@ -0,0 +1,202 @@
+import React from 'react';
+import assert from 'assert';
+import { shallow } from 'enzyme';
+import sinon from 'sinon';
+import { ReferenceInput } from './ReferenceInput';
+import { SelectInput } from './SelectInput';
+
+describe('<ReferenceInput />', () => {
+    const defaultProps = {
+        crudGetMatching: () => true,
+        crudGetOne: () => true,
+        input: {},
+        reference: 'posts',
+        resource: 'comments',
+        source: 'post_id',
+    };
+    const MyComponent = () => <span id="mycomponent" />;
+
+    it('should not render anything if there is no referenceRecord and allowEmpty is false', () => {
+        const wrapper = shallow((
+            <ReferenceInput {...defaultProps}>
+                <MyComponent />
+            </ReferenceInput>
+        ));
+        const MyComponentElement = wrapper.find('MyComponent');
+        assert.equal(MyComponentElement.length, 0);
+    });
+
+    it('should not render enclosed component if allowEmpty is true', () => {
+        const wrapper = shallow((
+            <ReferenceInput {...defaultProps} allowEmpty>
+                <MyComponent />
+            </ReferenceInput>
+        ));
+        const MyComponentElement = wrapper.find('MyComponent');
+        assert.equal(MyComponentElement.length, 1);
+    });
+
+    it('should call crudGetMatching on mount with default fetch values', () => {
+        const crudGetMatching = sinon.spy();
+        shallow((
+            <ReferenceInput {...defaultProps} allowEmpty crudGetMatching={crudGetMatching}>
+                <MyComponent />
+            </ReferenceInput>
+        ), { lifecycleExperimental: true });
+        assert.deepEqual(crudGetMatching.args[0], [
+            'posts',
+            'comments@post_id',
+            {
+                page: 1,
+                perPage: 25,
+            },
+            {
+                field: 'id',
+                order: 'DESC',
+            },
+            {},
+        ]);
+    });
+
+    it('should allow to customize crudGetMatching arguments with perPage, sort, and filter props', () => {
+        const crudGetMatching = sinon.spy();
+        shallow((
+            <ReferenceInput
+                {...defaultProps}
+                allowEmpty
+                crudGetMatching={crudGetMatching}
+                sort={{ field: 'foo', order: 'ASC' }}
+                perPage={5}
+                filter={{ q: 'foo' }}
+            >
+                <MyComponent />
+            </ReferenceInput>
+        ), { lifecycleExperimental: true });
+        assert.deepEqual(crudGetMatching.args[0], [
+            'posts',
+            'comments@post_id',
+            {
+                page: 1,
+                perPage: 5,
+            },
+            {
+                field: 'foo',
+                order: 'ASC',
+            },
+            {
+                q: 'foo',
+            },
+        ]);
+    });
+
+    it('should call crudGetMatching when setFilter is called', () => {
+        const crudGetMatching = sinon.spy();
+        const wrapper = shallow((
+            <ReferenceInput
+                {...defaultProps}
+                allowEmpty
+                crudGetMatching={crudGetMatching}
+            >
+                <MyComponent />
+            </ReferenceInput>
+        ), { lifecycleExperimental: true });
+        wrapper.instance().setFilter('bar');
+        assert.deepEqual(crudGetMatching.args[1], [
+            'posts',
+            'comments@post_id',
+            {
+                page: 1,
+                perPage: 25,
+            },
+            {
+                field: 'id',
+                order: 'DESC',
+            },
+            {
+                q: 'bar',
+            },
+        ]);
+    });
+
+    it('should use custom filterToQuery function prop', () => {
+        const crudGetMatching = sinon.spy();
+        const wrapper = shallow((
+            <ReferenceInput
+                {...defaultProps}
+                allowEmpty
+                crudGetMatching={crudGetMatching}
+                filterToQuery={searchText => ({ foo: searchText })}
+            >
+                <MyComponent />
+            </ReferenceInput>
+        ), { lifecycleExperimental: true });
+        wrapper.instance().setFilter('bar');
+        assert.deepEqual(crudGetMatching.args[1], [
+            'posts',
+            'comments@post_id',
+            {
+                page: 1,
+                perPage: 25,
+            },
+            {
+                field: 'id',
+                order: 'DESC',
+            },
+            {
+                foo: 'bar',
+            },
+        ]);
+    });
+
+    it('should call crudGetOne on mount if value is set', () => {
+        const crudGetOne = sinon.spy();
+        shallow((
+            <ReferenceInput
+                {...defaultProps}
+                allowEmpty
+                crudGetOne={crudGetOne}
+                input={{ value: 5 }}
+            >
+                <MyComponent />
+            </ReferenceInput>
+        ), { lifecycleExperimental: true });
+        assert.deepEqual(crudGetOne.args[0], [
+            'posts',
+            5,
+            null,
+            false,
+        ]);
+    });
+
+    it('should pass onChange down to child component', () => {
+        const onChange = sinon.spy();
+        const wrapper = shallow((
+            <ReferenceInput
+                {...defaultProps}
+                allowEmpty
+                onChange={onChange}
+            >
+                <MyComponent />
+            </ReferenceInput>
+        ));
+        wrapper.find('MyComponent').simulate('change', 'foo');
+        assert.deepEqual(onChange.args[0], [
+            'foo',
+        ]);
+    });
+
+    it('should pass meta down to child component', () => {
+        const wrapper = shallow(
+            <ReferenceInput
+                {...defaultProps}
+                allowEmpty
+                meta={{ touched: false }}
+            >
+                <MyComponent />
+            </ReferenceInput>,
+        );
+
+        const myComponent = wrapper.find('MyComponent');
+        assert.notEqual(myComponent.prop('meta', undefined));
+    });
+});
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .gitignore	(revision )
+++ .gitignore	(revision )
@@ -0,0 +1,5 @@
+npm-debug.log
+node_modules
+lib
+es6
+docs/_site/
Index: src/mui/auth/Login.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/auth/Login.js	(revision )
+++ src/mui/auth/Login.js	(revision )
@@ -0,0 +1,158 @@
+import React, { Component, PropTypes } from 'react';
+import { propTypes, reduxForm, Field } from 'redux-form';
+import { connect } from 'react-redux';
+import { push as pushAction } from 'react-router-redux';
+import compose from 'recompose/compose';
+
+import MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';
+import getMuiTheme from 'material-ui/styles/getMuiTheme';
+import { Card, CardActions } from 'material-ui/Card';
+import Avatar from 'material-ui/Avatar';
+import RaisedButton from 'material-ui/RaisedButton';
+import Snackbar from 'material-ui/Snackbar';
+import TextField from 'material-ui/TextField';
+import CircularProgress from 'material-ui/CircularProgress';
+import LockIcon from 'material-ui/svg-icons/action/lock-outline';
+import { cyan500, pinkA200 } from 'material-ui/styles/colors';
+
+import defaultTheme from '../defaultTheme';
+import { AUTH_LOGIN } from '../../auth';
+import translate from '../../i18n/translate';
+
+const styles = {
+    main: {
+        display: 'flex',
+        flexDirection: 'column',
+        minHeight: '100vh',
+        alignItems: 'center',
+        justifyContent: 'center',
+    },
+    card: {
+        minWidth: 300,
+    },
+    avatar: {
+        margin: '1em',
+        textAlign: 'center ',
+    },
+    form: {
+        padding: '0 1em 1em 1em',
+    },
+    input: {
+        display: 'flex',
+    },
+};
+
+function getColorsFromTheme(theme) {
+    if (!theme) return { primary1Color: cyan500, accent1Color: pinkA200 };
+    const {
+        palette: {
+            primary1Color,
+            accent1Color,
+        },
+      } = theme;
+    return { primary1Color, accent1Color };
+}
+
+// see http://redux-form.com/6.4.3/examples/material-ui/
+const renderInput = ({ meta: { touched, error } = {}, input: { ...inputProps }, ...props }) =>
+    <TextField
+        errorText={touched && error}
+        {...inputProps}
+        {...props}
+        fullWidth
+    />;
+
+class Login extends Component {
+    constructor(props) {
+        super(props);
+        this.state = { signInError: false };
+    }
+
+    login = ({ username, password }) => {
+        const { authClient, push, location } = this.props;
+        if (!authClient) return;
+        return authClient(AUTH_LOGIN, { username, password })
+            .then(() => push(location.state ? location.state.nextPathname : '/'))
+            .catch(e => this.setState({ signInError: e }));
+    }
+
+    render() {
+        const { handleSubmit, submitting, theme, translate } = this.props;
+        const { signInError } = this.state;
+        const muiTheme = getMuiTheme(theme);
+        const { primary1Color, accent1Color } = getColorsFromTheme(muiTheme);
+        return (
+            <MuiThemeProvider muiTheme={muiTheme}>
+                <div style={{ ...styles.main, backgroundColor: primary1Color }}>
+                    <Card style={styles.card}>
+                        <div style={styles.avatar}>
+                            <Avatar backgroundColor={accent1Color} icon={<LockIcon />} size={60} />
+                        </div>
+                        {signInError && <Snackbar open autoHideDuration={4000} message={signInError.message || signInError || translate('aor.auth.sign_in_error')} />}
+
+                        <form onSubmit={handleSubmit(this.login)}>
+                            <div style={styles.form}>
+                                <div style={styles.input} >
+                                    <Field
+                                        name="username"
+                                        component={renderInput}
+                                        floatingLabelText={translate('aor.auth.username')}
+                                        disabled={submitting}
+                                    />
+                                </div>
+                                <div style={styles.input}>
+                                    <Field
+                                        name="password"
+                                        component={renderInput}
+                                        floatingLabelText={translate('aor.auth.password')}
+                                        type="password"
+                                        disabled={submitting}
+                                    />
+                                </div>
+                            </div>
+                            <CardActions>
+                                <RaisedButton
+                                    type="submit"
+                                    primary
+                                    disabled={submitting}
+                                    icon={submitting && <CircularProgress size={25} thickness={2} />}
+                                    label={translate('aor.auth.sign_in')}
+                                    fullWidth
+                                />
+                            </CardActions>
+                        </form>
+                    </Card>
+                </div>
+            </MuiThemeProvider>
+        );
+    }
+}
+
+Login.propTypes = {
+    ...propTypes,
+    authClient: PropTypes.func,
+    previousRoute: PropTypes.string,
+    theme: PropTypes.object.isRequired,
+    translate: PropTypes.func.isRequired,
+};
+
+Login.defaultProps = {
+    theme: defaultTheme,
+};
+
+const enhance = compose(
+    translate,
+    reduxForm({
+        form: 'signIn',
+        validate: (values, props) => {
+            const errors = {};
+            const { translate } = props;
+            if (!values.username) errors.username = translate('aor.validation.required');
+            if (!values.password) errors.password = translate('aor.validation.required');
+            return errors;
+        },
+    }),
+    connect(null, { push: pushAction }),
+);
+
+export default enhance(Login);
Index: src/mui/field/FunctionField.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/field/FunctionField.js	(revision )
+++ src/mui/field/FunctionField.js	(revision )
@@ -0,0 +1,27 @@
+import React, { PropTypes } from 'react';
+import pure from 'recompose/pure';
+
+/**
+ * @example
+ * <FunctionField source="last_name" label="Name" render={record => `${record.first_name} ${record.last_name}`} />
+ */
+const FunctionField = ({ record = {}, source, render, elStyle }) => record ?
+    <span style={elStyle}>{render(record)}</span> :
+    null;
+
+FunctionField.propTypes = {
+    addLabel: PropTypes.bool,
+    elStyle: PropTypes.object,
+    label: PropTypes.string,
+    render: PropTypes.func.isRequired,
+    record: PropTypes.object,
+    source: PropTypes.string,
+};
+
+const PureFunctionField = pure(FunctionField);
+
+PureFunctionField.defaultProps = {
+    addLabel: true,
+};
+
+export default PureFunctionField;
Index: src/mui/field/DateField.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/field/DateField.js	(revision )
+++ src/mui/field/DateField.js	(revision )
@@ -0,0 +1,72 @@
+import React, { PropTypes } from 'react';
+import get from 'lodash.get';
+import pure from 'recompose/pure';
+
+const toLocaleStringSupportsLocales = (() => {
+    // from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString
+    try {
+        new Date().toLocaleString("i");
+    } catch (error) {
+        return (error instanceof RangeError);
+    }
+    return false;
+})();
+
+/**
+ * Display a date value as a locale string.
+ *
+ * Uses Intl.DateTimeFormat() if available, passing the locales and options props as arguments.
+ * If Intl is not available, it outputs date as is (and ignores the locales and options props).
+ *
+ * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString
+ * @example
+ * <DateField source="published_at" />
+ * // renders the record { id: 1234, published_at: new Date('2012-11-07') } as
+ * <span>07/11/2012</span>
+ *
+ * <DateField source="published_at" elStyle={{ color: 'red' }} />
+ * // renders the record { id: 1234, new Date('2012-11-07') } as
+ * <span style="color:red;">07/11/2012</span>
+ *
+ * <DateField source="share" options={{ weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }} />
+ * // renders the record { id: 1234, new Date('2012-11-07') } as
+ * <span>Wednesday, November 7, 2012</span>
+ *
+ * <DateField source="price" locales="fr-FR" options={{ weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }} />
+ * // renders the record { id: 1234, new Date('2012-11-07') } as
+ * <span>mercredi 7 novembre 2012</span>
+ */
+
+export const DateField = ({ elStyle, locales, options, record, showTime = false, source }) => {
+    if (!record) return null;
+    const value = get(record, source);
+    if (value == null) return null;
+    const date = value instanceof Date ? value : new Date(value);
+    const dateString = showTime ?
+        (toLocaleStringSupportsLocales ? date.toLocaleString(locales, options) : date.toLocaleString()) :
+        (toLocaleStringSupportsLocales ? date.toLocaleDateString(locales, options) : date.toLocaleDateString());
+
+    return <span style={elStyle}>{dateString}</span>;
+};
+
+DateField.propTypes = {
+    addLabel: PropTypes.bool,
+    elStyle: PropTypes.object,
+    label: PropTypes.string,
+    locales: PropTypes.oneOfType([
+        PropTypes.string,
+        PropTypes.arrayOf(PropTypes.string),
+    ]),
+    options: PropTypes.object,
+    record: PropTypes.object,
+    showTime: PropTypes.bool,
+    source: PropTypes.string.isRequired,
+};
+
+const PureDateField = pure(DateField);
+
+PureDateField.defaultProps = {
+    addLabel: true,
+};
+
+export default PureDateField;
Index: src/mui/field/FunctionField.spec.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/field/FunctionField.spec.js	(revision )
+++ src/mui/field/FunctionField.spec.js	(revision )
@@ -0,0 +1,13 @@
+import React from 'react';
+import assert from 'assert';
+import { shallow } from 'enzyme';
+import FunctionField from './FunctionField';
+
+describe('<FunctionField />', () => {
+    it('should render using the render function', () => {
+        const record = { foo: 'bar' };
+        const wrapper = shallow(<FunctionField record={record} render={r => r['foo'].substr(0,2)} />);
+        assert.equal(wrapper.html(), '<span>ba</span>');
+    });
+
+});
Index: src/mui/input/Labeled.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/input/Labeled.js	(revision )
+++ src/mui/input/Labeled.js	(revision )
@@ -0,0 +1,62 @@
+import React, { Children, Component, PropTypes } from 'react';
+import TextField from 'material-ui/TextField';
+import FieldTitle from '../../util/FieldTitle';
+
+const defaultLabelStyle = {
+    paddingTop: '2em',
+    height: 'auto',
+};
+
+/**
+ * Use any component as read-only Input, labeled just like other Inputs.
+ *
+ * Useful to use a Field in the Edit or Create components.
+ * The child component will receive the current record.
+ *
+ * This component name doesn't have a typo. We had to choose between
+ * the American English "Labeled", and the British English "Labelled".
+ * We flipped a coin.
+ *
+ * @example
+ * <Labeled label="Comments">
+ *     <FooComponent source="title" />
+ * </Labeled>
+ */
+class Labeled extends Component {
+    render() {
+        const { input, label, resource, record, onChange, basePath, children, source, disabled = true, labelStyle = defaultLabelStyle } = this.props;
+        if (!label && !source) {
+            throw new Error(`Cannot create label for component <${children && children.type && children.type.name}>: You must set either the label or source props. You can also disable automated label insertion by setting 'addLabel: false' in the component default props`);
+        }
+        return (
+            <TextField
+                floatingLabelText={<FieldTitle label={label} source={source} resource={resource} />}
+                floatingLabelFixed
+                fullWidth
+                disabled={disabled}
+                underlineShow={false}
+                style={labelStyle}
+            >
+                {children && typeof children.type !== 'string' ?
+                    React.cloneElement(children, { input, record, resource, onChange, basePath }) :
+                    children
+                }
+            </TextField>
+        );
+    }
+}
+
+Labeled.propTypes = {
+    basePath: PropTypes.string,
+    children: PropTypes.element,
+    disabled: PropTypes.bool,
+    input: PropTypes.object,
+    label: PropTypes.string,
+    onChange: PropTypes.func,
+    record: PropTypes.object,
+    resource: PropTypes.string,
+    source: PropTypes.string,
+    labelStyle: PropTypes.object,
+};
+
+export default Labeled;
Index: src/mui/list/Pagination.spec.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/list/Pagination.spec.js	(revision )
+++ src/mui/list/Pagination.spec.js	(revision )
@@ -0,0 +1,40 @@
+import assert from 'assert';
+import React from 'react';
+import { shallow } from 'enzyme';
+
+import { Pagination } from './Pagination';
+
+describe('<Pagination />', () => {
+    describe('mobile', () => {
+        it('should render a condensed <Toolbar>', () => {
+            const wrapper = shallow(<Pagination page={2} perPage={5} total={15} translate={x => x} width={1} />);
+            const iconButtons = wrapper.find('IconButton');
+            assert.equal(iconButtons.length, 2);
+            const flatButtons = wrapper.find('FlatButton');
+            assert.equal(flatButtons.length, 0);
+        });
+        it('should render only the text when no pagination is necessary', () => {
+            const wrapper = shallow(<Pagination page={1} perPage={20} total={15} translate={x => x} width={1} />);
+            const iconButtons = wrapper.find('IconButton');
+            assert.equal(iconButtons.length, 0);
+            const span = wrapper.find('span');
+            assert.equal(span.text(), 'aor.navigation.page_range_info');
+        });
+    });
+    describe('desktop', () => {
+        it('should render a normal <Toolbar>', () => {
+            const wrapper = shallow(<Pagination page={2} perPage={5} total={15} translate={x => x} width={2} />);
+            const iconButtons = wrapper.find('IconButton');
+            assert.equal(iconButtons.length, 0);
+            const flatButtons = wrapper.find('FlatButton');
+            assert.equal(flatButtons.length, 5);
+        });
+        it('should render only the text when no pagination is necessary', () => {
+            const wrapper = shallow(<Pagination page={1} perPage={20} total={15} translate={x => x} width={2} />);
+            const flatButtons = wrapper.find('FlatButton');
+            assert.equal(flatButtons.length, 0);
+            const span = wrapper.find('span');
+            assert.equal(span.text(), 'aor.navigation.page_range_info');
+        });
+    });
+});
Index: src/sideEffect/saga/crudResponse.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sideEffect/saga/crudResponse.js	(revision )
+++ src/sideEffect/saga/crudResponse.js	(revision )
@@ -0,0 +1,66 @@
+import { put, takeEvery } from 'redux-saga/effects';
+import { push } from 'react-router-redux';
+import {
+    CRUD_CREATE_FAILURE,
+    CRUD_CREATE_SUCCESS,
+    CRUD_DELETE_FAILURE,
+    CRUD_DELETE_SUCCESS,
+    CRUD_GET_LIST_FAILURE,
+    CRUD_GET_MANY_FAILURE,
+    CRUD_GET_MANY_REFERENCE_FAILURE,
+    CRUD_GET_ONE_FAILURE,
+    CRUD_UPDATE_FAILURE,
+    CRUD_UPDATE_SUCCESS,
+} from '../../actions/dataActions';
+import { showNotification } from '../../actions/notificationActions';
+import linkToRecord from '../../util/linkToRecord';
+
+/**
+ * Side effects for fetch responses
+ *
+ * Mostly redirects and notifications
+ */
+function* handleResponse({ type, requestPayload, error, payload }) {
+    switch (type) {
+    case CRUD_UPDATE_SUCCESS:
+        return requestPayload.redirect ? yield [
+            put(showNotification('aor.notification.updated')),
+            put(push(requestPayload.basePath)),
+        ] : yield [put(showNotification('aor.notification.updated'))];
+    case CRUD_CREATE_SUCCESS:
+        return requestPayload.redirect ? yield [
+            put(showNotification('aor.notification.created')),
+            put(push(linkToRecord(requestPayload.basePath, payload.data.id))),
+        ] : yield [put(showNotification('aor.notification.created'))];
+    case CRUD_DELETE_SUCCESS:
+        return requestPayload.redirect ? yield [
+            put(showNotification('aor.notification.deleted')),
+            put(push(requestPayload.basePath)),
+        ] : yield [put(showNotification('aor.notification.deleted'))];
+    case CRUD_GET_ONE_FAILURE:
+        return requestPayload.basePath ? yield [
+            put(showNotification('aor.notification.item_doesnt_exist', 'warning')),
+            put(push(requestPayload.basePath)),
+        ] : yield [];
+    case CRUD_GET_LIST_FAILURE:
+    case CRUD_GET_MANY_FAILURE:
+    case CRUD_GET_MANY_REFERENCE_FAILURE:
+    case CRUD_CREATE_FAILURE:
+    case CRUD_UPDATE_FAILURE:
+    case CRUD_DELETE_FAILURE: {
+        console.error(error);
+        const errorMessage = typeof error === 'string'
+            ? error
+            : (error.message || 'aor.notification.http_error');
+        return yield [
+            put(showNotification(errorMessage, 'warning')),
+        ];
+    }
+    default:
+        return yield [];
+    }
+}
+
+export default function* () {
+    yield takeEvery(action => action.meta && action.meta.fetchResponse, handleResponse);
+}
Index: src/mui/button/ListButton.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/mui/button/ListButton.js	(revision )
+++ src/mui/button/ListButton.js	(revision )
@@ -0,0 +1,21 @@
+import React, { PropTypes } from 'react';
+import { Link } from 'react-router';
+import FlatButton from 'material-ui/FlatButton';
+import ActionList from 'material-ui/svg-icons/action/list';
+import translate from '../../i18n/translate';
+
+const ListButton = ({ basePath = '', label = 'aor.action.list', translate }) => <FlatButton
+    primary
+    label={label && translate(label)}
+    icon={<ActionList />}
+    containerElement={<Link to={basePath} />}
+    style={{ overflow: 'inherit' }}
+/>;
+
+ListButton.propTypes = {
+    basePath: PropTypes.string,
+    label: PropTypes.string,
+    translate: PropTypes.func.isRequired,
+};
+
+export default translate(ListButton);
